<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Appium2 总结（一）环境搭建以及简单脚本测试</title>
    <url>/2024/08/09/Appium2%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>Appium 是一个开源项目和相关软件的生态系统。 软件，旨在促进许多应用程序平台的 UI 自动化，包括移动平台（iOS、 Android、Tizen）、浏览器（Chrome、Firefox、Safari）、桌面（macOS、Windows）、电视（Roku、tvOS、 Android TV、三星）等，它还旨在支持用不同语言（JS、Java、Python 等）编写的自动化代码。</p>
<span id="more"></span>

<p>优点：</p>
<ul>
<li>开源</li>
<li>支持 Native App（原生应用）、 Web App（移动浏览器应用） 、Hybird App（混合应用）三种 App 类型</li>
<li>支持 iOS、 Android、Tizen</li>
<li>Server 也跨平台，支持 Mac OS、Windows、Linux</li>
<li>Appium 自动化侧睡不需要重新编译 App</li>
<li> 支持多语言编写测试脚本，Java、Python、JavaScript 等</li>
</ul>
<h2 id="1-Appium环境搭建"><a href="#1-Appium环境搭建" class="headerlink" title="1.Appium环境搭建"></a>1.Appium 环境搭建</h2><p>(0) Node 安装</p>
<p>已安装，这里不做赘述。</p>
<p>(1) 安装 JDK</p>
<p>由于 jdk 已安装，这里不做赘述。</p>
<p>(2) 安装 Android SDK</p>
<p>Android 开发专用的 IDE 是 <code>Android Studio</code>，在下载安装 <code>Android Studio</code> 的过程中，会<code>自行下载sdk</code>，sdk 中会<code>包含adb环境</code>，所以这里我们先下载一个 <code>Android Studio</code>，然后找到 <code>sdk</code> 位置 ，配置环境变量。</p>
<p>1️⃣使用 <code>brew --cask</code> 安装 <code>android-studio</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install --cask android-studio</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣打开 Android Studio（一路下一步后）→More Actions→Android SDK Location，找到 sdk 位置</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240729140933220.png" alt="image-20240729140933220"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240729141129521.png" alt="image-20240729141129521"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240729141255901.png" alt="image-20240729141255901"></p>
<p>3️⃣配置环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>.zshrc</code> 中插入</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/xxxxx/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/bin:/usr/local/sbin:<span class="variable">${PATH}</span></span><br></pre></td></tr></tbody></table></figure>

<p>保存退出后，刷新配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>4️⃣验证是否安装成功</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">adb --version</span><br></pre></td></tr></tbody></table></figure>

<p>(3) 安装 Appium</p>
<p>Appium 有界面的版本安装：（这个版本是 Appium1 已经不维护了，最新版的都是基于无界面版本的，若要使用则需要降低 Appium 版本）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install --cask appium</span><br></pre></td></tr></tbody></table></figure>

<p>Appium 命令版本安装：（版本是 Appium v2.11.2）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install appium</span><br></pre></td></tr></tbody></table></figure>

<p>Appium 安装后，安装安卓 uiautomator2 驱动（版本是 <a href="mailto:uiautomator2@3.7.4">uiautomator2@3.7.4</a>）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">appium driver install uiautomator2</span><br></pre></td></tr></tbody></table></figure>

<p>安装 ios xcuitest 驱动（版本是 <a href="mailto:xcuitest@7.24.3">xcuitest@7.24.3</a>）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">appium driver install xcuitest</span><br></pre></td></tr></tbody></table></figure>



<p>(4) 安装模拟器</p>
<p>常用的除了 Android Studio 自带的原生安卓外（有点慢），夜神、mumu 等模拟器也可以。</p>
<h2 id="2-ADB-常见命令（顺手复习总结一下）"><a href="#2-ADB-常见命令（顺手复习总结一下）" class="headerlink" title="2.ADB 常见命令（顺手复习总结一下）"></a>2.ADB 常见命令（顺手复习总结一下）</h2><p>ADB 全名是 Android Debug Bridge，是一个手机调试工具。</p>
<ul>
<li><p>Client 端：运行在开发机器中，用来发送 adb 命令。</p>
</li>
<li><p>Server 端：运行在开发机器中，用来管理 Client 端和手机的 Daemon 之前的通信。</p>
</li>
<li><p>Daemon 守护进程：运行在调试设备中，手机或模拟器，用来接受并执行 adb 命令。</p>
</li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240730095308085.png" alt="image-20240730095308085"></p>
<p>常用命令</p>
<p>1️⃣获取包名和界面名</p>
<ul>
<li>包名（package）：决定程序的唯一性（不是应用的名字）</li>
<li>界面名（activity）：目前可以理解，一个界面名，对应着一个界面</li>
</ul>
<p>例如：</p>
<p>首先进入所需要获取的信息的界面，如我们打开计算器：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># mac/linux，包名为：com.huawei.calculator 界面名[启动名]：.Calculator</span></span><br><span class="line">➜  ~ adb shell dumpsys window | grep mFocusedApp</span><br><span class="line">  mFocusedApp=ActivityRecord{xxxx u0 com.huawei.calculator/.Calculator t97617}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># window:</span></span><br><span class="line">adb shell dumpsys window | findstr mFocusedApp</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣文件传输</p>
<ul>
<li>上传文件 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># adb push 电脑的文件路径 手机的文件路径</span></span><br><span class="line"></span><br><span class="line">➜  ~ adb push /Users/user1/Pictures/guidao.png /data/</span><br><span class="line">/Users/user1/Pictures/guidao.png: 1 file pushed, 0 skipped. 103.9 MB/s (8064911 bytes <span class="keyword">in</span> 0.074s)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>下载文件 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># adb pull 手机的文件路径 电脑的文件路径</span></span><br><span class="line"></span><br><span class="line">➜  ~ adb pull /data/guidao.png /Users/user1/Downloads</span><br><span class="line">/data/guidao.png: 1 file pulled, 0 skipped. 89.2 MB/s (8064911 bytes <span class="keyword">in</span> 0.086s)</span><br></pre></td></tr></tbody></table></figure>

<p>3️⃣app 启动时间</p>
<p>测试人员对于 App 的启动速度必须进行测试，测试标准如下：</p>
<ul>
<li>需求有明确的启动时间指标</li>
<li>参考同类软件，启动时间不能大于竞争对手的启动时间 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># adb shell am start -W 包名/界面名[启动名]（先不用启动～）</span></span><br><span class="line"></span><br><span class="line">➜  ~ adb shell am start -W com.android.browser/.BrowserActivity</span><br><span class="line">Starting: Intent { act=android.intent.action.MAIN <span class="built_in">cat</span>=[android.intent.category.LAUNCHER] cmp=com.android.browser/.BrowserActivity }</span><br><span class="line">Status: ok</span><br><span class="line">Activity: com.android.browser/.BrowserActivity</span><br><span class="line">TotalTime: 727</span><br><span class="line">WaitTime: 730</span><br><span class="line">Complete</span><br></pre></td></tr></tbody></table></figure>

<p>4️⃣获取手机日志</p>
<p>当测试过程中发现问题后想获取错误日志信息：</p>
<ul>
<li>打开被测应用程序，进入到出发缺陷的位置</li>
<li>使用查看日志命令：adb logcat</li>
<li> 触发缺陷</li>
<li>获取日志信息</li>
<li>停止 ctrl+c</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">adb logcat</span><br></pre></td></tr></tbody></table></figure>

<p>其他指令</p>
<table>
<thead>
<tr>
<th>No</th>
<th> 命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td> 1</td>
<td>adb connect ip: 端口号</td>
<td>连接手机 / 模拟器，ip 为模拟器的 ip 地址</td>
</tr>
<tr>
<td> 2</td>
<td>adb disconnect ip: 端口号</td>
<td>断开连接手机 / 模拟器</td>
</tr>
<tr>
<td> 3</td>
<td>adb devices</td>
<td> 获取当前电脑已经连接设备和对应的设备号</td>
</tr>
<tr>
<td> 4</td>
<td>adb shell</td>
<td> 进入到安卓手机内部的 Linux 系统命令行中</td>
</tr>
<tr>
<td> 5</td>
<td>adb start-server</td>
<td> 启动 adb 服务端，出 bug 时使用可以重启服务器，先关闭在启动</td>
</tr>
<tr>
<td> 6</td>
<td>adb kill-server</td>
<td> 停止 adb 服务端，出 bug 时使用可以重启服务器，先关闭在启动</td>
</tr>
<tr>
<td> 7</td>
<td>adb –help</td>
<td> 查看 adb 帮助，命令记不清楚时有用</td>
</tr>
<tr>
<td> 8</td>
<td>adb install 路径 /xxx.apk</td>
<td> 安装 app 到手机</td>
</tr>
<tr>
<td> 9</td>
<td>adb uninstall 包名</td>
<td>卸载手机上的 app，需要指定包名</td>
</tr>
<tr>
<td> 10</td>
<td>adb shell ps</td>
<td> 是显示当前控制台下属于当前用户的进程</td>
</tr>
<tr>
<td> 11</td>
<td>adb root</td>
<td> 有时报错权限不足时使用</td>
</tr>
<tr>
<td> 12</td>
<td>adb remount</td>
<td> 将 /system 部分置于可写入的模式，报错是</td>
</tr>
<tr>
<td> 13</td>
<td>adb reboot</td>
<td> 重启 Android 设备</td>
</tr>
</tbody></table>
<h2 id="3-第一个测试python-测试程序"><a href="#3-第一个测试python-测试程序" class="headerlink" title="3.第一个测试python 测试程序"></a>3. 第一个测试 python 测试程序</h2><p>1️⃣在 pycharm 上新建一个项目</p>
<p>2️⃣在 pycharm 上安装 <a href="https://pypi.org/project/Appium-Python-Client/">Appium-Python-Client</a></p>
<p><a href="https://github.com/appium/python-client">Appium Python Client</a> 是官方的 Appium Python 客户端，可通过 pypi 里包名为 <a href="https://pypi.org/project/Appium-Python-Client/">Appium-Python-Client</a> 进行安装。 它继承自 <a href="https://pypi.org/project/selenium/">Selenium Python Binding</a>， 因此安装 Appium Python 客户端时会包含 selenium 绑定。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(.venv) ➜  StudyAppium pip install Appium-Python-Client</span><br></pre></td></tr></tbody></table></figure>

<p>3️⃣在 pycharm 上新建一个文件 <code>test_appium.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.options.android <span class="keyword">import</span> UiAutomator2Options</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"></span><br><span class="line">capabilities = <span class="built_in">dict</span>(</span><br><span class="line">    platformName=<span class="string">'Android'</span>,</span><br><span class="line">    automationName=<span class="string">'uiautomator2'</span>,</span><br><span class="line">    deviceName=<span class="string">'192.168.XX.XXX:5555'</span>, <span class="comment"># 雷神模拟器</span></span><br><span class="line">    appPackage=<span class="string">'com.android.settings'</span>,</span><br><span class="line">    appActivity=<span class="string">'.Settings'</span>,</span><br><span class="line">    language=<span class="string">'en'</span>,</span><br><span class="line">    locale=<span class="string">'US'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">appium_server_url = <span class="string">'http://localhost:4723'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAppium</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.driver = webdriver.Remote(appium_server_url, options=UiAutomator2Options().load_capabilities(capabilities))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.driver:</span><br><span class="line">            <span class="variable language_">self</span>.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_find_battery</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        el = <span class="variable language_">self</span>.driver.find_element(by=AppiumBy.XPATH, value=<span class="string">'//*[@text="Battery"]'</span>)</span><br><span class="line">        el.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>4️⃣在终端连接安装模拟器</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb connect 192.168.XX.XX:5555</span><br><span class="line">connected to 192.168.XX.XX:5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一下</span></span><br><span class="line">➜  ~ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.XX.XX:5555	device</span><br></pre></td></tr></tbody></table></figure>

<p>5️⃣在终端启动 Appium</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ appium</span><br><span class="line">[Appium] Welcome to Appium v2.11.2</span><br><span class="line">[Appium] The autodetected Appium home path: /Users/user1/.appium</span><br><span class="line">[Appium] Attempting to load driver uiautomator2...</span><br><span class="line">[Appium] Attempting to load driver xcuitest...</span><br><span class="line">.........</span><br></pre></td></tr></tbody></table></figure>

<p>6️⃣在 pycharm 上运行 <code>test_appium.py</code>，测试通过。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240730193606283.png" alt="image-20240730193606283"></p>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2>]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium2 总结（二）inspector 工具使用及定位操作元素</title>
    <url>/2024/08/09/Appium2%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89inspector%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%AE%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>Appium Inspector 是 Appium 的一个工具，<strong>用于帮助开发人员和测试人员分析和调试移动应用程序</strong>。 它提供了图形界面和交互式的功能，使您能够轻松地检查应用程序的 UI 元素、获取元素属性、执行操作和生成自动化测试脚本。</p>
<span id="more"></span>

<h2 id="1-Appium-Inspector-下载"><a href="#1-Appium-Inspector-下载" class="headerlink" title="1.Appium Inspector 下载"></a>1.Appium Inspector 下载</h2><p><a href="https://github.com/appium/appium-inspector/releases">下载地址</a></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240730200543128.png" alt="image-20240730200543128"></p>
<p>选择相应版本下载后安装。</p>
<h2 id="2-Appium-Inspector使用"><a href="#2-Appium-Inspector使用" class="headerlink" title="2.Appium Inspector使用"></a>2.Appium Inspector 使用</h2><p>（1）首先连接模拟器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb connect 192.168.XX.XX:5555</span><br><span class="line">connected to 192.168.XX.XX:5555</span><br></pre></td></tr></tbody></table></figure>

<p>（2）启动 appium 服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ appium</span><br><span class="line">[Appium] Welcome to Appium v2.11.2</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>

<p>（3）打开 Appium Inspector</p>
<p>在 Capability Builder 中，填写</p>
<p>platformName=’Android’</p>
<p>automationName=’uiautomator2’</p>
<p>然后点击 <code>Start Session</code> 按钮。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240731112127407.png" alt="image-20240731112127407"></p>
<p>界面看到模拟器的截图，说明连接成功。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240731112511529.png" alt="image-20240731112511529"></p>
<p>（4）安装 2 个 app 用于测试</p>
<p><a href="https://github.com/appium/appium/raw/master/packages/appium/sample-code/apps/ApiDemos-debug.apk">appium 官方 Demo apk 下载地址</a></p>
<p>使用 adb 命令安装：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb install /Users/user1/Downloads/ApiDemos-debug.apk</span><br><span class="line">Performing Streamed Install</span><br><span class="line">Success</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/imengyu/AutoCalc/raw/master/app-debug.apk">计算器 AutoCalc</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb install /Users/user1/Downloads/ApiDemos-debug.apk.apk</span><br><span class="line">Performing Streamed Install</span><br><span class="line">Success</span><br></pre></td></tr></tbody></table></figure>



<p>安装成功后，模拟器出现如下 app</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240731145423828.png" alt="image-20240731145423828"></p>
<p>（5）打开 API Demos ，获取包名界面名（活动名）</p>
<p>1️⃣通过 adb 命令获取</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb shell dumpsys window |grep mFocusedApp</span><br><span class="line">    mFocusedApp=Token{b14e783 ActivityRecord{3e73e32 u0 io.appium.android.apis/.ApiDemos t9}}</span><br><span class="line">    mFocusedApp=AppWindowToken{8c2ad00 token=Token{b14e783 ActivityRecord{3e73e32 u0 io.appium.android.apis/.ApiDemos t9}}}</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣通过 Appium Inspector 获取</p>
<p>获取包名 <code>Commands</code>→<code>App Management</code>→<code>getCurrentPackage</code></p>
<p>获取界面名 <code>Commands</code>→<code>App Management</code>→<code>getCurrentPackage</code></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/2024-07-31%2015.38.57.gif" alt="2024-07-31 15.38.57"></p>
<h2 id="2-定位操作元素"><a href="#2-定位操作元素" class="headerlink" title="2.定位操作元素"></a>2. 定位操作元素</h2><p>（1）通过 Appium Inspector 获取元素的 id</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/2024-07-31%2018.12.29.gif" alt="2024-07-31 18.12.29"></p>
<p>（2）通过 id 获取获取元素，操作元素</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 ID 找元素</span></span><br><span class="line"><span class="comment"># 分别获取计算器上按键 1+2= 四个按钮的按键，并且点击</span></span><br><span class="line">driver.find_element(AppiumBy.ID, <span class="string">'com.dreamfish.com.autocalc:id/btn_pad_number_1'</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.ID, <span class="string">'com.dreamfish.com.autocalc:id/btn_pad_plus'</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.ID, <span class="string">'com.dreamfish.com.autocalc:id/btn_pad_number_2'</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">driver.find_element(AppiumBy.ID, <span class="string">'com.dreamfish.com.autocalc:id/btn_pad_equal'</span>).click()</span><br></pre></td></tr></tbody></table></figure>

<p>(2) 通过</p>
<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2>]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium2 总结（三）图像识别定位</title>
    <url>/2024/08/09/Appium2%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="1-Appium-图像识别插件images安装"><a href="#1-Appium-图像识别插件images安装" class="headerlink" title="1.Appium 图像识别插件images安装"></a>1.Appium 图像识别插件 images 安装</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ appium plugin install images</span><br><span class="line">✔ Checking <span class="keyword">if</span> <span class="string">'@appium/images-plugin'</span> is compatible</span><br><span class="line">✔ Installing <span class="string">'images'</span> using NPM install spec <span class="string">'@appium/images-plugin'</span></span><br><span class="line">ℹ Plugin images@3.0.17 successfully installed</span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="2-Appium带着-images-插件启动"><a href="#2-Appium带着-images-插件启动" class="headerlink" title="2.Appium带着 images 插件启动"></a>2.Appium 带着 images 插件启动</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ appium --use-plugins=images</span><br><span class="line">[Appium] Attempting to load plugin images...</span><br><span class="line">[Appium] .........</span><br></pre></td></tr></tbody></table></figure>



<h2 id="3-裁剪图片"><a href="#3-裁剪图片" class="headerlink" title="3.裁剪图片"></a>3. 裁剪图片</h2><p>（1）使用模拟器或者手机截图</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Screenshot_20240801-184130.png" alt="Screenshot_20240801-184130"></p>
<p>（2）不改变尺寸大小和文件格式的情况下裁剪所要定位的图片</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/p1.png" alt="p1"></p>
<h2 id="4-python🌰"><a href="#4-python🌰" class="headerlink" title="4.python🌰"></a>4.python🌰</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.options.android <span class="keyword">import</span> UiAutomator2Options</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">capabilities = <span class="built_in">dict</span>(</span><br><span class="line">    platformName=<span class="string">'Android'</span>,</span><br><span class="line">    automationName=<span class="string">'uiautomator2'</span>,</span><br><span class="line">    deviceName=<span class="string">'xx'</span>, <span class="comment"># 这块在 android 平台上不作要求，填写 xx 都可以，在 ios 上必填</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">appium_server_url = <span class="string">'http://localhost:4723'</span> <span class="comment"># appium 服务地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 驱动</span></span><br><span class="line">driver = webdriver.Remote(appium_server_url, options=UiAutomator2Options().load_capabilities(capabilities))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'images/p1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> image_file:</span><br><span class="line">    <span class="comment"># 读取图片数据</span></span><br><span class="line">    image_data = image_file.read()</span><br><span class="line"><span class="comment"># 将图片数据使用 base64 编码</span></span><br><span class="line">encoded_image = base64.b64encode(image_data)</span><br><span class="line"><span class="comment"># 将编码后的图片数据转换为字符串</span></span><br><span class="line">encoded_image_str = encoded_image.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个原理是将所定位的图片转换为字符串，将目标页面也转换为字符串，然后在目标页面中对比相似度，相似度高的部分就定位成功</span></span><br><span class="line">driver.find_element(AppiumBy.IMAGE, encoded_image_str).click()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-相关参考"><a href="#5-相关参考" class="headerlink" title="5.相关参考"></a>5. 相关参考</h2><p><a href="https://www.bilibili.com/video/BV1qt421M7kZ/?spm_id_from=333.999.0.0&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d">https://www.bilibili.com/video/BV1qt421M7kZ/?spm_id_from=333.999.0.0&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>DataGrip 的使用</title>
    <url>/2024/10/02/DataGrip%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-“多光标”模式"><a href="#1-“多光标”模式" class="headerlink" title="1.“多光标”模式"></a>1.“多光标” 模式</h2><ul>
<li><code>Alt</code> + <code>Shift</code> + <code>鼠标左键</code>即可出现多光标，按 <code>Esc</code> 或者鼠标左键点任意位置退出<code>多光标模式</code></li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410021346052.gif" alt="datagrip多光标模式"></p>
<span id="more"></span>

<h2 id="2-整理-sql-格式"><a href="#2-整理-sql-格式" class="headerlink" title="2.整理 sql 格式"></a>2. 整理 sql 格式</h2><h3 id="（1）选中需要整理的区域"><a href="#（1）选中需要整理的区域" class="headerlink" title="（1）选中需要整理的区域"></a>（1）选中需要整理的区域</h3><h3 id="（2）Command-Alt-L"><a href="#（2）Command-Alt-L" class="headerlink" title="（2）Command+Alt+L"></a>（2）<code>Command</code>+<code>Alt</code>+<code>L</code></h3><h2 id="3-执行-sql"><a href="#3-执行-sql" class="headerlink" title="3.执行 sql"></a>3. 执行 sql</h2><h3 id="（1）选中需要整理的区域-1"><a href="#（1）选中需要整理的区域-1" class="headerlink" title="（1）选中需要整理的区域"></a>（1）选中需要整理的区域</h3><h3 id="（2）Command-Enter"><a href="#（2）Command-Enter" class="headerlink" title="（2）Command+Enter"></a>（2）<code>Command</code>+<code>Enter</code></h3><h2 id="4-后续补充"><a href="#4-后续补充" class="headerlink" title="4.后续补充"></a>4. 后续补充</h2>]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>datagrip</tag>
      </tags>
  </entry>
  <entry>
    <title>Django4.2 学习 - 快速入门（一）</title>
    <url>/2024/10/14/Django4.2%E5%AD%A6%E4%B9%A0-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1. 背景</h2><p>由于公司的自动化工具是 <code>Django</code> 写的，之前一直用 <code>Flask</code>，对 <code>Django</code> 了解一点，但不多，现在学习一下，不忙的时候可以维护一下自动化项目，加一点新功能。</p>
<h2 id="2-Django-版本介绍"><a href="#2-Django-版本介绍" class="headerlink" title="2.Django 版本介绍"></a>2.Django 版本介绍</h2><p>Django 官网：</p>
<p><code>https://docs.djangoproject.com/zh-hans/4.2/</code></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202501022320367.png" alt="Django release roadmap"></p>
<p>LTS 版本的意思是 <strong>long-term support</strong>，长期支持版本（3 年），所以建议企业级的项目尽量选用 LTS 版本。</p>
<span id="more"></span>

<h2 id="3-python-虚拟环境复习"><a href="#3-python-虚拟环境复习" class="headerlink" title="3.python 虚拟环境复习"></a>3.python 虚拟环境复习</h2><p><a href="https://www.tangxdou.com/2021/06/29/python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/">点击跳转</a></p>
<h2 id="4-在虚拟环境中安装-Django"><a href="#4-在虚拟环境中安装-Django" class="headerlink" title="4.在虚拟环境中安装 Django"></a>4. 在虚拟环境中安装 Django</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pip install django==4.2.17</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-创建-Django"><a href="#5-创建-Django" class="headerlink" title="5.创建 Django"></a>5. 创建 Django</h2><h3 id="1️⃣命令创建"><a href="#1️⃣命令创建" class="headerlink" title="1️⃣命令创建"></a>1️⃣命令创建</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">django-admin startproject HelloDjango</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2️⃣使用-Pycharm-创建"><a href="#2️⃣使用-Pycharm-创建" class="headerlink" title="2️⃣使用 Pycharm 创建"></a>2️⃣使用 Pycharm 创建</h3><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202501071117474.png" alt="image-20250107111708333" style="zoom:50%;">

<h3 id="3️⃣目录结构"><a href="#3️⃣目录结构" class="headerlink" title="3️⃣目录结构"></a>3️⃣目录结构</h3><p><code>manage.py</code></p>
<ul>
<li>Django 用于管理本项目的命令工具，之后进行站点运行，数据库自动生成等，都是通过本文件完成。</li>
</ul>
<p><code>__init__.py</code></p>
<ul>
<li>告诉 python 该目录是一个 python 包，暂无内容，后期一些工具的初始化可能会用到。</li>
</ul>
<p><code>settings.py</code></p>
<ul>
<li>Django 项目的配置文件，默认状态其中定义了本项目的组件，项目名称，数据库，静态资源等。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Django settings for DjangoPro2 project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Generated by 'django-admin startproject' using Django 5.1.4.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information on this file, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/5.1/topics/settings/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For the full list of settings and their values, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/5.1/ref/settings/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line"><span class="comment"># Build paths inside the project like this: BASE_DIR / 'subdir'.</span></span><br><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line"><span class="comment"># 项目密钥，内部加解密用</span></span><br><span class="line">SECRET_KEY = <span class="string">'django-insecure-ai-_w&amp;uuggfj-1hhx=eze!wnwv6ob0cw2k*$r1=x)ixt%1@gbd'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line"><span class="comment"># 是否启用调试模式</span></span><br><span class="line"><span class="comment"># True一般用于开发过程中使用，调试模式服务会自动重启，不用手动在去重启</span></span><br><span class="line"><span class="comment"># False一般用于上线部署</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 被允许的域名或IP</span></span><br><span class="line"><span class="comment"># * ：表示通配符，匹配所有IP</span></span><br><span class="line"><span class="comment"># 上线后，可以试试 指定本地 ip，看看外网 ip 是否可以访问的到</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"><span class="comment"># 定义应用</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">  <span class="comment"># 定义自己的应用，需要添加到这里，使用pycharm 创建的，则会自动添加</span></span><br><span class="line">    <span class="string">'user.apps.UserConfig'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件，定义自己的中间件，需要在这里注册</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根路由</span></span><br><span class="line">ROOT_URLCONF = <span class="string">'DjangoPro2.urls'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [BASE_DIR / <span class="string">'templates'</span>]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: {</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># wsgi目录</span></span><br><span class="line">WSGI_APPLICATION = <span class="string">'DjangoPro2.wsgi.application'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/5.1/ref/settings/#databases</span></span><br><span class="line"><span class="comment"># 数据库</span></span><br><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">      	<span class="comment"># 只能用关系行数据库</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: BASE_DIR / <span class="string">'db.sqlite3'</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Password validation</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators</span></span><br><span class="line"><span class="comment"># 密码验证</span></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.MinimumLengthValidator'</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.CommonPasswordValidator'</span>,</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.NumericPasswordValidator'</span>,</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/5.1/topics/i18n/</span></span><br><span class="line"><span class="comment"># 国际化</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span> <span class="comment"># 'en-us'英语, zh-hans 中文，在后台管理系统中生效</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'UTC'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/5.1/howto/static-files/</span></span><br><span class="line"><span class="comment"># 静态文件（CSS，JavaScript， Images等）</span></span><br><span class="line">STATIC_URL = <span class="string">'static/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default primary key field type</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field</span></span><br><span class="line"><span class="comment"># 默认主键字段类型</span></span><br><span class="line">DEFAULT_AUTO_FIELD = <span class="string">'django.db.models.BigAutoField'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p><code>urls.py</code></p>
<ul>
<li>维护项目的 URL 路由映射，即定义当客户端访问时，由哪个模块进行响应。</li>
</ul>
<p><code>wsgi.py</code></p>
<ul>
<li>全称为 <code>Python Web Server Gateway Interface</code>，即 Python 服务器网管接口，时 Python 应用与 Web 服务器之间的接口，用于 Django 项目在服务器上的部署和上线，一般不需要修改。</li>
</ul>
<p><code>asgi.py</code></p>
<ul>
<li>定义 ASGI 的接口信息，和 WSGI 类似，在 3.0 以后新增，相比 ASGI 实现了异步处理，用于启动异步通信服务，如：实现在先聊天等异步通讯功能。（类似 Tornado 异步框架）</li>
</ul>
<h2 id="6-测试服务器的启动"><a href="#6-测试服务器的启动" class="headerlink" title="6.测试服务器的启动"></a>6. 测试服务器的启动</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认端口（8000）启动</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口启动</span></span><br><span class="line">python manage.py runserver 8080</span><br><span class="line">python manage.py runserver 0.0.0.0:8001 # 允许局域网其他 ip 访问</span><br><span class="line">python manage.py runserver 127.0.0.1:8002</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 settings.py 中，将ALLOWED_HOSTS=[<span class="string">'*'</span>]中加个*号</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-数据迁移"><a href="#7-数据迁移" class="headerlink" title="7.数据迁移"></a>7. 数据迁移</h2><p>迁移的概念：就是将模型映射到数据库的过程</p>
<p>生成迁移文件：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></tbody></table></figure>

<p>执行迁移：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 首次执行时，会有框架默认的东西如auth_group/auth_user自带后台管理相关</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></tbody></table></figure>

<p>与 flsk 不同，不需要初始化迁移文件夹，每个应用默认有迁移文件夹 migrate</p>
<h2 id="8-创建应用"><a href="#8-创建应用" class="headerlink" title="8.创建应用"></a>8. 创建应用</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建名称为 AppName 的应用</span></span><br><span class="line">python manage.py startapp AppName</span><br></pre></td></tr></tbody></table></figure>

<p>使用命令创建应用后，需要在 <code>settings.py</code> 中注册</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="comment"># 自动生成</span></span><br><span class="line">    <span class="string">'user.apps.UserConfig'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过命令创建的项目需要在这里注册</span></span><br><span class="line">    <span class="string">'AppName'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></tbody></table></figure>

<p>应用目录介绍：</p>
<p><code>__init__.py</code></p>
<ul>
<li>告诉 python 该目录是一个 python 包，暂无内容，后期一些工具的初始化可能会用到。</li>
</ul>
<p><code>admin.py</code></p>
<ul>
<li>管理站点模型的声明文件，默认为空。（后台管理系统）</li>
</ul>
<p><code>apps.py</code></p>
<ul>
<li>应用信息定义文件，在其中生成了 <code>AppConfig</code>，该类用于定义应用名等数据</li>
</ul>
<p><code>models.py</code></p>
<ul>
<li>添加模型层数据类文件</li>
</ul>
<p><code>views.py</code></p>
<ul>
<li>定义 URL 相应函数，视图函数</li>
</ul>
<p><code>migrations</code> 包：</p>
<ul>
<li>自动生成，生成迁移文件的</li>
</ul>
<p><code>tests.py</code></p>
<ul>
<li>测试代码文件，写单元测试用</li>
</ul>
<h2 id="9-基本视图"><a href="#9-基本视图" class="headerlink" title="9.基本视图"></a>9. 基本视图</h2><h3 id="1️⃣在views-py中创建一个路由响应函数"><a href="#1️⃣在views-py中创建一个路由响应函数" class="headerlink" title="1️⃣在views.py中创建一个路由响应函数"></a>1️⃣在 <code>views.py</code> 中创建一个路由响应函数</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment"># 视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse("Hello, Django!.")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 渲染render，渲染 html</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'我是index2'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2️⃣在根路由urls-py中进行注册"><a href="#2️⃣在根路由urls-py中进行注册" class="headerlink" title="2️⃣在根路由urls.py中进行注册"></a>2️⃣在根路由 <code>urls.py</code> 中进行注册</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">URL configuration for DjangoPro2 project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class="line"><span class="string">    https://docs.djangoproject.com/en/5.1/topics/http/urls/</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">Function views</span></span><br><span class="line"><span class="string">    1. Add an import:  from my_app import views</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('', views.home, name='home')</span></span><br><span class="line"><span class="string">Class-based views</span></span><br><span class="line"><span class="string">    1. Add an import:  from other_app.views import Home</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')</span></span><br><span class="line"><span class="string">Including another URLconf</span></span><br><span class="line"><span class="string">    1. Import the include() function: from django.urls import include, path</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> user.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 直接访问视图函数</span></span><br><span class="line">    <span class="comment"># path('index/', index),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># path('index2', index2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 包含user的url，子路由写法</span></span><br><span class="line">    path(<span class="string">'user/'</span>, include(<span class="string">'user.urls'</span>))</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3️⃣子路由urls-py中注册"><a href="#3️⃣子路由urls-py中注册" class="headerlink" title="3️⃣子路由urls.py中注册"></a>3️⃣子路由 <code>urls.py</code> 中注册</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'index/'</span>, index, name=<span class="string">'index'</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'index2/'</span>, index2, name=<span class="string">'index2'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4️⃣通过子路由访问（2层）"><a href="#4️⃣通过子路由访问（2层）" class="headerlink" title="4️⃣通过子路由访问（2层）"></a>4️⃣通过子路由访问（2 层）</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/user/index2/</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8000/user/index/</span><br></pre></td></tr></tbody></table></figure>

<h2 id="10-基本模板"><a href="#10-基本模板" class="headerlink" title="10.基本模板"></a>10. 基本模板</h2><p>模板实际上就是我们用 HTML 写好的页面<br>创建模板文件夹 templates，在模板文件夹中创建模板文件<br>在 <code>views.py</code> 中渲染模板，使用 render 函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染render，渲染 html</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="11-定义模型"><a href="#11-定义模型" class="headerlink" title="11.定义模型"></a>11. 定义模型</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># 类变量对应数据库中的字段</span></span><br><span class="line"><span class="comment"># 所有的类都需要继承 models.Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">18</span>)</span><br><span class="line">    sex = models.IntegerField(default=<span class="number">1</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="12-Admin后台管理"><a href="#12-Admin后台管理" class="headerlink" title="12.Admin后台管理"></a>12.Admin 后台管理</h2><p>1️⃣在 admin.py 中 model 加入后台管理：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> User</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="comment"># 在这里注册</span></span><br><span class="line">admin.site.register(User)</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣创建超级用户：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></tbody></table></figure>

<p>3️⃣访问 admin 后台：</p>
<p><a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a></p>
<h2 id="13-相关参考"><a href="#13-相关参考" class="headerlink" title="13.相关参考"></a>13. 相关参考</h2><p><a href="https://www.bilibili.com/video/BV1W34y1c7Rn?spm_id_from=333.788.player.switch&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d&amp;p=15">https://www.bilibili.com/video/BV1W34y1c7Rn?spm_id_from=333.788.player.switch&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d&amp;p=15</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium2 总结（四）appium-pytest-aullure-PO 模型自动化框架</title>
    <url>/2024/08/10/Appium2%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89appium-pytest-aullure-PO%E6%A8%A1%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="0-先展示成果"><a href="#0-先展示成果" class="headerlink" title="0.先展示成果"></a>0. 先展示成果</h2><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/pico_pico.gif"></p>
<h2 id="1-什么是自动化测试PO模型"><a href="#1-什么是自动化测试PO模型" class="headerlink" title="1.什么是自动化测试PO模型"></a>1. 什么是自动化测试 PO 模型</h2><p>自动化测试 PO 模型，即页面对象 (Page Object) 模型，是一种在自动化测试中常用的设计模式。它主要用于提高测试代码的可维护性、可读性和复用性。PO 模型的核心思想是将页面元素的定位器和操作封装到一个类中，这个类代表了页面的界面。</p>
<span id="more"></span>

<h2 id="2-PO模型的主要特点："><a href="#2-PO模型的主要特点：" class="headerlink" title="2.PO模型的主要特点："></a>2.PO 模型的主要特点：</h2><p>（1）<strong>封装性</strong>：页面元素的定位器（如 ID、类名、XPath 等）和与元素相关的操作都被封装在页面对象类中。</p>
<p>（2）<strong>可复用性</strong>：页面对象类可以在多个测试场景中复用，减少了代码的重复。</p>
<p>（3）<strong>低耦合</strong>：测试脚本与页面元素的定位器解耦，当页面元素发生变化时，只需修改页面对象类，而不需要修改测试脚本。</p>
<p>（4）<strong>易于维护</strong>：当页面元素更新或移动时，只需在页面对象类中更新定位器，测试脚本不需要修改。</p>
<h2 id="3-PO模型的实现步骤："><a href="#3-PO模型的实现步骤：" class="headerlink" title="3.PO模型的实现步骤："></a>3.PO 模型的实现步骤：</h2><p>（1）<strong>创建页面类</strong>：为每个页面创建一个页面类，类名通常与页面功能相关。</p>
<p>（2）<strong>定义元素定位器</strong>：在页面类中定义所有需要操作的元素的定位器。</p>
<p>（3）<strong>实现元素操作</strong>：为页面类提供方法来实现对页面元素的操作，如点击、输入文本等。</p>
<p>（4）<strong>使用页面对象</strong>：在测试脚本中，通过页面对象来访问和操作页面元素。</p>
<h2 id="4-🌰"><a href="#4-🌰" class="headerlink" title="4.🌰"></a>4.🌰</h2><h3 id="（1）目录结构如下图："><a href="#（1）目录结构如下图：" class="headerlink" title="（1）目录结构如下图："></a>（1）目录结构如下图：</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240810023833669.png" alt="image-20240810023833669"></p>
<h3 id="（2）代码"><a href="#（2）代码" class="headerlink" title="（2）代码"></a>（2）代码</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># base/base_page.py</span></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.common.appiumby <span class="keyword">import</span> AppiumBy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> conftest <span class="keyword">import</span> android_driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, driver: webdriver = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.driver = driver</span><br><span class="line"></span><br><span class="line">    <span class="comment"># id 定位</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">by_id</span>(<span class="params">self, id_value: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.driver.find_element(AppiumBy.ID, id_value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># xpath 定位</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">by_xpath</span>(<span class="params">self, xpath_value: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.driver.find_element(AppiumBy.XPATH, xpath_value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># accessibility_id定位</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">by_accessibility_id</span>(<span class="params">self, accessibility_id_value: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.driver.find_element(AppiumBy.ACCESSIBILITY_ID, accessibility_id_value)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># common/get_log.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetLog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, level=logging.DEBUG</span>):</span><br><span class="line">        <span class="comment"># 创建一个 log 对象</span></span><br><span class="line">        <span class="comment"># 其中的__name__代表当前 py 文件的名称，也可以不写</span></span><br><span class="line">        <span class="variable language_">self</span>.logger = logging.getLogger(name)</span><br><span class="line">        <span class="variable language_">self</span>.logger.handlers.clear()  <span class="comment"># 防止重复输出日志，因为添加一个 handler就会输出一次</span></span><br><span class="line">        <span class="comment"># 设置 log 对象的等级</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">        log_path = os.path.join(os.path.dirname(__file__), name + <span class="string">'.log'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个 handler，将写入文件</span></span><br><span class="line">        fh = logging.FileHandler(log_path, mode=<span class="string">'a'</span>)</span><br><span class="line">        <span class="comment"># 设置log 等级与前面保持一致</span></span><br><span class="line">        fh.setLevel(level)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个 handler, 将 log 输出到控制台</span></span><br><span class="line">        ch = logging.StreamHandler()</span><br><span class="line">        <span class="comment"># 设置 log 等级与 log 对象保持一致</span></span><br><span class="line">        ch.setLevel(level)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置输出格式</span></span><br><span class="line">        log_formatter = <span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s : %(message)s'</span></span><br><span class="line">        formatter = logging.Formatter(log_formatter)</span><br><span class="line">        ch.setFormatter(formatter)</span><br><span class="line">        fh.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把handler添加到 logger 里</span></span><br><span class="line">        <span class="comment"># print(logger.handlers) # 没添加时，logger.handlers == []</span></span><br><span class="line">        <span class="comment"># 如果 logger.handlers 为空，则添加 ch / fh ，防止重复输出日志，因为添加一个 handler就会输出一次</span></span><br><span class="line">        <span class="comment"># if logger.handlers.__len__() == 0:</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.addHandler(ch)</span><br><span class="line">        <span class="variable language_">self</span>.logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(logger.handlers)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        记录debug级别的日志</span></span><br><span class="line"><span class="string">        :param msg: 日志消息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        记录info级别的日志</span></span><br><span class="line"><span class="string">        :param msg: 日志消息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warning</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        记录warning级别的日志</span></span><br><span class="line"><span class="string">        :param msg: 日志消息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        记录error级别的日志</span></span><br><span class="line"><span class="string">        :param msg: 日志消息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">critical</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        记录critical级别的日志</span></span><br><span class="line"><span class="string">        :param msg: 日志消息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="variable language_">self</span>.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用示例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    log = GetLog(__name__)</span><br><span class="line">    log.debug(<span class="string">'This is a debug message'</span>)</span><br><span class="line">    log.info(<span class="string">'This is an info message'</span>)</span><br><span class="line">    log.warning(<span class="string">'This is a warning message'</span>)</span><br><span class="line">    log.error(<span class="string">'This is an error message'</span>)</span><br><span class="line">    log.critical(<span class="string">'This is a critical message'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># page/login_page.py</span></span><br><span class="line"><span class="keyword">from</span> base.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginPage</span>(<span class="title class_ inherited__">BasePage</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 勾选协议</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">agree_protocol</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/agree_protocol_checkbox'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击本机号码登录按钮</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">local_phone_btn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/local_phone_one_click_login_btn'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择其他手机号码登录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">other_phone_login_btn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/other_phone_login_btn'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入电话号码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_phone_number</span>(<span class="params">self, phone_number</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/input_phone_number_editText'</span>).send_keys(phone_number)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击获取验证码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_phone_verification</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/get_phone_verification_code_btn'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填写验证码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_phone_verification</span>(<span class="params">self, verification_code</span>):</span><br><span class="line">        <span class="variable language_">self</span>.by_id(<span class="string">'input_phone_verification_code_editText'</span>).send_keys(verification_code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取 toast 中“验证码错误，请重试”的文本</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_verification_code_error_toast</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.by_xpath(<span class="string">'//android.widget.Toast[@text="验证码错误，请重试"]'</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示元素“请先阅读并同意协议”</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_read_and_agreed_btn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.by_id(<span class="string">'com.xintiaotime.yoy:id/not_agreed_protocol_hint'</span>).is_displayed()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># testcases/test_login_page.py</span></span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> page.login_page <span class="keyword">import</span> LoginPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.epic(<span class="params"><span class="string">'测试登录'</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">'测试直接点击其他手机号码登录'</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_01</span>(<span class="params">self, android_driver</span>):</span><br><span class="line">        login_page = LoginPage(android_driver)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击其他手机号码登录按钮'</span>):</span><br><span class="line">            login_page.local_phone_btn()</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'显示元素“请先阅读并同意协议”'</span>):</span><br><span class="line">            <span class="keyword">assert</span> login_page.show_read_and_agreed_btn() <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">'点击同意协议复选框2次'</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_02</span>(<span class="params">self, android_driver</span>):</span><br><span class="line">        login_page = LoginPage(android_driver)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击同意协议复选框2次，让“请先阅读并同意协议”消失'</span>):</span><br><span class="line">            login_page.local_phone_btn()</span><br><span class="line">            login_page.local_phone_btn()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">'测试直接点击其他手机号码登录'</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_03</span>(<span class="params">self, android_driver</span>):</span><br><span class="line">        login_page = LoginPage(android_driver)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击其他手机号码登录按钮'</span>):</span><br><span class="line">            login_page.other_phone_login_btn()</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'显示元素“请先阅读并同意协议”'</span>):</span><br><span class="line">            <span class="keyword">assert</span> login_page.show_read_and_agreed_btn() <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">'测试其他电话登录'</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_04</span>(<span class="params">self, android_driver</span>):</span><br><span class="line">        login_page = LoginPage(android_driver)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击同意协议复选框'</span>):</span><br><span class="line">            login_page.agree_protocol()</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击其他手机号码登录按钮'</span>):</span><br><span class="line">            login_page.other_phone_login_btn()</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'输入电话号码'</span>):</span><br><span class="line">            login_page.input_phone_number(<span class="string">'17312341234'</span>)</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'点击获取短信验证码'</span>):</span><br><span class="line">            login_page.get_phone_verification()</span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">'输入验证码'</span>):</span><br><span class="line">            login_page.input_phone_verification(<span class="string">'1234'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> login_page.get_verification_code_error_toast() == <span class="string">'验证码错误，请重试'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> appium.options.android <span class="keyword">import</span> UiAutomator2Options</span><br><span class="line"><span class="keyword">from</span> appium.options.ios <span class="keyword">import</span> XCUITestOptions</span><br><span class="line"><span class="keyword">from</span> appium.webdriver.appium_service <span class="keyword">import</span> AppiumService</span><br><span class="line"></span><br><span class="line">APPIUM_PORT = <span class="number">4723</span></span><br><span class="line">APPIUM_HOST = <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 华为真机配置</span></span><br><span class="line">capabilities = <span class="built_in">dict</span>(</span><br><span class="line">    platformName=<span class="string">'Android'</span>,</span><br><span class="line">    platformVersion=<span class="string">'12'</span>,</span><br><span class="line">    deviceName=<span class="string">'TAS-AN00'</span>,</span><br><span class="line">    automationName=<span class="string">'uiautomator2'</span>,</span><br><span class="line">    skipServerInstallation=<span class="literal">False</span>,</span><br><span class="line">    appPackage=<span class="string">'com.xintiaotime.yoy'</span>,  <span class="comment"># 包名</span></span><br><span class="line">    appActivity=<span class="string">'.ui.guide.SplashActivity'</span>,  <span class="comment"># 界面名，这个界面名字一定要用 monkey 找，要补就要报错。。。</span></span><br><span class="line">    <span class="comment"># 不清空缓存信息，保存登录信息</span></span><br><span class="line">    noReset=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">"session"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">appium_service</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_ios_driver</span>(<span class="params">custom_opts=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_android_driver</span>(<span class="params">custom_opts=capabilities</span>):</span><br><span class="line">    <span class="string">"""Create Android driver."""</span></span><br><span class="line">    options = UiAutomator2Options()</span><br><span class="line">    <span class="keyword">if</span> custom_opts <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        options.load_capabilities(custom_opts)</span><br><span class="line">    <span class="comment"># Appium1 points to http://127.0.0.1:4723/wd/hub by default</span></span><br><span class="line">    driver = webdriver.Remote(<span class="string">f"http://<span class="subst">{APPIUM_HOST}</span>:<span class="subst">{APPIUM_PORT}</span>"</span>, options=options)</span><br><span class="line">    driver.implicitly_wait(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ios_driver_factory</span>():</span><br><span class="line">    <span class="string">"""ios_driver_factory"""</span></span><br><span class="line">    <span class="keyword">return</span> create_ios_driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ios_driver</span>():</span><br><span class="line">    <span class="string">"""return ios_driver to the function using it, quit driver afterwards."""</span></span><br><span class="line">    <span class="comment"># prefer this fixture if there is no need to customize driver options in tests</span></span><br><span class="line">    driver = create_ios_driver()</span><br><span class="line">    <span class="keyword">yield</span> driver</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">android_driver_factory</span>():</span><br><span class="line">    <span class="string">"""android_driver_factory"""</span></span><br><span class="line">    <span class="keyword">return</span> create_android_driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">android_driver</span>():</span><br><span class="line">    <span class="string">"""return android_driver to the function using it, quit driver afterwards."""</span></span><br><span class="line">    <span class="comment"># prefer this fixture if there is no need to customize driver options in tests</span></span><br><span class="line">    driver = create_android_driver()</span><br><span class="line">    <span class="keyword">yield</span> driver</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># run_test.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># pytest.main([])</span></span><br><span class="line">    <span class="comment"># 带参数执行</span></span><br><span class="line">    <span class="comment"># --clean-alluredir每次情况生成的json文件地址</span></span><br><span class="line">    pytest.main([<span class="string">'-v'</span>, <span class="string">'-s'</span>, <span class="string">'--clean-alluredir'</span>, <span class="string">'--alluredir'</span>, <span class="string">'./allure-results'</span>])</span><br><span class="line">    <span class="comment"># allure generat + 数据源文件目录 -o + 报告的目录</span></span><br><span class="line">    os.system(<span class="string">'allure generate ./allure-results -o ./report --clean'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）allure生成报告截图"><a href="#（3）allure生成报告截图" class="headerlink" title="（3）allure生成报告截图"></a>（3）allure 生成报告截图</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240810024915399.png" alt="image-20240810024915399"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240810024957661.png" alt="image-20240810024957661"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 中的 DATE_ADD 函数基本使用</title>
    <url>/2024/06/13/MySQL%E4%B8%AD%E7%9A%84DATE-ADD%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>每次用到 MySQL 关于时间的计算，都跑不了 <code>DATE_ADD</code> 函数，每次都得查，特此记录下，下次用时直接看。</p>
<span id="more"></span>

<p>MySQL 中的 <code>DATE_ADD()</code> 函数用于将一个时间间隔加到一个日期或时间值上。这个函数非常有用，特别是当你需要计算未来的日期或时间点时。</p>
<h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2. 基本语法</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">DATE_ADD(<span class="type">date</span>, <span class="type">INTERVAL</span> <span class="keyword">value</span> unit)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>date</code> 是你想要添加时间间隔的原始日期或时间值。</li>
<li><code>INTERVAL</code> 关键字指定了要添加的时间间隔。</li>
<li><code>value</code> 是时间间隔的数量。</li>
<li><code>unit</code> 是时间间隔的单位，可以是以下几种之一：<ul>
<li><code>MICROSECOND</code>（微秒）</li>
<li><code>SECOND</code>（秒）</li>
<li><code>MINUTE</code>（分钟）</li>
<li><code>HOUR</code>（小时）</li>
<li><code>DAY</code>（天）</li>
<li><code>WEEK</code>（周）</li>
<li><code>MONTH</code>（月）</li>
<li><code>QUARTER</code>（季度）</li>
<li><code>YEAR</code>（年）</li>
<li><code>SECOND_MICROSECOND</code>（秒和微秒）</li>
<li><code>MINUTE_MICROSECOND</code>（分钟和微秒）</li>
<li><code>MINUTE_SECOND</code>（分钟和秒）</li>
<li><code>HOUR_MICROSECOND</code>（小时和微秒）</li>
<li><code>HOUR_SECOND</code>（小时和秒）</li>
<li><code>DAY_MICROSECOND</code>（天和微秒）</li>
<li><code>DAY_SECOND</code>（天和秒）</li>
<li><code>YEAR_MONTH</code>（年和月）</li>
</ul>
</li>
</ul>
<h2 id="3-常用例子"><a href="#3-常用例子" class="headerlink" title="3.常用例子"></a>3. 常用例子</h2><p>（1）<strong>添加天数</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12'</span>, <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（2）<strong>添加小时</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12 14:30:00'</span>, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">HOUR</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（3）<strong>添加分钟和秒</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12 14:30:00'</span>, <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">MINUTE</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12 14:30:00'</span>, <span class="type">INTERVAL</span> <span class="number">5</span> <span class="keyword">SECOND</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（4）<strong>添加年和月</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12'</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12'</span>, <span class="type">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（5）<strong>添加复杂时间间隔</strong>（例如，1 天 3 小时 30 分钟）：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="string">'2024-06-12'</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span> <span class="number">3</span> <span class="keyword">HOUR</span> <span class="number">30</span> <span class="keyword">MINUTE</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>请注意，当使用 <code>DATE_ADD()</code> 函数时，结果的日期和时间格式将取决于你的 MySQL 服务器的设置，包括时区和日期时间格式。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 中的 DATE_FORMAT 函数基本使用</title>
    <url>/2024/06/13/MySQL%E4%B8%AD%E7%9A%84DATE-FORMAT%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>MySQL 中的 <code>DATE_FORMAT()</code> 函数用于将日期或时间戳格式化为字符串。这个函数允许你自定义日期和时间的显示格式，使其更易于阅读或符合特定的格式要求。</p>
<span id="more"></span>

<h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2. 基本语法</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">DATE_FORMAT(<span class="type">date</span>, format)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>date</code> 是你想要格式化的日期或时间值。</li>
<li><code>format</code> 是一个字符串，指定了日期和时间的格式。在这个字符串中，你可以使用特定的格式说明符来表示不同的日期和时间部分。</li>
</ul>
<p>以下是一些常用的格式说明符：</p>
<ul>
<li><code>%Y</code> - 四位数的年份（例如：2024）</li>
<li><code>%y</code> - 两位数的年份（00-99）</li>
<li><code>%M</code> - 完整的月份名称（January, February, …）</li>
<li><code>%m</code> - 月份的数字（00-12）</li>
<li><code>%D</code> - 带有英文前缀的月份中的天数（1st, 2nd, 3rd, …）</li>
<li><code>%d</code> - 月份中的天数（00-31）</li>
<li><code>%H</code> - 小时（00-23）</li>
<li><code>%h</code> - 小时（01-12）</li>
<li><code>%i</code> - 分钟（00-59）</li>
<li><code>%s</code> - 秒（00-59）</li>
<li><code>%p</code> - AM 或 PM</li>
<li><code>%W</code> - 星期几的名称（Sunday, Monday, …）</li>
<li><code>%w</code> - 星期几的数字（0 = Sunday, 1 = Monday, …）</li>
</ul>
<h2 id="3-常用例子"><a href="#3-常用例子" class="headerlink" title="3.常用例子"></a>3. 常用例子</h2><p>（1）<strong>格式化为年 - 月 - 日</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">'2024-06-12 14:30:00'</span>, <span class="string">'%Y-%m-%d'</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（2）<strong>格式化为月 - 日 - 年，小时：分钟</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">'2024-06-12 14:30:00'</span>, <span class="string">'%M %d, %Y, %h:%i %p'</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（3）<strong>格式化为星期几</strong>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">'2024-06-12'</span>, <span class="string">'%W'</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>（3）<strong>格式化为自定义格式</strong>（例如：今天是 2024 年的第几天）：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="string">'2024-06-12'</span>, <span class="string">'今天是%Y年的第%j天'</span>);</span><br></pre></td></tr></tbody></table></figure>

<p><code>DATE_FORMAT()</code> 函数非常灵活，可以根据需要调整日期和时间的显示方式。记得在实际使用中，根据你的具体需求选择合适的格式说明符。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 服务器 SSL 证书安装部署（Linux）</title>
    <url>/2024/06/05/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%EF%BC%88Linux%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>如何将 SSL 证书上传到 centos 服务器，并使用 nginx 配置后，使其生效？</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><p>（1）下载已申请好的<a href="https://cloud.tencent.com/document/product/400/6814">腾讯云免费 SSL 证书</a>，解压。</p>
<p>（2）上传证书文件到 Linux 云服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scp /Users/user1/Downloads/tangxdou.com_nginx/tangxdou.com.key root@123.207.205.145:/etc/nginx/ssl</span><br><span class="line"></span><br><span class="line">scp /Users/user1/Downloads/tangxdou.com_nginx/tangxdou.com_bundle.crt root@123.207.205.145:/etc/nginx/ssl</span><br></pre></td></tr></tbody></table></figure>

<p>（3）修改配置文件。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name tangxdou.com www.tangxdou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向到HTTPS</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name tangxdou.com www.tangxdou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL证书配置</span></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/tangxdou.com_bundle.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/tangxdou.com.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他SSL设置</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers <span class="string">'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'</span>;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置日志文件</span></span><br><span class="line">    access_log /var/log/nginx/example.access.log;</span><br><span class="line">    error_log /var/log/nginx/example.error.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网站根目录</span></span><br><span class="line">    root /home/git/project/hexo-blog;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>（4）重载 Nginx 配置。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></tbody></table></figure>

<p>（5）若证书到期，重复执行（2）（4）即可。</p>
<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://cloud.tencent.com/document/product/400/35244">https://cloud.tencent.com/document/product/400/35244</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Django4.2 学习 - 路由 Router（二）</title>
    <url>/2025/01/09/Django4.2%E5%AD%A6%E4%B9%A0-%E8%B7%AF%E7%94%B1Router%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-路由-router"><a href="#1-路由-router" class="headerlink" title="1.路由 router"></a>1. 路由 router</h2><p>在实际开发过程中，一个 Django 项目会包含很多的 app，这时如果我们只在主路由里进行配置就会显的杂乱无章，所以通常会在每个 app 里，创建各自的 <code>urls.py</code> 路由模块，然后从根路由出发，奖 app 所属的 url 请求，全部转发到相应的 <code>urls.py</code> 模块中，而这个从主路由转发到各个应用路由的过程叫做路由分发。</p>
<span id="more"></span>

<h3 id="（1）路由匹配"><a href="#（1）路由匹配" class="headerlink" title="（1）路由匹配"></a>（1）路由匹配</h3><p>1️⃣主路由直接匹配</p>
<p>在主 <code>urls.py</code> 中，直接写</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用主路由</span></span><br><span class="line">    path(<span class="string">'index/'</span>, index),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣子路由匹配</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由</span></span><br><span class="line">  	path(<span class="string">'app/'</span>, include(<span class="string">'App.urls'</span>)),</span><br><span class="line">  	</span><br><span class="line"> 		path(<span class="string">'app2/'</span>, include(<span class="string">'App2.urls'</span>)),</span><br><span class="line">  </span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/userlist/"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h3 id="（2）使用子路由-命名空间"><a href="#（2）使用子路由-命名空间" class="headerlink" title="（2）使用子路由+命名空间"></a>（2）使用子路由 + 命名空间</h3><p>在实际应用中，Django 中可能存在多个应用程序，每个应用程序都有可能有自己的路由模块。为了防止路由冲突，Django 提供了命名空间（namespace）的概念。命名空间是一种奖路由命名为层次结构的方式，使得在查询路由时可以限定在命名空间内。（如果使用了命名空间的这种写法，则在之后的视图函数 / 模板中都要使用命名空间的写法，否则会报错）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间,include('子路由', 'appname'),namespace 一般和 appname 相同</span></span><br><span class="line">    path(<span class="string">'user/'</span>, include((<span class="string">'App2.urls'</span>, <span class="string">'App2'</span>), namespace=<span class="string">'App2'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间,</span></span><br><span class="line">    path(<span class="string">'user/'</span>, include((<span class="string">'App.urls'</span>, <span class="string">'App'</span>), namespace=<span class="string">'App'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）反向解析"><a href="#（3）反向解析" class="headerlink" title="（3）反向解析"></a>（3）反向解析</h3><p>在 Django 框架中，正向解析是指根据 URL 配置文件中的 URL 模式来匹配用户请求的 URL，并调用相应的视图函数。这是 Django 处理 HTTP 请求的标准流程。<br>当用户在浏览器中输入一个 URL 并发送请求时，Django 会按照以下步骤进行正向解析：<br>1️⃣Django 接收到请求，并从请求中提取出 URL 路径。<br>2️⃣Django 遍历 URL 配置文件中的 URL 模式列表，尝试找到与请求 URL 匹配的模式。<br>3️⃣如果找到匹配的模式，Django 会调用与该模式关联的视图函数，并将请求传递给该视图函数进行处理。<br>4️⃣视图函数处理请求，并返回一个 HTTP 响应给用户。</p>
<p>反向解析是 Django 框架中的一个特性，它允许你在代码中使用视图函数或 URL 模式的名称来动态生成 URL，而不是直接硬编码 URL 字符串。这样做的好处是，当你需要修改 URL 模式时，只需要在 URL 配置文件中进行修改，而不需要在整个项目中查找和替换所有硬编码的 URL 字符串。<br>反向解析的流程如下：</p>
<p>1️⃣定义 URL 模式</p>
<p>在 Django 的 URL 配置文件中，你需要为每个视图函数或 URL 模式定义一个名称。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'userlist/'</span>, views.userlist, name=<span class="string">'userlist'</span>),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>2️⃣在模板中使用反向解析</p>
<ul>
<li>在模板中，你可以使用 <code>{% url %} </code>模板标签来生成 URL。例如：</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'userlist' %}"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>这里的 <code>userlist</code> 就是之前定义的 URL 名称。</p>
<ul>
<li>带命名空间的反向解析</li>
</ul>
<p>主路由 <code>urls.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用主路由</span></span><br><span class="line">    path(<span class="string">'index/'</span>, index),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间</span></span><br><span class="line">    path(<span class="string">'app2/'</span>, include((<span class="string">'App2.urls'</span>, <span class="string">'App2'</span>), namespace=<span class="string">'App2'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间</span></span><br><span class="line">    path(<span class="string">'app/'</span>, include((<span class="string">'App.urls'</span>, <span class="string">'App'</span>), namespace=<span class="string">'App'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><code>templates/index.html</code></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>带命名空间的反向解析<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">{# App:userlist 为 namespace : name 的值，也就是 命名空间:}</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userlist' %}"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App2:userlist2' %}"</span>&gt;</span>用户列表2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>3️⃣在视图中的反向解析 (带命名空间)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#这里 App 为命名空间，userlist 为 urls.py 中 path 的 name</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userlist'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></tbody></table></figure>

<p>4️⃣在其他地方的反向解析</p>
<p>除了模板和视图，你还可以在其他地方使用反向解析，比如在表单的 action 属性中，或者在 JavaScript 代码中。</p>
<p>后续学习了，在来这里总结。</p>
<p>总结来说，反向解析的流程是：先在 URL 配置文件中为 URL 模式定义名称，然后在模板或视图中使用这些名称来动态生成 URL。这样做可以提高代码的可维护性和灵活性。</p>
<h3 id="（4）路由传参"><a href="#（4）路由传参" class="headerlink" title="（4）路由传参"></a>（4）路由传参</h3><h4 id="1️⃣单一参数："><a href="#1️⃣单一参数：" class="headerlink" title="1️⃣单一参数："></a>1️⃣单一参数：</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 url 给视图函数传参数</span></span><br><span class="line">path(<span class="string">'index/'</span>, index)</span><br><span class="line">path(<span class="string">'detail/&lt;int:id&gt;/'</span>, detail)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 url 取别名，那么在使用此 url 的地方可以使用别名。比如：</span></span><br><span class="line">path(<span class="string">'index/'</span>, index, name=<span class="string">'index'</span>)</span><br><span class="line">path(<span class="string">'detail/&lt;int:id&gt;'</span>, detail, name=<span class="string">'detail'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="built_in">print</span>(pk)</span><br><span class="line">    user = UserModel.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user_detail.html'</span>, {<span class="string">'user'</span>: user})</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2️⃣多参数："><a href="#2️⃣多参数：" class="headerlink" title="2️⃣多参数："></a>2️⃣多参数：</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"> </span><br><span class="line">path(<span class="string">'userab/&lt;int:a&gt;/&lt;int:b&gt;'</span>, user_ab, name=<span class="string">'userab'</span>),</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 正则写法</span></span><br><span class="line"> re_path(<span class="string">r'^userab2/(?P&lt;a&gt;\d+)/(?P&lt;b&gt;\d+)$'</span>, user_ab, name=<span class="string">'userab2'</span>),</span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_ab</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'a={}, b={}'</span>.<span class="built_in">format</span>(a, b))</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（5）重定向"><a href="#（5）重定向" class="headerlink" title="（5）重定向"></a>（5）重定向</h3><p>在 Django 中，重定向是一种常见的操作，通常用于在处理完某个请求后，将用户引导到另一个页面。Django 提供了多种方式来实现重定向，以下是一些常见的方法：</p>
<h4 id="1️⃣使用redirect函数："><a href="#1️⃣使用redirect函数：" class="headerlink" title="1️⃣使用redirect函数："></a>1️⃣使用 <code>redirect</code> 函数：</h4><p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 redirect 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_redirect</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/app/userlist/'</span>)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>redirect 函数接受一个 URL 作为参数，并返回一个 HTTP 重定向响应。</li>
<li>你可以传递一个完整的 URL，或者一个视图函数的名称，Django 会自动解析并生成正确的重定向 URL。</li>
</ul>
<h4 id="2️⃣使用reverse函数生成URL"><a href="#2️⃣使用reverse函数生成URL" class="headerlink" title="2️⃣使用reverse函数生成URL"></a>2️⃣使用 <code>reverse</code> 函数生成 <code>URL</code></h4><p><code>reverse</code> 函数用于根据视图函数的名称生成 <code>URL</code>, 这在你需要动态生成重定向 <code>URL</code> 时非常有用。</p>
<p><code>App/urls.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 重定向使用</span></span><br><span class="line"> </span><br><span class="line">path(<span class="string">'userlist/'</span>, user_list, name=<span class="string">'userlist'</span>),</span><br><span class="line"> </span><br><span class="line">path(<span class="string">'userreverse/'</span>, user_reverse, name=<span class="string">'userreverse'</span>),</span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果之前使用了命名空间的写法，这里的 reverse 也必须用命名空间的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userlist'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3️⃣“位置参数”"><a href="#3️⃣“位置参数”" class="headerlink" title="3️⃣“位置参数”"></a>3️⃣“位置参数”</h4><p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用重定向+位置参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse2</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userdetail'</span>, args=(<span class="number">1</span>,))</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4️⃣“关键字参数”"><a href="#4️⃣“关键字参数”" class="headerlink" title="4️⃣“关键字参数”"></a>4️⃣“关键字参数”</h4><p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用重定向+ 关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse3</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userdetail'</span>, kwargs={<span class="string">'pk'</span>: <span class="number">1</span>})</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-关键代码"><a href="#2-关键代码" class="headerlink" title="2.关键代码"></a>2. 关键代码</h2><h3 id="（1）主路由urls-py"><a href="#（1）主路由urls-py" class="headerlink" title="（1）主路由urls.py"></a>（1）主路由 <code>urls.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用主路由</span></span><br><span class="line">    path(<span class="string">'index/'</span>, index),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由</span></span><br><span class="line">    <span class="comment"># path('app/', include('App.urls')),</span></span><br><span class="line">    <span class="comment"># path('user/', include(('App.urls', 'App'), namespace='App')),</span></span><br><span class="line">    <span class="comment"># 使用子路由</span></span><br><span class="line">    <span class="comment"># path('app2/', include('App2.urls')),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间</span></span><br><span class="line">    path(<span class="string">'app2/'</span>, include((<span class="string">'App2.urls'</span>, <span class="string">'App2'</span>), namespace=<span class="string">'App2'</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用子路由+命名空间</span></span><br><span class="line">    path(<span class="string">'app/'</span>, include((<span class="string">'App.urls'</span>, <span class="string">'App'</span>), namespace=<span class="string">'App'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）子路由1App-urls-py"><a href="#（2）子路由1App-urls-py" class="headerlink" title="（2）子路由1App/urls.py"></a>（2）子路由 1<code>App/urls.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> LoginView</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> App.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'userlist/'</span>, user_list, name=<span class="string">'userlist'</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'userdetail/&lt;int:pk&gt;/'</span>, user_detail, name=<span class="string">'userdetail'</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'userab/&lt;int:a&gt;/&lt;int:b&gt;'</span>, user_ab, name=<span class="string">'userab'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正则写法</span></span><br><span class="line">    re_path(<span class="string">r'^userab2/(?P&lt;a&gt;\d+)/(?P&lt;b&gt;\d+)$'</span>, user_ab, name=<span class="string">'userab2'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向使用</span></span><br><span class="line">    path(<span class="string">'userredirect/'</span>, user_redirect, name=<span class="string">'userredirect'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向使用</span></span><br><span class="line">    path(<span class="string">'userreverse/'</span>, user_reverse, name=<span class="string">'userreverse'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向使用</span></span><br><span class="line">    path(<span class="string">'userreverse2/'</span>, user_reverse2, name=<span class="string">'userreverse2'</span>),</span><br><span class="line">    <span class="comment"># 重定向使用</span></span><br><span class="line">    path(<span class="string">'userreverse3/'</span>, user_reverse3, name=<span class="string">'userreverse3'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）子路由2App2-urls-py"><a href="#（3）子路由2App2-urls-py" class="headerlink" title="（3）子路由2App2/urls.py"></a>（3）子路由 2<code>App2/urls.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> App2.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'userlist/'</span>, user_list, name=<span class="string">'userlist2'</span>),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（4）App-views-py"><a href="#（4）App-views-py" class="headerlink" title="（4）App/views.py"></a>（4）<code>App/views.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect, reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> App.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>(<span class="params">request</span>):</span><br><span class="line">    users = UserModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user_list.html'</span>, {<span class="string">'users'</span>: users})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="built_in">print</span>(pk)</span><br><span class="line">    user = UserModel.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user_detail.html'</span>, {<span class="string">'user'</span>: user})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_ab</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'a={}, b={}'</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 redirect 的重定向</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_redirect</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/app/userlist/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 reverser</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userlist'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用重定向+位置参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse2</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userdetail'</span>, args=(<span class="number">1</span>,))</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用重定向+ 关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_reverse3</span>(<span class="params">request</span>):</span><br><span class="line">    url = reverse(<span class="string">'App:userdetail'</span>, kwargs={<span class="string">'pk'</span>: <span class="number">1</span>})</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（5）App2-views-py"><a href="#（5）App2-views-py" class="headerlink" title="（5）App2/views.py"></a>（5）<code>App2/views.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'user_list2.html'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（6）Templates-index-html"><a href="#（6）Templates-index-html" class="headerlink" title="（6）Templates/index.html"></a>（6）<code>Templates/index.html</code></h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">{#测试注释#}</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.正常的路由跳转<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">{#这里是直接访问了视图函数，通过视图函数做相应的跳转#}</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/app/userlist/"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>反向解析<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">{# userlist 为 path路由的 name 值#}</span><br><span class="line">{#<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'userlist' %}"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span>#}</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>带命名空间的反向解析<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">{# App:userlist 为 namespace:name 值#}</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userlist' %}"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App2:userlist2' %}"</span>&gt;</span>用户列表2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>重定向redirect<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">{# 重定向到用户列表页面#}</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userredirect' %}"</span>&gt;</span>重定向<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>重定向reverse+redirect<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userreverse' %}"</span>&gt;</span>重定向2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>重定向带+“位置参数”<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userreverse2' %}"</span>&gt;</span>重定向带位置参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>重定向带+“关键字参数”<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{% url 'App:userreverse3' %}"</span>&gt;</span>重定向带关键字参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（7）Templates-user-list-html"><a href="#（7）Templates-user-list-html" class="headerlink" title="（7）Templates/user_list.html"></a>（7）<code>Templates/user_list.html</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;用户列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;用户列表&lt;/h2&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    {% <span class="keyword">for</span> user <span class="keyword">in</span> users %}</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">"{% url 'App:userdetail' user.id %}"</span>&gt;{{ user.username }}&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    {% endfor %}</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（8）Templates-user-list2"><a href="#（8）Templates-user-list2" class="headerlink" title="（8）Templates/user_list2"></a>（8）<code>Templates/user_list2</code></h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表 2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户列表 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（9）Templates-user-detail-html"><a href="#（9）Templates-user-detail-html" class="headerlink" title="（9）Templates/user_detail.html"></a>（9）<code>Templates/user_detail.html</code></h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            {{ user.username }} -- {{ user.age }}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（10）App-models-py"><a href="#（10）App-models-py" class="headerlink" title="（10）App/models.py"></a>（10）<code>App/models.py</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField(default=<span class="number">18</span>) <span class="comment"># 非负数</span></span><br><span class="line">    <span class="comment"># 0: normal user, 1: admin</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://www.bilibili.com/video/BV1W34y1c7Rn?spm_id_from=333.788.videopod.episodes&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d&amp;p=21">https://www.bilibili.com/video/BV1W34y1c7Rn?spm_id_from=333.788.videopod.episodes&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d&amp;p=21</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 中 chromdriver 和 geckodriver 的下载和配置</title>
    <url>/2021/05/25/Ubuntu%E4%B8%ADchromdriver%E5%92%8Cgeckodriver%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-下载地址为："><a href="#1-下载地址为：" class="headerlink" title="1.下载地址为："></a>1. 下载地址为：</h2><h3 id="（1）Chromedriver"><a href="#（1）Chromedriver" class="headerlink" title="（1）Chromedriver:"></a>（1）Chromedriver:</h3><h3 id="http-chromedriver-storage-googleapis-com-index-html"><a href="#http-chromedriver-storage-googleapis-com-index-html" class="headerlink" title="http://chromedriver.storage.googleapis.com/index.html"></a><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></h3><h3 id="（2）Geckodriver"><a href="#（2）Geckodriver" class="headerlink" title="（2）Geckodriver:"></a>（2）Geckodriver:</h3><h3 id="https-github-com-mozilla-geckodriver-releases"><a href="#https-github-com-mozilla-geckodriver-releases" class="headerlink" title="https://github.com/mozilla/geckodriver/releases/"></a><a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></h3><span id="more"></span>

<h2 id="2-查找文件地址后，下载文件"><a href="#2-查找文件地址后，下载文件" class="headerlink" title="2.查找文件地址后，下载文件:"></a>2. 查找文件地址后，下载文件:</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -P /home/user/testWget/ http://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-将Chromedriver解压后，放到-usr-bin目录下"><a href="#3-将Chromedriver解压后，放到-usr-bin目录下" class="headerlink" title="3.将Chromedriver解压后，放到/usr/bin目录下:"></a>3. 将 Chromedriver 解压后，放到 /usr/bin 目录下:</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">unzip /home/git/testScp/chromedriver_linux64.zip</span><br><span class="line"><span class="built_in">mv</span> chromedriver /usr/bin</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-Geckodriver同以上Chromedriver步骤。"><a href="#4-Geckodriver同以上Chromedriver步骤。" class="headerlink" title="4.Geckodriver同以上Chromedriver步骤。"></a>4.Geckodriver 同以上 Chromedriver 步骤。</h2>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>allure 简单使用</title>
    <url>/2024/08/07/allure%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-allure-安装"><a href="#1-allure-安装" class="headerlink" title="1.allure 安装"></a>1.allure 安装</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install allure</span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="2-allure-pytest-安装"><a href="#2-allure-pytest-安装" class="headerlink" title="2.allure-pytest 安装"></a>2.allure-pytest 安装</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pip install allure-pytest</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-pytest命令带上-allure-的参数"><a href="#3-pytest命令带上-allure-的参数" class="headerlink" title="3.pytest命令带上 allure 的参数"></a>3.pytest 命令带上 allure 的参数</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pytest -vs -k=test_03 --alluredir ./allure-results</span><br></pre></td></tr></tbody></table></figure>

<p>这里将会在项目更目录下生产一个 allure-results 的文件夹用来存储 allure 生成的 json 文件</p>
<h2 id="4-allure-命令将生成的-json-文件转换为测试报告"><a href="#4-allure-命令将生成的-json-文件转换为测试报告" class="headerlink" title="4.allure 命令将生成的 json 文件转换为测试报告"></a>4.allure 命令将生成的 json 文件转换为测试报告</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">allure generate -o report</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-相关代码"><a href="#5-相关代码" class="headerlink" title="5.相关代码"></a>5. 相关代码</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># test_03.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test03</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_01</span>(<span class="params">self, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &gt; <span class="number">2</span>, <span class="string">'为真，通过0301'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_02</span>(<span class="params">self, e_x_class, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &lt; <span class="number">2</span>, <span class="string">'为假，不通过0302'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_03</span>(<span class="params">self, e_x_class, e_x_module, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">True</span>, <span class="string">'为真，通过0303'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_03_04</span>(<span class="params">e_x_module, e_x_function</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span>, <span class="string">'为真，通过 0304'</span></span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="keyword">from</span> _pytest.fixtures <span class="keyword">import</span> fixture</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fixture的作用范围:session &gt; module &gt; class &gt; function, 不写默认为 session</span></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'function'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'function级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'function级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'class'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_class</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'class级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'class级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'module'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'module级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'module级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'session'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_session</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'session级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'session级别结束'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-allure-生成报告截图"><a href="#6-allure-生成报告截图" class="headerlink" title="6.allure 生成报告截图"></a>6.allure 生成报告截图</h2><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240807144530827.png" alt="image-20240807144530827"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240807144643429.png" alt="image-20240807144643429"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>allure</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles 相关总结</title>
    <url>/2024/11/16/charles%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="0-Charles简介"><a href="#0-Charles简介" class="headerlink" title="0.Charles简介"></a>0.Charles 简介</h2><p>Charles 是一款功能强大的 HTTP 代理服务器、HTTP 监视器和反转代理服务器，它可以帮助开发者和测试人员监控和分析 HTTP 和 HTTPS 网络通信。Charles 支持多种操作系统，包括 Windows、MacOS、iOS 和 Android。</p>
<p>主要功能如下：</p>
<ul>
<li><strong>HTTP 和 HTTPS 代理</strong>：Charles 可以捕获和分析 HTTP 和 HTTPS 请求和响应。</li>
<li><strong>流量控制</strong>：可以模拟不同的网络条件，如弱网测试。</li>
<li><strong>接口并发请求</strong>：支持同时处理多个网络请求。</li>
<li><strong>重发网络请求</strong>：方便开发者测试和调试。</li>
<li><strong>断点调试</strong>：结合 Python 的 Flask 等工具进行 Mock Server 开发。</li>
<li><strong>支持反向代理</strong>：可以将请求转发到不同的服务器。</li>
<li><strong>网络限速</strong>：模拟不同网络类型下的应用表现。</li>
<li><strong>解析 AMF 协议</strong>：支持解析高级消息格式协议。</li>
</ul>
<span id="more"></span>

<h2 id="1-Charles的下载安装"><a href="#1-Charles的下载安装" class="headerlink" title="1.Charles的下载安装"></a>1.Charles 的下载安装</h2><p>下载网址 <code>https://www.charlesproxy.com/download/</code></p>
<p>根据自己操作系统，选择相应版本下载后，安装即可。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411162218964.png" alt="image-20241116221830807"></p>
<p>这个是学习使用必备地址：</p>
<p><code>https://www.zzzmode.com/mytools/charles/</code></p>
<h2 id="2-PC-端抓包"><a href="#2-PC-端抓包" class="headerlink" title="2.PC 端抓包"></a>2.PC 端抓包</h2><ul>
<li>Web 抓取 HTTPS 协议</li>
</ul>
<p>1️⃣Charles 不能直接抓取 https 协议的请求，需要安装 SSL 证书：</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170217002.png" alt="image-20241117021724846"></p>
<p>2️⃣输入密码：</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170225102.png" alt="image-20241117022519034" style="zoom:50%;">

<p>3️⃣双击证书，信任证书</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170219914.png" alt="image-20241117021952869"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170221240.png" alt="image-20241117022107192"></p>
<p>4️⃣<code>Proxy</code>➡️<code>SSL Proxying Settings</code> , <code>Add</code> 添加相应端口。（记得勾选 <code>Enable SSL Proxying</code>, 截图中为标出）</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170407173.png" alt="image-20241117040705125"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170401068.png" alt="image-20241117040133009"></p>
<p>5️⃣打开 <code>Charles</code> 代理（<code>Proxy</code>➡️<code>macOS Proxy</code>），测试抓 PC 端包。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170432089.png" alt="image-20241117043238002"></p>
<h2 id="3-移动端抓包"><a href="#3-移动端抓包" class="headerlink" title="3.移动端抓包"></a>3. 移动端抓包</h2><p>总体思路，移动端下载 Charles 证书➡️移动安装 Charles 证书➡️移动端信任 Charles 证书，不同的手机可能位置不同。</p>
<h3 id="（0）在-Charles-中，查看自己IP地址和端口号和下载证书网址"><a href="#（0）在-Charles-中，查看自己IP地址和端口号和下载证书网址" class="headerlink" title="（0）在 Charles 中，查看自己IP地址和端口号和下载证书网址"></a>（0）在 Charles 中，查看自己 IP 地址和端口号和下载证书网址</h3><ul>
<li><code>Help</code> ➡️ <code>SSl Proxying</code> ➡️ <code>Install Charles Root Certificate on a mobile Device or Remote Browser</code></li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170449433.png" alt="image-20241117044931347"></p>
<ul>
<li>ip 地址：端口号为：<code>192.168.XX.XX:8888</code></li>
<li>下载证书网址：<code>chls.pro/ssl</code></li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411170454617.png" alt="image-20241117045408556"></p>
<h3 id="（1）IOS"><a href="#（1）IOS" class="headerlink" title="（1）IOS"></a>（1）IOS</h3><p>1️⃣连接网络（与 Charles 相同网络，并已打开 Charles）</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281518658.png" alt="image-20241128151800592"></p>
<p>2️⃣配置 <code>Charles</code> 代理。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281520196.png" alt="image-20241128152021131"></p>
<p>3️⃣浏览器填写证书下载地址 <code>chls.pro/ssl</code>，</p>
<ul>
<li>点击<code>允许</code></li>
</ul>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281536818.png" alt="image-20241128153654643" style="zoom:50%;">

<ul>
<li>点击<code>安装</code></li>
</ul>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281540485.png" alt="image-20241128154046402" style="zoom:50%;">

<p>4️⃣<code>设置</code>➡️<code>通用</code>➡️<code>关于本机</code>➡️<code>证书信任设置</code>，信任证书。</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281555721.png" alt="image-20241128155539636" style="zoom:50%;">

<p>然后就可以愉快的抓包了。</p>
<h3 id="（2）Android"><a href="#（2）Android" class="headerlink" title="（2）Android"></a>（2）Android</h3><p>原理与 IOS 相同，也是在浏览器上下载证书，然后安装证书，然后信任证书。这里就不截图举例了。</p>
<h2 id="4-其他问题。"><a href="#4-其他问题。" class="headerlink" title="4.其他问题。"></a>4. 其他问题。</h2><p>（1）在手机浏览器上登录 <code>chls.pro.ssl</code>, 无法下载证书。</p>
<p>1️⃣<code>Charles</code> 菜单栏上点击 <code>Help</code>➡️<code>SSLProxying</code>➡️<code>Save Charles Root Certificate..</code></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411281603942.png" alt="image-20241128160332822"></p>
<p>2️⃣下载证书（cer 和 pem 两个格式都下载一下）</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411291047354.png" alt="image-20241129104708216"></p>
<p>3️⃣然后将下载好的证书发送到手机，安装即可。</p>
<ul>
<li>ios 可以试试<code>隔空投送</code></li>
<li>有些版本的 Android 可能装不上<code>.pem</code> 的证书，可以试试<code>.cer</code> 的证书。</li>
</ul>
<h2 id="5-常用功能。"><a href="#5-常用功能。" class="headerlink" title="5.常用功能。"></a>5. 常用功能。</h2><h3 id="（1）过滤"><a href="#（1）过滤" class="headerlink" title="（1）过滤"></a>（1）过滤</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202411291054476.png" alt="image-20241129105429369"></p>
<ul>
<li>其他功能用到了在整理。</li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 实现 excel 中复制某一列，粘贴转置为行功能</title>
    <url>/2021/05/31/group-concat%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>数据处理需要，需要将大批量的列，转置为行。</p>
<p>尝试使用 excel，①选择需要转置的列→②在所需位置，右键→选择性粘贴→转置，发现只转置了一部分数据。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>转置的长度超过了 excel 的最大长度。</p>
<p>最大长度是多少没查到😂。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>百度后，发现可以使用 mysql 中 group_concat 函数。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(id separator ',') FROM `table` // id 为需要转换的列，separator后为以某字符为分割</span><br></pre></td></tr></tbody></table></figure>

<p>发现又只转置了一部分数据。</p>
<p>查资料发现，默认 GROUP_CONCAT 函数返回的结果大小被 MySQL 默认限制为 1024（字节）的长度。</p>
<p>查看方式:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show variables like "group_concat_max_len";</span><br></pre></td></tr></tbody></table></figure>

<p>解决方法有 2 种:</p>
<h3 id="（1）临时解决方案："><a href="#（1）临时解决方案：" class="headerlink" title="（1）临时解决方案："></a>（1）临时解决方案：</h3><p>（该方法缺点是重启服务后设置失效，“group_concat_max_len = -1” 则为最大值，group_concat_max_len 的最大值为 4294967295 (2^32 - 1) 字节，因为处理数据量比较大，直接设置为最大值）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SET GLOBAL group_concat_max_len = -1;</span><br><span class="line"></span><br><span class="line">SET SESSION group_concat_max_len = -1;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）永久解决方案："><a href="#（2）永久解决方案：" class="headerlink" title="（2）永久解决方案："></a>（2）永久解决方案：</h3><p>在 Mysql 配置文件中加入如下配置 (推荐):</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">group_concat_max_len = -1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p>参考于该<a href="https://www.cnblogs.com/zjfblog/p/13658936.html">博客园博客</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 hexo 搭建 GitHub Page 博客后，网页显示 404 的问题解决</title>
    <url>/2019/08/14/hexo%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA404/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>使用 hexo 搭建 GitHub Page 博客后，第一次正常，第二次上传后，博客网页显示 404 页面。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>因为绑定了域名，所以在 github 仓库根目录下有一个 CNAME 的文件，文件中写有需要绑定的域名。而使用 hexo 远程部署时会删除这个文件。所以页面会报 404 错误。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>只要在 github 仓库根目录下添加一个 CNAME 文件，且上传时不会被覆盖即可，方法如下：</p>
<h3 id="3-1-在-hexo-指定文件夹下的-source-文件夹下添加-CNAME-文件，CNAME-文件中添加域名。"><a href="#3-1-在-hexo-指定文件夹下的-source-文件夹下添加-CNAME-文件，CNAME-文件中添加域名。" class="headerlink" title="3.1 在 hexo 指定文件夹下的 source 文件夹下添加 CNAME 文件，CNAME 文件中添加域名。"></a>3.1 在 hexo 指定文件夹下的 source 文件夹下添加 CNAME 文件，CNAME 文件中添加域名。</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2019-08-15_20-35-35.png"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2019-08-15_20-36-55.png"></p>
<h3 id="3-2-然后在-Terminal-执行"><a href="#3-2-然后在-Terminal-执行" class="headerlink" title="3.2 然后在 Terminal 执行"></a>3.2 然后在 Terminal 执行</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3-查看-github-仓库根目录有该-CNAME-且博客可以正常访问"><a href="#3-3-查看-github-仓库根目录有该-CNAME-且博客可以正常访问" class="headerlink" title="3.3 查看 github 仓库根目录有该 CNAME 且博客可以正常访问"></a>3.3 查看 github 仓库根目录有该 CNAME 且博客可以正常访问</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2019-08-15_21-01-09.png"></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 迁移 | mac 到 mac</title>
    <url>/2024/10/01/hexo%E8%BF%81%E7%A7%BBmac%E5%88%B0mac/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>换了台新的 mac 机器，因为常用，所以将 hexo 迁移一下。</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><h2 id="（1）安装git"><a href="#（1）安装git" class="headerlink" title="（1）安装git"></a>（1）安装 git</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></tbody></table></figure>

<p>设置个人信息，这一步也可以后面做。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname”</span></span><br><span class="line"><span class="string">git config --global user.email youremail@example.com</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="（2）安装-node"><a href="#（2）安装-node" class="headerlink" title="（2）安装 node"></a>（2）安装 node</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（3）安装-hexo"><a href="#（3）安装-hexo" class="headerlink" title="（3）安装 hexo"></a>（3）安装 hexo</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（4）初始化-hexo"><a href="#（4）初始化-hexo" class="headerlink" title="（4）初始化 hexo"></a>（4）初始化 hexo</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> blog </span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo init</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（5）生成-ssh密钥"><a href="#（5）生成-ssh密钥" class="headerlink" title="（5）生成 ssh密钥"></a>（5）生成 ssh 密钥</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span> <span class="comment">#注册邮箱</span></span><br></pre></td></tr></tbody></table></figure>

<p>3 个回车后，进入<code>.ssh</code> 中。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ～/.ssh</span><br></pre></td></tr></tbody></table></figure>

<p>查看 id_rsa.pub 文件，将公钥复制。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（6）在github中添加ssh-key"><a href="#（6）在github中添加ssh-key" class="headerlink" title="（6）在github中添加ssh key"></a>（6）在 github 中添加 <code>ssh key</code></h2><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410012250358.png" alt="image-20241001225052765"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410012251682.png" alt="image-20241001225147653"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410012253897.png" alt="image-20241001225327868"></p>
<p>如果不在 github 上，在 nginx 服务上，则（如果 2 个都有，则都配置）</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ssh root@XXX.XXX.XXX.XXX</span><br></pre></td></tr></tbody></table></figure>

<p>复制公钥到 <code>authorized_keys</code> 中</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/.ssh</span><br><span class="line">vi authorized_keys      <span class="comment"># 存放客户端 ssh 公钥(id_rsa.pub)</span></span><br></pre></td></tr></tbody></table></figure>

<p>配置权限</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 authorized_keys  <span class="comment"># 配置权限</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="（6）替换文件"><a href="#（6）替换文件" class="headerlink" title="（6）替换文件"></a>（6）替换文件</h2><p><code>_config.yml</code> # 配置文件</p>
<p><code>_config.next.yml</code> # 主题配置文件</p>
<p><code>scaffolds</code>  # 页面模板</p>
<p><code>source</code> # 源文件</p>
<p><code>themes</code> # 主题文件</p>
<p>替换老 mac 的这些文件到新的 mac 博客文件夹中。</p>
<h2 id="（7）安装hexo-deployer-git插件"><a href="#（7）安装hexo-deployer-git插件" class="headerlink" title="（7）安装hexo-deployer-git插件"></a>（7）安装 <code>hexo-deployer-git</code> 插件</h2><p>在站点目录下安装</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>

<p>如果没有这一步，则在执行 <code>hexo -d</code> 时，会报错（有的人不会遇到）</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（8）正常使用hexo即可"><a href="#（8）正常使用hexo即可" class="headerlink" title="（8）正常使用hexo即可"></a>（8）正常使用 <code>hexo</code> 即可</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://blog.csdn.net/soyawww/article/details/118147820">https://blog.csdn.net/soyawww/article/details/118147820</a></p>
<p><a href="https://blog.csdn.net/qq_39153421/article/details/89362432">https://blog.csdn.net/qq_39153421/article/details/89362432</a></p>
<p><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">https://blog.csdn.net/qq_21808961/article/details/84476504</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter 通过 log4j2.xml 修改 log 文件位置</title>
    <url>/2024/04/15/jmeter%E9%80%9A%E8%BF%87log4j2-xml%E4%BF%AE%E6%94%B9log%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在 Apache JMeter 中，如果你使用的是 Log4j2 作为日志系统，并且想通过 <code>log4j2.xml</code> 配置文件修改日志文件的位置，你可以按照以下步骤操作：（文中使用 jmeter 版本为:apache-jmeter-5.6.3）</p>
<ol>
<li>找到 JMeter 安装目录下的 <code>log4j2.xml</code> 配置文件。在 JMeter 3.x 及以上版本中，这个文件通常位于 <code>apache-jmeter-X.XX/bin</code> 目录下。</li>
<li>打开 <code>log4j2.xml</code> 文件，找到 <code>RollingFile</code> 或 <code>File</code> 类型的 Appender 配置部分。</li>
</ol>
<span id="more"></span>

<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--......--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">packages</span>=<span class="string">"org.apache.jmeter.gui.logging"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改这里，修改日志文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"jmeter-log"</span> <span class="attr">fileName</span>=<span class="string">"/path/to/your/log/jmeter.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p %c{1.}: %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">GuiLogEvent</span> <span class="attr">name</span>=<span class="string">"gui-log-event"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p %c{1.}: %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">GuiLogEvent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"jmeter-log"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"gui-log-event"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.jmeter.junit"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>mumu 模拟器 pro 如何安装证书</title>
    <url>/2024/10/03/mumu%E6%A8%A1%E6%8B%9F%E5%99%A8pro%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p><code>mumu模拟器pro</code> 和常规的 <code>Android</code> 真机的证书安装不同，官网给出了相关文档，现做下整理，确保下次可以直接对照这个文档装，下面用 <code>Charles</code> 例子，安装相关证书。</p>
<span id="more"></span>

<h2 id="2-安装证书操作步骤"><a href="#2-安装证书操作步骤" class="headerlink" title="2.安装证书操作步骤"></a>2. 安装证书操作步骤</h2><h3 id="（1）从抓包软件中下载证书"><a href="#（1）从抓包软件中下载证书" class="headerlink" title="（1）从抓包软件中下载证书"></a>（1）从抓包软件中下载证书</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032026344.png" alt="image-20241003202622282"></p>
<ul>
<li>我保存在这里 <code>/Users/user1/Downloads/charles-ssl-proxying-certificate.pem</code>，记住这个路径</li>
</ul>
<h3 id="（2）开启可读写磁盘和开启手机-Root权限"><a href="#（2）开启可读写磁盘和开启手机-Root权限" class="headerlink" title="（2）开启可读写磁盘和开启手机 Root权限"></a>（2）开启<code>可读写磁盘</code>和<code>开启手机 Root权限</code></h3><ul>
<li><code>设置</code>➡️<code>数据</code>➡️<code>可读写磁盘</code>➡️<code>其他</code>➡️<code>开启手机 Root权限</code></li>
<li>启动模拟器</li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032034923.gif" alt="mumu 模拟器修改2 个设置"></p>
<h3 id="（3）开启模拟器ADB"><a href="#（3）开启模拟器ADB" class="headerlink" title="（3）开启模拟器ADB"></a>（3）开启模拟器 <code>ADB</code></h3><ul>
<li>工具➡️<code>打开 ADB（XXXXX,5555）</code></li>
</ul>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032042332.png" alt="image-20241003204211304" style="zoom:50%;">

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032059537.png" alt="image-20241003205913507"></p>
<h3 id="（4）通过命令计算出一个哈希值"><a href="#（4）通过命令计算出一个哈希值" class="headerlink" title="（4）通过命令计算出一个哈希值"></a>（4）通过命令计算出一个哈希值</h3><h4 id="①在刚才弹出的终端中输入"><a href="#①在刚才弹出的终端中输入" class="headerlink" title="①在刚才弹出的终端中输入"></a>①在刚才弹出的终端中输入</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="②通过命令计算出一个哈希值"><a href="#②通过命令计算出一个哈希值" class="headerlink" title="②通过命令计算出一个哈希值"></a>②通过命令计算出一个哈希值</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">openssl x509 -subject_hash_old -<span class="keyword">in</span> /Users/user1/Downloads/charles-ssl-proxying-certificate.pem</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032110999.png" alt="image-20241003211047970"></p>
<h4 id="③将charles-ssl-proxying-certificate-pem更名为-81732dfc-0（注意算出啥，就改成啥）"><a href="#③将charles-ssl-proxying-certificate-pem更名为-81732dfc-0（注意算出啥，就改成啥）" class="headerlink" title="③将charles-ssl-proxying-certificate.pem更名为 81732dfc.0（注意算出啥，就改成啥）"></a>③将 charles-ssl-proxying-certificate.pem 更名为 <code>81732dfc.0</code>（注意算出啥，就改成啥）</h4><h3 id="（5）将这个扩展名为-0-的证书复制到-system-etc-security-cacerts目录下"><a href="#（5）将这个扩展名为-0-的证书复制到-system-etc-security-cacerts目录下" class="headerlink" title="（5）将这个扩展名为 0 的证书复制到/system/etc/security/cacerts目录下"></a>（5）将这个扩展名为 0 的证书复制到 <code>/system/etc/security/cacerts</code> 目录下</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">adb push /Users/user1/Downloads/81732dfc.0 /system/etc/security/cacerts</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（6）安装证书"><a href="#（6）安装证书" class="headerlink" title="（6）安装证书"></a>（6）安装证书</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">adb shell <span class="string">"chmod 664 /system/etc/security/cacerts/81732dfc.0"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-测试抓包"><a href="#3-测试抓包" class="headerlink" title="3.测试抓包"></a>3. 测试抓包</h2><h3 id="（1）Charles➡️Proxy➡️SSL-Proxying-Settings-➡️add"><a href="#（1）Charles➡️Proxy➡️SSL-Proxying-Settings-➡️add" class="headerlink" title="（1）Charles➡️Proxy➡️SSL Proxying Settings...➡️add"></a>（1）<code>Charles</code>➡️<code>Proxy</code>➡️<code>SSL Proxying Settings...</code>➡️<code>add</code></h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032133648.png" alt="image-20241003213306607"></p>
<h3 id="（2）Host-Port"><a href="#（2）Host-Port" class="headerlink" title="（2）Host: * Port: *"></a>（2）<code>Host</code>: * <code>Port</code>: *</h3><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032137975.png" alt="image-20241003213729933" style="zoom:50%;">

<h3 id="（3）在模拟器中的网络设置"><a href="#（3）在模拟器中的网络设置" class="headerlink" title="（3）在模拟器中的网络设置"></a>（3）在模拟器中的网络设置</h3><p>设置➡️网络和互联网➡️wlan0➡️点击右上角铅笔图标➡️代理选择手动代理，填入电脑 IP、端口 8888（默认），并将 10.0.2.2 填入 “对以下网址不使用代理” 中，保存。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032213344.gif" alt="mumu 模拟器抓包网络设置"></p>
<h3 id="（4）Little-Snitch设置"><a href="#（4）Little-Snitch设置" class="headerlink" title="（4）Little Snitch设置"></a>（4）<code>Little Snitch</code> 设置</h3><ul>
<li>在 <code>Little Snitch</code> 中关闭了<code>模拟器</code>的某些链接，连接 <code>Charles</code> 抓包后，需要把模拟器的链接在 <code>Little Snitch</code> 下的 <code>Charles</code> 的链接需要重新关闭一次。</li>
</ul>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410032229078.png" alt="image-20241003222909037" style="zoom:50%;">

<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://mumu.163.com/mac/tutorials/certificates-and-packet-capture.html">https://mumu.163.com/mac/tutorials/certificates-and-packet-capture.html</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>charles</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 实现 excel 中复制某一列，粘贴转置为行功能</title>
    <url>/2021/05/31/mysql%E5%AE%9E%E7%8E%B0excel%E4%B8%AD%E5%A4%8D%E5%88%B6%E6%9F%90%E4%B8%80%E5%88%97%E7%B2%98%E8%B4%B4%E8%BD%AC%E7%BD%AE%E4%B8%BA%E8%A1%8C%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>数据处理需要，需要将大批量的列，转置为行。</p>
<p>尝试使用 excel，①选择需要转置的列→②在所需位置，右键→选择性粘贴→转置，发现只转置了一部分数据。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>转置的长度超过了 excel 的最大长度。</p>
<p>最大长度是多少没查到😂。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>百度后，发现可以使用 mysql 中 group_concat 函数。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(id separator ',') FROM `table` // id 为需要转换的列，separator后为以某字符为分割</span><br></pre></td></tr></tbody></table></figure>

<p>发现又只转置了一部分数据。</p>
<p>查资料发现，默认 GROUP_CONCAT 函数返回的结果大小被 MySQL 默认限制为 1024（字节）的长度。</p>
<p>查看方式:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show variables like "group_concat_max_len";</span><br></pre></td></tr></tbody></table></figure>

<p>解决方法有 2 种:</p>
<h3 id="（1）临时解决方案："><a href="#（1）临时解决方案：" class="headerlink" title="（1）临时解决方案："></a>（1）临时解决方案：</h3><p>（该方法缺点是重启服务后设置失效，“group_concat_max_len = -1” 则为最大值，group_concat_max_len 的最大值为 4294967295 (2^32 - 1) 字节，因为处理数据量比较大，直接设置为最大值）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SET GLOBAL group_concat_max_len = -1;</span><br><span class="line"></span><br><span class="line">SET SESSION group_concat_max_len = -1;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）永久解决方案："><a href="#（2）永久解决方案：" class="headerlink" title="（2）永久解决方案："></a>（2）永久解决方案：</h3><p>在 Mysql 配置文件中加入如下配置 (推荐):</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">group_concat_max_len = -1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p>参考于该<a href="https://www.cnblogs.com/zjfblog/p/13658936.html">博客园博客</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 按照分组筛选出时间倒序前三条记录</title>
    <url>/2024/05/22/mysql%E6%8C%89%E7%85%A7%E5%88%86%E7%BB%84%E7%AD%9B%E9%80%89%E5%87%BA%E6%97%B6%E9%97%B4%E5%80%92%E5%BA%8F%E5%89%8D%E4%B8%89%E6%9D%A1%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在 MySQL 低版本 (5.7 以下) 中，如何按照分组筛选出时间倒序前三条记录？</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span>, </span><br><span class="line">    <span class="variable">@rn</span> :<span class="operator">=</span> IF(<span class="variable">@prev_group</span> <span class="operator">=</span> group_column, <span class="variable">@rn</span> <span class="operator">+</span> <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">AS</span> rn,</span><br><span class="line">    <span class="variable">@prev_group</span> :<span class="operator">=</span> group_column</span><br><span class="line">  <span class="keyword">FROM</span> your_table, (<span class="keyword">SELECT</span> <span class="variable">@rn</span> :<span class="operator">=</span> <span class="number">0</span>, <span class="variable">@prev_group</span> :<span class="operator">=</span> <span class="keyword">NULL</span>) r</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> group_column, time_column <span class="keyword">DESC</span></span><br><span class="line">) t</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&lt;=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> group_column, time_column <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>(1) 在子查询中，使用变量 <code>@rn</code> 和 <code>@prev_group</code> 来记录当前行的记录编号和前一行的分组。</p>
<p>(2)<code>@rn := IF(@prev_group = group_column, @rn + 1, 1) AS rn</code> 这一行代码的作用是：如果当前行的分组与上一行相同，则记录编号 <code>rn</code> 递增 1, 否则从 1 开始计数。</p>
<p>(3)<code>@prev_group := group_column</code> 这一行代码是更新上一行的分组。</p>
<p>(4) 在外层查询中，使用 <code>WHERE rn &lt;= 3</code> 来筛选出每个分组中时间倒序的前 3 条记录。</p>
<p>(5) 最后按分组 <code>group_column</code> 和时间 <code>time_column</code> 倒序排列输出结果。</p>
<p>你可以将 <code>your_table</code> 替换成你自己的表名，<code>group_column</code> 替换成你表中的分组列名，<code>time_column</code> 替换成你表中的时间列名。</p>
<p>这种方法在 MySQL 5.7 以下版本中都可以使用，不需要使用 <code>ROW_NUMBER()</code> 函数，性能也较好。</p>
<p>在 MySQL8.0 及以上可以使用如下方法：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span>, </span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> group_column <span class="keyword">ORDER</span> <span class="keyword">BY</span> time_column <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">  <span class="keyword">FROM</span> your_table</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&lt;=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> group_column, time_column <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>（1）首先使用子查询，在每个分组 <code>group_column</code> 内根据时间列 <code>time_column</code> 使用 <code>ROW_NUMBER()</code> 函数给每条记录编号，按时间顺序倒序排列。</p>
<p>（2）然后在外层查询中，使用 <code>WHERE rn &lt;= 3</code> 筛选出每个分组中时间倒序的前 3 条记录。</p>
<p>（3）最后按分组 <code>group_column</code> 和时间 <code>time_column</code> 倒序排列输出结果。</p>
<p>这样就可以实现按分组筛选出时间倒序前 3 条记录的功能。你可以将 <code>your_table</code> 替换成你自己的表名，<code>group_column</code> 替换成你表中的分组列名，<code>time_column</code> 替换成你表中的时间列名。</p>
<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm 使用 HTMLTestRunner 不能生成测试报告解决方法</title>
    <url>/2019/08/13/pycharm%E4%BD%BF%E7%94%A8HTMLTestRunner%E4%B8%8D%E8%83%BD%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>使用 pycharm IDE 使用 unittest 框架，代码执行完成且没有报错，没有在指定目录下生成测试报告。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>pyCharm 会默认使用自带的框架如 (unittest/pytest) 来执行单元测试，不会执行 main 函数中的代码，所以不生成测试报告。</p>
<h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><p>test.py</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver	</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Baidu</span>(unittest.TestCase):</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.driver = webdriver.Chrome()</span><br><span class="line">        <span class="variable language_">self</span>.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.base_url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_baidu_search</span>(<span class="params">self</span>):</span><br><span class="line">        driver = <span class="variable language_">self</span>.driver</span><br><span class="line">        driver.get(<span class="variable language_">self</span>.base_url)</span><br><span class="line">        driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"HTMLTestRunner"</span>)</span><br><span class="line">        driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.driver.quit()</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'test11111111'</span>)</span><br><span class="line">    testunit = unittest.TestSuite()</span><br><span class="line">    testunit.addTest(Baidu(<span class="string">'test_baidu_search'</span>))</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'test22222222'</span>)</span><br><span class="line">    <span class="comment"># 定义报告存放路径</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">'./result.html'</span>, <span class="string">'wb'</span>)</span><br><span class="line">    <span class="comment"># 定义测试报告</span></span><br><span class="line">    runner = HTMLTestRunner(stream=fp, title=<span class="string">'百度搜索测试报告'</span>, description=<span class="string">'用例执行情况：'</span>)</span><br><span class="line">    <span class="comment"># 运行测试用例</span></span><br><span class="line">    runner.run(testunit)</span><br><span class="line">    <span class="comment"># 关闭报告文件</span></span><br><span class="line">    fp.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>使用普通模式执行该单元测试，切换普通模式方法如下：</p>
<p>3.1 点击 pycharm 右上角的 “Uittests in test_baidu.py” 下拉框，选择 “Edit Configuration”</p>


<p>3.2 点击 “+” 按钮，在下拉菜单中选择 “Python” 选项</p>


<p>3.3 点击 “Script Path” 后的选择路径按钮，选择该文件的存储路径</p>




<p>3.4 在 Unittest 框架下选择该文件，然后点击 “-” 按钮，删除该文件</p>


<p>3.5 然后重新执行该源代码即可在指定目录下生成测试报告</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2019-08-15_16-12-18-20240429121121384.png"></p>
<p>测试报告</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2019-08-15_16-15-26-20240429121041426.png"></p>


<p>4. 相关参考</p>
<p>4.1 代码来源于书《selenium2 自动化测试实战基于 Python 语言》— 虫师<br>4.2 参考于该 <a href="https://blog.csdn.net/alchaochao/article/details/79630830">CSDN 博客</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>python 创建虚拟环境</title>
    <url>/2021/06/29/python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>python 如何创建虚拟环境？</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><p>使用 venv 命令，方法如下 (python3.5 以后)：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -m venv /xx/xx/myvenv <span class="comment">#(myvenv环境名称)</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>激活虚拟环境</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> myvenv/bin/activate</span></span><br></pre></td></tr></tbody></table></figure>

<p>关闭虚拟环境</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">deactivate</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pytest 相关总结</title>
    <url>/2024/08/07/pytest%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="0-pytest-常用插件"><a href="#0-pytest-常用插件" class="headerlink" title="0.pytest 常用插件"></a>0.pytest 常用插件</h2><ul>
<li>pytest-html</li>
<li>pytest-xdist</li>
<li>pytest-ordering</li>
<li>pytest-rerunfailures</li>
<li>allure-pytest</li>
<li>pytest-base-url</li>
<li>pytest</li>
</ul>
<span id="more"></span>

<h2 id="1-pytest-常用命令参数"><a href="#1-pytest-常用命令参数" class="headerlink" title="1.pytest 常用命令参数"></a>1.pytest 常用命令参数</h2><ul>
<li>-h: 查看所有可用参数</li>
<li> -s：输出调试信息，包括 print 打印的信息。</li>
<li>-v：显示更详细的信息。</li>
<li>-k=value：用例的 nodeid 包含 value 值则用例被执行。</li>
<li>-n=num：启用多线程或分布式运行测试用例。需要安装 pytest-xdist 插件模块。</li>
<li>-m = 标签名：执行被 @pytest.mark. 标签名 标记的用例。</li>
<li>-x：只要有一个用例执行失败就停止当前线程的测试执行。</li>
<li>–maxfail=num：与 - x 功能一样，只是用例失败次数可自定义。</li>
<li>–reruns=num：失败用例重跑 num 次。需要安装 pytest-rerunfailures 插件模块。</li>
</ul>
<h2 id="2-pytest默认的测试用例规则"><a href="#2-pytest默认的测试用例规则" class="headerlink" title="2.pytest默认的测试用例规则"></a>2.pytest 默认的测试用例规则</h2><p>一般在项目当中新建一个用例包</p>
<ul>
<li>testcases<ul>
<li> 创建很多的 py 文件当做用例使用</li>
</ul>
</li>
</ul>
<p>注意点：</p>
<ul>
<li>包名和模块名以及用例名（函数，方法）必须符合以 test 开头或者 test 结尾</li>
<li>测试用例类必须以 Test 开头，而且这个测试类不能有 init 方法</li>
<li>以上规则属于 pytest 默认的形式，如果需要修改可以配置 pytest.ini 进行改变</li>
</ul>
<p>测试用例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_01</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1.打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2.输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"3.点击登录按钮"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin_01</span>:</span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_02</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"实例方法1：点击登录页面"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"实例方法2.输入账号密码"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"实例方法3.点击登录按钮"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_03</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"类方法1.点击登录页面"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"类方法2.输入账号密码"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"类方法3.点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure>



<h2 id="3-pytest-用例执行的两种方式"><a href="#3-pytest-用例执行的两种方式" class="headerlink" title="3.pytest 用例执行的两种方式"></a>3.pytest 用例执行的两种方式</h2><p>1. 使用命令 pytest -vs</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pytest -vs</span><br></pre></td></tr></tbody></table></figure>

<p>2. 使用主函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># run.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pytest.main([])</span><br><span class="line">    <span class="comment"># 带参数执行</span></span><br><span class="line">    <span class="comment"># pytest.main(['-v', '-s'])</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-pytest标记跳过用例"><a href="#4-pytest标记跳过用例" class="headerlink" title="4.pytest标记跳过用例"></a>4.pytest 标记跳过用例</h2><p>跳过用例的方式有 2 中类型：</p>
<ul>
<li><p>无条件跳过</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params">reason=<span class="string">'无条件跳过该测试用例'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_01</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1.打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2.输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"3.点击登录按钮"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>有条件跳过</p>
<ul>
<li><p>满足条件就跳过不执行</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params"><span class="number">3</span>&gt;<span class="number">2</span>, reason=<span class="string">'如果前面条件为真，则跳过该用例，不执行'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_04</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 4：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 4：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 4：点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>不满足条件，就不跳过，正常执行</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params"><span class="number">3</span>&lt;<span class="number">2</span>, reason=<span class="string">'如果前面条件为假， 则不跳过用例正常执行'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_05</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 5：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 5：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 5：点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
</ul>
<h2 id="5-pytest-控制测试用例的执行顺序"><a href="#5-pytest-控制测试用例的执行顺序" class="headerlink" title="5.pytest 控制测试用例的执行顺序"></a>5.pytest 控制测试用例的执行顺序</h2><p>默认是按照文件名以及用例名的先后顺序进行执行的，想要改变默认执行规则，可以进行修改调整。</p>
<ul>
<li>pytest-ordring ??? 这里也没有用这个包的内容呢？？</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_06</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 6：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 6：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 6：点击登录按钮"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_07</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 7：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 7：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 7：点击登录按钮"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用@pytest.mark.run(order=1)，order 的数字越小，执行顺序越靠前，没有该装饰器的则按照原有的方式执行</span></span><br><span class="line"><span class="meta">@pytest.mark.run(<span class="params">order=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_08</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 8：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 8：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 8：点击登录按钮"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-pytest标记失败的用例"><a href="#6-pytest标记失败的用例" class="headerlink" title="6.pytest标记失败的用例"></a>6.pytest 标记失败的用例</h2><p>标记预期会出现异常或者失败的测试用例，只有出现异常才符合预期，如果不出现异常反而不符合预期。</p>
<ul>
<li><p>正常预期失败</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.xfail(<span class="params">reason=<span class="string">'出现了被除数为 0 的情况'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_09</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 9：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 9：输入账号密码"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 9：点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>意外预期通过</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.xfail(<span class="params">reason=<span class="string">'意外通过了被除数为 0 的情况'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_10</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 10：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 10：输入账号密码"</span>)</span><br><span class="line">    <span class="comment"># print(1 / 0)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 10：点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>执行结果如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line">testcases/test_01.py::test_login_09 测试函数 9：打开页面</span><br><span class="line">测试函数 9：输入账号密码</span><br><span class="line">XFAIL (出现了被除数为 0 的情况)</span><br><span class="line">testcases/test_01.py::test_login_10 测试函数 10：打开页面</span><br><span class="line">测试函数 10：输入账号密码</span><br><span class="line">测试函数 10：点击登录按钮</span><br><span class="line">XPASS (意外通过了被除数为 0 的情况)</span><br><span class="line"></span><br><span class="line">============================================== 6 passed, 2 skipped, 1 xfailed, 1 xpassed <span class="keyword">in</span> 0.06s ==============================================</span><br><span class="line">(.venv) ➜  StudyPytest</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-pytest标记参数化"><a href="#7-pytest标记参数化" class="headerlink" title="7.pytest标记参数化"></a>7.pytest 标记参数化</h2><p>参数化的使用场景主要是针对同样的用例执行流程，输入不同的数据，结合参数进行数据驱动的测试。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params">[<span class="string">'username'</span>, <span class="string">'password'</span>], [(<span class="params"><span class="string">'13100000001'</span>, <span class="string">'pass01'</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">                                                    (<span class="params"><span class="string">'13100000002'</span>, <span class="string">'pass02'</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">                                                    (<span class="params"><span class="string">'13100000003'</span>, <span class="string">'pass03'</span></span>)]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_login_11</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 11：打开页面"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 11：输入账号"</span>, username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 11：输入密码"</span>, password)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"测试函数 11：点击登录按钮"</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>一个用例可以输入不同组的参数进行数据驱动测试，有多少个参数，用例就执行多少遍</p>
<p>从 excel 中提取参数化数据进行测试</p>
<p>只要返回的参数是</p>
<p>从 csv 中提取参数化数据进行测试</p>
<h2 id="8-pytest的setup-teardown相关"><a href="#8-pytest的setup-teardown相关" class="headerlink" title="8. pytest的setup/teardown相关"></a>8. pytest 的 setup/teardown 相关</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_module</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="comment"># 模块级别的 setup</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"setup_module"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown_module</span>(<span class="params">module</span>):</span><br><span class="line">    <span class="comment"># 模块级别的 teardown</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"teardown_module"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test02</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment"># 类级别的 setup</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"setup_class"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment"># 类级别的 teardown</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"teardown_class"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_method</span>(<span class="params">self, method</span>):</span><br><span class="line">        <span class="comment"># 方法级别的 setup</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"setup_method"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_method</span>(<span class="params">self, method</span>):</span><br><span class="line">        <span class="comment"># 方法级别的 setup</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"teardown_method"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_01</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &gt; <span class="number">2</span>, <span class="string">'3确实大于2'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_02</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &lt; <span class="number">2</span>, <span class="string">'失败'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_03</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> / <span class="number">0</span> == <span class="number">0</span>, <span class="string">'报错了'</span></span><br></pre></td></tr></tbody></table></figure>



<p>执行结果：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(.venv) ➜  StudyPytest pytest -vs testcases/test_02.py::Test02</span><br><span class="line">============================================================= <span class="built_in">test</span> session starts ==============================================================</span><br><span class="line">platform darwin -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0 -- /Users/candy/Project/PycharmProjects/StudyPytest/.venv/bin/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">metadata: {<span class="string">'Python'</span>: <span class="string">'3.12.4'</span>, <span class="string">'Platform'</span>: <span class="string">'macOS-13.6.7-x86_64-i386-64bit'</span>, <span class="string">'Packages'</span>: {<span class="string">'pytest'</span>: <span class="string">'8.3.2'</span>, <span class="string">'pluggy'</span>: <span class="string">'1.5.0'</span>}, <span class="string">'Plugins'</span>: {<span class="string">'html'</span>: <span class="string">'4.1.1'</span>, <span class="string">'metadata'</span>: <span class="string">'3.1.1'</span>, <span class="string">'rerunfailures'</span>: <span class="string">'14.0'</span>, <span class="string">'allure-pytest'</span>: <span class="string">'2.13.5'</span>, <span class="string">'ordering'</span>: <span class="string">'0.6'</span>, <span class="string">'base-url'</span>: <span class="string">'2.1.0'</span>, <span class="string">'xdist'</span>: <span class="string">'3.6.1'</span>}, <span class="string">'Base URL'</span>: <span class="string">''</span>}</span><br><span class="line">rootdir: /Users/candy/Project/PycharmProjects/StudyPytest</span><br><span class="line">plugins: html-4.1.1, metadata-3.1.1, rerunfailures-14.0, allure-pytest-2.13.5, ordering-0.6, base-url-2.1.0, xdist-3.6.1</span><br><span class="line">collected 3 items                                                                                                                              </span><br><span class="line"></span><br><span class="line">testcases/test_02.py::Test02::test_02_01 </span><br><span class="line">setup_module  <span class="comment"># 先启动模块级别 setup</span></span><br><span class="line">setup_class   <span class="comment"># 在启动类级别 setup</span></span><br><span class="line">setup_method  <span class="comment"># 在启动方法级别 setup</span></span><br><span class="line">PASSED</span><br><span class="line">teardown_method <span class="comment"># 方法执行完毕 启动方法级别 teardown</span></span><br><span class="line"></span><br><span class="line">testcases/test_02.py::Test02::test_02_02 </span><br><span class="line">setup_method <span class="comment"># 第二个用例执行前，继续启动方法级别 setup</span></span><br><span class="line">FAILED</span><br><span class="line">teardown_method <span class="comment"># 执行完毕后，启动方法级别 teardown</span></span><br><span class="line"></span><br><span class="line">testcases/test_02.py::Test02::test_02_03 setup_method</span><br><span class="line">FAILEDteardown_method</span><br><span class="line">teardown_class</span><br><span class="line">teardown_module</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h2 id="9-pytest-前后置-fixture-固件"><a href="#9-pytest-前后置-fixture-固件" class="headerlink" title="9.pytest 前后置 fixture 固件"></a>9.pytest 前后置 fixture 固件</h2><p>当用例执行之前或者执行完成后需要固定的测试环境可以卸载 fixture 当中，然后进行使用。</p>
<p>（这个相对于之前的 setup，teardown 就要清爽多了啊）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="keyword">from</span> _pytest.fixtures <span class="keyword">import</span> fixture</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fixture的作用范围:session &gt; module &gt; class &gt; function, 不写默认为 function</span></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'function'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'function级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'function级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'class'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_class</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'class级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'class级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'module'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_module</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'module级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'module级别结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fixture(<span class="params">scope=<span class="string">'session'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_session</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'session级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'session级别结束'</span>)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="meta">@fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_x_fixture</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'不写范围function级别开始'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'不写范围function级别结束'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>测试用例中使用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test03</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_01</span>(<span class="params">self, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &gt; <span class="number">2</span>, <span class="string">'为真，通过0301'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_02</span>(<span class="params">self, e_x_class, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> &lt; <span class="number">2</span>, <span class="string">'为假，不通过0302'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_03</span>(<span class="params">self, e_x_class, e_x_module, e_x_function</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">True</span>, <span class="string">'为真，通过0303'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_03_04</span>(<span class="params">e_x_module, e_x_function</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span>, <span class="string">'为真，通过 0304'</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_03_05</span>(<span class="params">e_x_fixture</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span>, <span class="string">'为真，通过 0304'</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(.venv) ➜  StudyPytest pytest -vs -k=test_03</span><br><span class="line">============================================================= test session starts ==============================================================</span><br><span class="line">platform darwin -- Python <span class="number">3.12</span><span class="number">.4</span>, pytest-<span class="number">8.3</span><span class="number">.2</span>, pluggy-<span class="number">1.5</span><span class="number">.0</span> -- /Users/candy/Project/PycharmProjects/StudyPytest/.venv/<span class="built_in">bin</span>/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">metadata: {<span class="string">'Python'</span>: <span class="string">'3.12.4'</span>, <span class="string">'Platform'</span>: <span class="string">'macOS-13.6.7-x86_64-i386-64bit'</span>, <span class="string">'Packages'</span>: {<span class="string">'pytest'</span>: <span class="string">'8.3.2'</span>, <span class="string">'pluggy'</span>: <span class="string">'1.5.0'</span>}, <span class="string">'Plugins'</span>: {<span class="string">'html'</span>: <span class="string">'4.1.1'</span>, <span class="string">'metadata'</span>: <span class="string">'3.1.1'</span>, <span class="string">'rerunfailures'</span>: <span class="string">'14.0'</span>, <span class="string">'allure-pytest'</span>: <span class="string">'2.13.5'</span>, <span class="string">'ordering'</span>: <span class="string">'0.6'</span>, <span class="string">'base-url'</span>: <span class="string">'2.1.0'</span>, <span class="string">'xdist'</span>: <span class="string">'3.6.1'</span>}, <span class="string">'Base URL'</span>: <span class="string">''</span>}</span><br><span class="line">rootdir: /Users/candy/Project/PycharmProjects/StudyPytest</span><br><span class="line">plugins: html-<span class="number">4.1</span><span class="number">.1</span>, metadata-<span class="number">3.1</span><span class="number">.1</span>, rerunfailures-<span class="number">14.0</span>, allure-pytest-<span class="number">2.13</span><span class="number">.5</span>, ordering-<span class="number">0.6</span>, base-url-<span class="number">2.1</span><span class="number">.0</span>, xdist-<span class="number">3.6</span><span class="number">.1</span></span><br><span class="line">collected <span class="number">21</span> items / <span class="number">17</span> deselected / <span class="number">4</span> selected                                                                                                </span><br><span class="line"></span><br><span class="line">testcases/test_03.py::Test03::test_03_01 </span><br><span class="line">function级别开始</span><br><span class="line">PASSED</span><br><span class="line">function级别结束</span><br><span class="line"></span><br><span class="line">testcases/test_03.py::Test03::test_03_02 </span><br><span class="line"><span class="keyword">class</span>级别开始</span><br><span class="line">function级别开始</span><br><span class="line">FAILED</span><br><span class="line">function级别结束</span><br><span class="line"></span><br><span class="line">testcases/test_03.py::Test03::test_03_03 </span><br><span class="line">module级别开始</span><br><span class="line">function级别开始</span><br><span class="line">PASSED</span><br><span class="line">function级别结束</span><br><span class="line"><span class="keyword">class</span>级别结束</span><br><span class="line"></span><br><span class="line">testcases/test_03.py::test_03_04 </span><br><span class="line">function级别开始</span><br><span class="line">PASSED</span><br><span class="line">function级别结束</span><br><span class="line">module级别结束</span><br><span class="line"></span><br><span class="line">testcases/test_03.py::test_03_05 </span><br><span class="line">不写范围function级别开始</span><br><span class="line">PASSED</span><br><span class="line">不写范围function级别结束</span><br><span class="line">module级别结束</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="9-pytest-ini-配置文件"><a href="#9-pytest-ini-配置文件" class="headerlink" title="9.pytest.ini 配置文件"></a>9.pytest.ini 配置文件</h2><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="comment"># 添加额外的测试文件或目录到测试搜索路径</span></span><br><span class="line"><span class="attr">testpaths</span> = tests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定测试文件的模式，例如 test_*.py 或者 *_test.py</span></span><br><span class="line"><span class="attr">python_files</span> = test_*.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定测试目录的模式</span></span><br><span class="line">testpaths =</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 pytest 的插件</span></span><br><span class="line"><span class="attr">addopts</span> = -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line"><span class="attr">log_cli</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">log_cli_level</span> = INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置覆盖率报告</span></span><br><span class="line"><span class="attr">cov</span> = my_package</span><br><span class="line"><span class="attr">cov_config</span> = .coveragerc</span><br><span class="line"><span class="attr">cov_report</span> = term-missing:skip-covered</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>python 加密总结</title>
    <url>/2024/06/24/python%E5%8A%A0%E5%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>每次都查系列，总结一下，以方便下次查。</p>
<p>Md5 加密 </p>
<p>Sha 加密</p>
<p>Sha1</p>
<p>Sha256</p>
<p>Rsa 加密</p>
<span id="more"></span>

<h2 id="2-加密总结"><a href="#2-加密总结" class="headerlink" title="2.加密总结"></a>2. 加密总结</h2><p>（1）MD5 加密</p>
<p>在 Python 中，可以使用内置的 <code>hashlib</code> 库来执行 MD5 加密。MD5 是一种广泛使用的哈希函数，它可以产生一个 128 位（16 字节）的哈希值，通常用一个 32 位的十六进制字符串表示。以下是🌰：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">复制</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment"># 将文本转换为字节</span></span><br><span class="line">    text_bytes = text.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建hash对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对字节进行MD5加密</span></span><br><span class="line">    md5.update(text_bytes)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取加密后的二进制数据</span></span><br><span class="line">    digest = md5.digest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将二进制数据转换为十六进制字符串</span></span><br><span class="line">    hex_dig = md5.hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> hex_dig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数加密字符串</span></span><br><span class="line">text_to_encrypt = <span class="string">"Hello, World!"</span></span><br><span class="line">encrypted_text = md5_encrypt(text_to_encrypt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"The MD5 encrypted text is: <span class="subst">{encrypted_text}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>MD5 已经不再被认为是安全的哈希函数，因为它容易受到多种攻击，如碰撞攻击。</p>
<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2>]]></content>
  </entry>
  <entry>
    <title>python 日志模块总结</title>
    <url>/2024/08/07/python%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Python 的 <code>logging</code> 模块是 Python 标准库的一部分，它提供了一个灵活的框架来将日志信息发送到不同的目的地，如控制台、文件、远程服务器等。使用 <code>logging</code> 模块，你可以控制日志信息的级别，并且可以针对不同的应用模块进行日志管理。</p>
<h2 id="1-日志级别"><a href="#1-日志级别" class="headerlink" title="1.日志级别"></a>1. 日志级别</h2><ul>
<li><code>DEBUG</code>: 调试信息，用于问题诊断。</li>
<li><code>INFO</code>: 一般信息，用于记录程序运行状态。</li>
<li><code>WARNING</code>: 警告信息，表示有潜在问题。</li>
<li><code>ERROR</code>: 错误信息，表示严重问题。</li>
<li><code>CRITICAL</code>: 临界信息，表示非常严重的问题。</li>
</ul>
<p>日志级别默认为<code> WARNING</code>，从大到小为：</p>
<p>CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG</p>
<p>输出的日志是设置的日志级别及其以上级别：</p>
<p>如果设置的日志级别为 WARNING，则只会显示 WARNING 及其以上级别的信息：<code>WARNING</code>,<code> ERROR</code>,<code> CRITICAL</code></p>
<span id="more"></span>

<h2 id="2-简单🌰"><a href="#2-简单🌰" class="headerlink" title="2.简单🌰"></a>2. 简单🌰</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># log 文件路径</span></span><br><span class="line">log_file = <span class="string">'demo_log.log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log 输出格式,格式有很多，这个是常用的格式，不够用在查</span></span><br><span class="line">log_format = <span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s : %(message)s'</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=log_file,  <span class="comment"># 设置 log 输出文件</span></span><br><span class="line">                    level=logging.DEBUG,  <span class="comment"># 输出等级</span></span><br><span class="line">                    <span class="built_in">format</span>=log_format,  <span class="comment"># 输出格式</span></span><br><span class="line">                    filemode=<span class="string">'w'</span>)  <span class="comment"># 日志文件打开模式 w是写入，a是追加</span></span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'This is a debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'This is an info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'This is a warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'This is an error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'This is a critical message'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2024-08-08 11:33:40,649 - demo_log0.py[line:16] - INFO : This is an info message</span><br><span class="line">2024-08-08 11:33:40,649 - demo_log0.py[line:17] - WARNING : This is a warning message</span><br><span class="line">2024-08-08 11:33:40,649 - demo_log0.py[line:18] - ERROR : This is an error message</span><br><span class="line">2024-08-08 11:33:40,649 - demo_log0.py[line:19] - CRITICAL : This is a critical message</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-高级🌰"><a href="#3-高级🌰" class="headerlink" title="3.高级🌰"></a>3. 高级🌰</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging, os</span><br><span class="line"></span><br><span class="line">log_path = os.path.join(os.path.dirname(__file__), <span class="string">'demo_log.log'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 log 对象</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'__name__'</span>)  <span class="comment"># 其中的__name__代表当前 py 文件的名称，也可以不写</span></span><br><span class="line"><span class="comment"># 设置 log 对象的等级，记录所有文件级别日志</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 FileHandler，将写入文件</span></span><br><span class="line">fh = logging.FileHandler(log_path, mode=<span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置log 等级，记录所有文件级别日志</span></span><br><span class="line">fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 StreamHandler, 将 log 输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 设置 log 等级，控制台只记录 Error 以及以上的记录</span></span><br><span class="line">ch.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输出格式</span></span><br><span class="line">log_formatter = <span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s : %(message)s'</span></span><br><span class="line">formatter = logging.Formatter(log_formatter)</span><br><span class="line"></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把handler添加到 logger 里</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line">logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 干完之后清理下，这里主要为了以后多次调用出现重复日志输出</span></span><br><span class="line"><span class="comment"># logger.removeHandler(ch)</span></span><br><span class="line"><span class="comment"># logger.removeHandler(fh)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logger.error('error message')</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>在这个示例中，我们创建了一个 <code>Logger</code> 对象，并设置了两个 Handler：一个输出到控制台的 <code>StreamHandler</code> 和一个输出到文件的 <code>FileHandler</code>。我们还定义了一个 <code>Formatter</code> 来格式化日志消息，并将其应用到了两个 Handler 上。最后，我们添加了日志消息，它们会根据设置的日志级别被输出到相应的目的地。</p>
<h2 id="4-封装后使用"><a href="#4-封装后使用" class="headerlink" title="4.封装后使用"></a>4. 封装后使用</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># demo_log2.py</span></span><br><span class="line"><span class="keyword">import</span> logging, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_log2</span>():</span><br><span class="line">    log_path = os.path.join(os.path.dirname(__file__), <span class="string">'demo_log.log'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 log 对象</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">'__name__'</span>)  <span class="comment"># 其中的__name__代表当前 py 文件的名称，也可以不写</span></span><br><span class="line">    logger.handlers.clear()  <span class="comment"># 防止重复输出日志，因为添加一个 handler就会输出一次</span></span><br><span class="line">    <span class="comment"># 设置 log 对象的等级</span></span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 handler，将写入文件</span></span><br><span class="line">    fh = logging.FileHandler(log_path, mode=<span class="string">'a'</span>)</span><br><span class="line">    <span class="comment"># 设置log 等级与前面保持一致</span></span><br><span class="line">    fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 handler, 将 log 输出到控制台</span></span><br><span class="line">    ch = logging.StreamHandler()</span><br><span class="line">    <span class="comment"># 设置 log 等级与 log 对象保持一致</span></span><br><span class="line">    ch.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置输出格式</span></span><br><span class="line">    log_formatter = <span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s : %(message)s'</span></span><br><span class="line">    formatter = logging.Formatter(log_formatter)</span><br><span class="line">    ch.setFormatter(formatter)</span><br><span class="line">    fh.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把handler添加到 logger 里</span></span><br><span class="line">    <span class="comment"># print(logger.handlers) # 没添加时，logger.handlers == []</span></span><br><span class="line">    <span class="comment"># 如果 logger.handlers 为空，则添加 ch / fh ，防止重复输出日志，因为添加一个 handler就会输出一次</span></span><br><span class="line">    <span class="comment"># if logger.handlers.__len__() == 0:</span></span><br><span class="line">    logger.addHandler(ch)</span><br><span class="line">    logger.addHandler(fh)</span><br><span class="line">    <span class="comment"># print(logger.handlers)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># demo_user_log.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo_log2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_sum</span>(<span class="params">a, b</span>):</span><br><span class="line"></span><br><span class="line">    logger = demo_log2.demo_log2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">sum</span> = a / b</span><br><span class="line">        logger.debug(<span class="string">f'<span class="subst">{a}</span> / <span class="subst">{b}</span> = <span class="subst">{<span class="built_in">sum</span>}</span> '</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f'被除数不能为 0： <span class="subst">{e}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    calc_sum(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    calc_sum(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>

<p>输出结果：</p>
<p>控制台输出结果：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2024-08-08 15:13:56,611 - demo_user_log.py[line:13] - ERROR : 被除数不能为 0： division by zero</span><br></pre></td></tr></tbody></table></figure>

<p>日志文件输出结果：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">2024-08-08 15:13:56,611 - demo_user_log.py[line:10] - DEBUG : 1 / 1 = 1.0 </span><br><span class="line">2024-08-08 15:13:56,611 - demo_user_log.py[line:13] - ERROR : 被除数不能为 0： division by zero</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>测试脚本</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 读写 csv 总结</title>
    <url>/2024/06/20/python%E8%AF%BB%E5%86%99csv%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>每次都查系列，总结一下，以方便下次查。</p>
<p>在 Python 中，你可以使用内置的 <code>csv</code> 模块来读写 CSV（Comma-Separated Values）文件。</p>
<p>以下是一些基本的示例，展示如何使用 <code>csv</code> 模块来实现这一功能。</p>
<span id="more"></span>

<h3 id="1-读取CSV文件"><a href="#1-读取CSV文件" class="headerlink" title="(1)读取CSV文件"></a>(1) 读取 <code>CSV</code> 文件</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件进行读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'input.csv'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.reader(file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件中的每一行</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row)  <span class="comment"># 打印每一行的数据 row: [list]</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-写入CSV文件"><a href="#2-写入CSV文件" class="headerlink" title="(2)写入CSV文件"></a>(2) 写入 <code>CSV</code> 文件</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要写入的数据</span></span><br><span class="line">rows = [</span><br><span class="line">    [<span class="string">'Name'</span>, <span class="string">'Age'</span>, <span class="string">'City'</span>],</span><br><span class="line">    [<span class="string">'Alice'</span>, <span class="number">24</span>, <span class="string">'New York'</span>],</span><br><span class="line">    [<span class="string">'Bob'</span>, <span class="number">27</span>, <span class="string">'Los Angeles'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件进行写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'output.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">    writer = csv.writer(file)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        writer.writerow(row)</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure>

<p>使用 <code>DictReader</code> 和 <code>DictWriter</code></p>
<p>如果你的 CSV 文件有表头，并且你想要以字典的形式读取或写入数据，可以使用 <code>csv.DictReader</code> 和 <code>csv.DictWriter</code>。</p>
<h3 id="3-读取CSV文件（使用DictReader）"><a href="#3-读取CSV文件（使用DictReader）" class="headerlink" title="(3)读取CSV文件（使用DictReader）"></a>(3) 读取 <code>CSV</code> 文件（使用 <code>DictReader</code>）</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件进行读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'dict_input.csv'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.DictReader(file)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历文件中的每一行</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row)  <span class="comment"># 打印每一行的数据</span></span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-写入CSV文件（使用DictWriter）"><a href="#4-写入CSV文件（使用DictWriter）" class="headerlink" title="(4)写入CSV文件（使用DictWriter）"></a><a name="maodian">(4) 写入 <code>CSV</code> 文件（使用 <code>DictWriter</code>）</a></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要写入的数据</span></span><br><span class="line">data = [</span><br><span class="line">    {<span class="string">'Name'</span>: <span class="string">'Alice'</span>, <span class="string">'Age'</span>: <span class="number">24</span>, <span class="string">'City'</span>: <span class="string">'New York'</span>},</span><br><span class="line">    {<span class="string">'Name'</span>: <span class="string">'Bob'</span>, <span class="string">'Age'</span>: <span class="number">27</span>, <span class="string">'City'</span>: <span class="string">'Los Angeles'</span>}</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件进行写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'dict_output.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">    writer = csv.DictWriter(file, fieldnames=[<span class="string">'Name'</span>, <span class="string">'Age'</span>, <span class="string">'City'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入表头</span></span><br><span class="line">    writer.writeheader()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">        writer.writerow(row)</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-关于参数newline"><a href="#5-关于参数newline" class="headerlink" title="(5)关于参数newline=''"></a>(5) 关于参数 <code>newline=''</code></h3><p>在 Python 中使用 <code>open()</code> 函数打开文件时，参数 <code>newline=''</code> 是用于指定文件在读取或写入时如何处理行终止符。这个参数在处理 CSV 文件时尤为重要，因为 CSV 文件的行分隔通常依赖于操作系统。</p>
<h4 id="行终止符"><a href="#行终止符" class="headerlink" title="行终止符"></a>行终止符</h4><ul>
<li><strong>Unix/Linux 系统</strong>：使用 <code>\n</code> 作为行终止符。</li>
<li><strong>Windows 系统</strong>：使用 <code>\r\n</code> 作为行终止符。</li>
<li><strong>Mac 系统（旧版，OS X 之前）</strong>：使用 <code>\r</code> 作为行终止符。</li>
</ul>
<h4 id="newline参数的作用"><a href="#newline参数的作用" class="headerlink" title="newline参数的作用"></a><code>newline</code> 参数的作用</h4><p>当使用 <code>open()</code> 函数打开文件进行读取或写入时，<code>newline</code> 参数决定了 Python 如何处理这些行终止符：</p>
<ul>
<li>**<code>newline=''</code>**：告诉 Python 忽略行终止符，将它们视为普通的字符。这通常是处理文本文件（如 CSV）时的首选设置，因为它可以防止在读取或写入过程中出现意外的行合并或分隔。</li>
<li>**<code>newline=None</code>**：默认值。告诉 Python 根据操作系统自动处理行终止符。这意味着在 Windows 上，Python 会将 <code>\r\n</code> 视为行终止符；在 Unix/Linux 和 Mac 上，<code>\n</code> 是行终止符。</li>
<li>**<code>newline='\n'</code>, <code>'\r'</code>, <code>'\r\n'</code>**：显式指定行终止符。这在某些特定情况下可能很有用，但通常不推荐，因为它会使代码依赖于特定的操作系统。</li>
</ul>
<h4 id="为什么在打开CSV文件时使用newline"><a href="#为什么在打开CSV文件时使用newline" class="headerlink" title="为什么在打开CSV文件时使用newline=''"></a>为什么在打开 CSV 文件时使用 <code>newline=''</code></h4><p>当你使用 <code>csv.reader</code> 或 <code>csv.writer</code> 处理 CSV 文件时，通常希望确保文件的行结构在读取和写入过程中保持不变。如果文件是在不同的操作系统上创建的，行终止符可能会不同，这可能会导致解析错误或数据不一致。</p>
<p>使用 <code>newline=''</code> 可以确保：</p>
<ul>
<li>无论文件是在哪个操作系统上创建的，Python 都会以一致的方式处理行终止符。</li>
<li>防止在读取 CSV 文件时，由于行终止符的处理不当而导致的数据行合并或拆分。</li>
<li>在写入 CSV 文件时，可以控制生成的行终止符，确保文件格式的一致性。</li>
</ul>
<p>这是一个好习惯，特别是在处理跨平台的文本文件时，可以避免很多与操作系统相关的兼容性问题。</p>
<h3 id="6-来个读写一起的栗子"><a href="#6-来个读写一起的栗子" class="headerlink" title="(6)来个读写一起的栗子"></a>(6) 来个读写一起的栗子</h3><ul>
<li><code>input.csv</code> 文件内容（其实就是 <a href="#maodian">(4) 写入 <code>CSV</code> 文件</a>的执行结果）：</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
<th>City</th>
</tr>
</thead>
<tbody><tr>
<td>Alice</td>
<td>24</td>
<td>New York</td>
</tr>
<tr>
<td>Bob</td>
<td>27</td>
<td>Los Angeles</td>
</tr>
</tbody></table>
<ul>
<li> 测试脚本栗子：根据 input.csv 内容，输出 output.csv</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_write_csv_file</span>(<span class="params">input_file_path, output_file_path</span>):</span><br><span class="line">    <span class="comment"># 打开文件进行读取</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">        reader = csv.DictReader(file)</span><br><span class="line">				</span><br><span class="line">        <span class="comment"># 输出字典</span></span><br><span class="line">        output_data = {}</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> file:</span><br><span class="line">            writer = csv.DictWriter(file, fieldnames=[<span class="string">'城市'</span>, <span class="string">'名字'</span>, <span class="string">'年龄'</span>, <span class="string">'分数'</span>])  </span><br><span class="line">            <span class="comment"># 遍历文件中的每一行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入表头['城市', '名字', '年龄', '分数']</span></span><br><span class="line">            writer.writeheader()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">                <span class="comment"># 添加一个默认为 0 的列--得分</span></span><br><span class="line">                output_data[<span class="string">'城市'</span>] = row[<span class="string">'City'</span>]</span><br><span class="line">                output_data[<span class="string">'名字'</span>] = row[<span class="string">'Name'</span>]</span><br><span class="line">                output_data[<span class="string">'年龄'</span>] = row[<span class="string">'Age'</span>]</span><br><span class="line">                output_data[<span class="string">'分数'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 写入行</span></span><br><span class="line">                writer.writerow(output_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    read_write_csv_file(<span class="string">'csv_files/input.csv'</span>, <span class="string">'csv_files/output.csv'</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>output.csv</code> 文件内容</li>
</ul>
<table>
<thead>
<tr>
<th>城市</th>
<th>名字</th>
<th>年龄</th>
<th>分数</th>
</tr>
</thead>
<tbody><tr>
<td> Alice</td>
<td>24</td>
<td>New York</td>
<td>0</td>
</tr>
<tr>
<td>Bob</td>
<td>27</td>
<td>Los Angeles</td>
<td>0</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>测试脚本</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>requirements 总结</title>
    <url>/2021/05/21/requirements%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在搭建 Liunx 服务器时，需要在新的 Python 环境中安装项目需要的包的依赖，一条一条 pip install 太慢，有没有可以批量安装方法？</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><p>百度后，方法如下：</p>
<p>在旧环境下执行:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></tbody></table></figure>

<p>执行后，会在当前项目下生成一个 requirements.txt 的文件，然后将该文件上传到新的环境项目下，在新环境下执行:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>

<p>有时执行上面命令会报错 (改错误是在 Jenkins 中执行 shell 时报错)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement request==1.0.117 (from -r requirements.txt (line 6)) (from versions: none)</span><br></pre></td></tr></tbody></table></figure>

<p>一般情况下是国外源的原因，将其临时替换为国内源：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>scrcpy 的安装与使用</title>
    <url>/2024/10/02/scrcpy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-scrcpy简介"><a href="#1-scrcpy简介" class="headerlink" title="1.scrcpy简介"></a>1.scrcpy 简介</h2><p>scacpy 是一个可以将 Android 设备投屏（电脑上可以操作）到电脑上的一个开源工具。</p>
<p>神器官方的项目地址为：<a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a> </p>
<p>无需 root 权限且支持多个平台，可以通过 USB 或者 WiFi 远程操作我们的 Adnroid 设备。</p>
<span id="more"></span>

<h2 id="2-scrcpy-安装（mac）"><a href="#2-scrcpy-安装（mac）" class="headerlink" title="2.scrcpy 安装（mac）"></a>2.scrcpy 安装（mac）</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">brew install scrcpy</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-手机开发者模式相关设置"><a href="#3-手机开发者模式相关设置" class="headerlink" title="3.手机开发者模式相关设置"></a>3. 手机开发者模式相关设置</h2><h3 id="（1）打开开发者模式"><a href="#（1）打开开发者模式" class="headerlink" title="（1）打开开发者模式"></a>（1）打开<code>开发者模式</code></h3><p><code>设置</code>➡️<code>关于手机</code>➡️3 次或者多次点击<code>版本号</code></p>
<h3 id="（2）打开USB调试"><a href="#（2）打开USB调试" class="headerlink" title="（2）打开USB调试"></a>（2）打开 <code>USB调试</code></h3><ul>
<li><p><code>设置</code>➡️<code>系统和更新</code>➡️<code>开发人员选项</code>➡️ <code>USB调试</code></p>
</li>
<li><p><code>设置</code>➡️<code>系统和更新</code>➡️<code>开发人员选项</code>➡️<code>“仅充电”模式下允许 ADB 调试</code></p>
</li>
</ul>
<h2 id="3-有线连接投屏"><a href="#3-有线连接投屏" class="headerlink" title="3.有线连接投屏"></a>3. 有线连接投屏</h2><h3 id="（1）数据线连接电脑"><a href="#（1）数据线连接电脑" class="headerlink" title="（1）数据线连接电脑"></a>（1）数据线连接电脑</h3><h3 id="（2）终端输入adb-devices"><a href="#（2）终端输入adb-devices" class="headerlink" title="（2）终端输入adb devices"></a>（2）终端输入 <code>adb devices</code></h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">XPLXC1XXXX0XXXXX	device</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）终端输入scrcpy"><a href="#（3）终端输入scrcpy" class="headerlink" title="（3）终端输入scrcpy"></a>（3）终端输入 <code>scrcpy</code></h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">scrcpy</span><br></pre></td></tr></tbody></table></figure>

<p>可以愉快的通过电脑操作手机，或者操作手机投屏展示了</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410022145121.png" alt="image-20241002214511072" style="zoom:50%;">

<h2 id="4-无线连接投屏"><a href="#4-无线连接投屏" class="headerlink" title="4.无线连接投屏"></a>4. 无线连接投屏</h2><h3 id="（1）查询手机-ADB-无线-IP"><a href="#（1）查询手机-ADB-无线-IP" class="headerlink" title="（1）查询手机 ADB 无线 IP"></a>（1）查询手机 ADB 无线 IP</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 终端输入，暂时不要拔掉连接线</span></span><br><span class="line">adb shell ip addr show wlan0</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">inet 192.168.1.155/24 brd 192.168.1.255 scope global wlan0</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）将USB连接模式切换到Wi-Fi连接模式"><a href="#（2）将USB连接模式切换到Wi-Fi连接模式" class="headerlink" title="（2）将USB连接模式切换到Wi-Fi连接模式"></a>（2）将 USB 连接模式切换到 Wi-Fi 连接模式</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过TCP的方式无线连接，一般用 5555 端口，暂时不要拔掉连接线</span></span><br><span class="line">adb tcpip 5555</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）通过无线方式连接"><a href="#（3）通过无线方式连接" class="headerlink" title="（3）通过无线方式连接"></a>（3）通过无线方式连接</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">adb connect 192.168.1.155:5555</span><br></pre></td></tr></tbody></table></figure>

<p>连接成功后提示</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">connected to 192.168.1.155:5555</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（4）终端输入scrcpy"><a href="#（4）终端输入scrcpy" class="headerlink" title="（4）终端输入scrcpy"></a>（4）终端输入 <code>scrcpy</code></h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">scrcpy</span><br></pre></td></tr></tbody></table></figure>

<p>可以脱离数据线，愉快的通过电脑操作手机，或者操作手机投屏展示了</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410022221723.png" alt="image-20241002222133687" style="zoom:50%;">

<h3 id="（5）多台设备（有线连接）如何使用"><a href="#（5）多台设备（有线连接）如何使用" class="headerlink" title="（5）多台设备（有线连接）如何使用"></a>（5）多台设备（有线连接）如何使用</h3><p>①adb 命令查看设备序列号，没有 adb 也可在设置 -&gt; 关于手机 -&gt; 状态信息中查看</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb 命令查看设备序列号，没有 adb 也可在设置-&gt;关于手机-&gt;状态信息中查看</span></span><br><span class="line">➜  ~ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">XXXXXXXXXXX1	device</span><br></pre></td></tr></tbody></table></figure>

<p>②使用命令 <code>scrcpy -s 设备序列号</code></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">scrcpy -s XXXXXXXXXXX1</span><br></pre></td></tr></tbody></table></figure>

<p>③重新打开一个终端，重复以上即可启动多台</p>
<h2 id="5-macOS下优雅的使用"><a href="#5-macOS下优雅的使用" class="headerlink" title="5.macOS下优雅的使用"></a>5.macOS 下优雅的使用</h2><ul>
<li>国光大佬的博客下面介绍了一种方法，可以更加优雅的使用 Scrcpy</li>
</ul>
<h3 id="（1）打开macOS的自动操作app"><a href="#（1）打开macOS的自动操作app" class="headerlink" title="（1）打开macOS的自动操作app"></a>（1）打开 macOS 的<code>自动操作</code> app</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410022327247.png" alt="image-20241002232743206"></p>
<h3 id="（2）选择应用程序"><a href="#（2）选择应用程序" class="headerlink" title="（2）选择应用程序"></a>（2）选择<code>应用程序</code></h3><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410022329451.png" alt="image-20241002232924410" style="zoom:50%;">

<h3 id="（3）找到运行shell脚本"><a href="#（3）找到运行shell脚本" class="headerlink" title="（3）找到运行shell脚本"></a>（3）找到<code>运行shell脚本</code></h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410022352746.png" alt="image-20241002235225714"></p>
<h3 id="（4）双击运行shell脚本，输入以下命令"><a href="#（4）双击运行shell脚本，输入以下命令" class="headerlink" title="（4）双击运行shell脚本，输入以下命令"></a>（4）双击<code>运行shell脚本</code>，输入以下命令</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb路径</span></span><br><span class="line">export PATH="$PATH:/Users/user1/Library/Android/sdk/platform-tools/"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scrcpy 安装位置，可以使用 brew list scrcpy 获取</span></span><br><span class="line">/opt/homebrew/Cellar/scrcpy/2.7/bin/scrcpy</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（5）点击运行，运行脚本"><a href="#（5）点击运行，运行脚本" class="headerlink" title="（5）点击运行，运行脚本"></a>（5）点击<code>运行</code>，运行脚本</h3><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410030054888.png" alt="image-20241003005437856" style="zoom:50%;">

<p>成功运行</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410030014795.png" alt="image-20241003001405757" style="zoom:50%;">

<h3 id="（6）保存为应用程序。"><a href="#（6）保存为应用程序。" class="headerlink" title="（6）保存为应用程序。"></a>（6）保存为<code>应用程序</code>。</h3><ul>
<li><code>Ctrl</code>+<code>s</code> 保存</li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410030018212.png" alt="image-20241003001849182"></p>
<h3 id="（7）替换应用程序icons"><a href="#（7）替换应用程序icons" class="headerlink" title="（7）替换应用程序icons"></a>（7）替换应用程序 icons</h3><p>①<code>应用程序</code>中右键该 app</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410030034345.png" alt="image-20241003003413316" style="zoom:50%;">

<p>②替换 icons</p>
<ul>
<li>找到 <code>scrcpy</code> 存放 <code>icons</code> 的位置 </li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">/opt/homebrew/Cellar/scrcpy/2.7/share/icons/hicolor/256x256/apps/</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>将 icon 拖入显示简介中的 icon 位置即可替换（截图中已经替换）</li>
</ul>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410030039799.png" alt="image-20241003003945745"></p>
<h2 id="6-批量将所有连接设备按照屏幕大小分开投屏"><a href="#6-批量将所有连接设备按照屏幕大小分开投屏" class="headerlink" title="6.批量将所有连接设备按照屏幕大小分开投屏"></a>6. 批量将所有连接设备按照屏幕大小分开投屏</h2><p>因为有多台测试机，一个一个启动太慢，所以就写了一个脚本，批量投屏，脚本如下（可以替换步骤 5 的脚本）：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># adb路径</span></span><br><span class="line"><span class="comment"># export PATH="$PATH:/Users/user1/Library/Android/sdk/platform-tools/"</span></span><br><span class="line"><span class="comment"># scrcpy 安装位置，可以使用 brew list scrcpy 获取</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/opt/homebrew/Cellar/scrcpy/2.7/bin/scrcpy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设备序列号数组</span></span><br><span class="line">serials=(</span><br><span class="line">    <span class="string">"XXXX1"</span></span><br><span class="line">    <span class="string">"XXXX2"</span></span><br><span class="line">    <span class="string">"XXXX3"</span></span><br><span class="line">    <span class="string">"XXXX4"</span></span><br><span class="line">    <span class="string">"XXXX5"</span></span><br><span class="line">    <span class="string">"XXXX6"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕宽度和高度</span></span><br><span class="line"><span class="comment"># screen_info=$(/usr/sbin/system_profiler SPDisplaysDataType | awk -F': ' '/Resolution/ {print $2 "x" $4}')</span></span><br><span class="line"><span class="comment"># screen_width=$(echo $screen_info | cut -d 'x' -f 1)</span></span><br><span class="line"><span class="comment"># screen_height=$(echo $screen_info | cut -d 'x' -f 2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动设置屏幕宽度和高度</span></span><br><span class="line">screen_width=1920</span><br><span class="line">screen_height=1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设备数量</span></span><br><span class="line">device_count=<span class="variable">${#serials[@]}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个窗口的宽度</span></span><br><span class="line">window_width=$(( screen_width / device_count ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化窗口的X坐标</span></span><br><span class="line">window_x=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印初始变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Screen Width: <span class="variable">$screen_width</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Screen Height: <span class="variable">$screen_height</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Device Count: <span class="variable">$device_count</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Window Width: <span class="variable">$window_width</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环创建窗口</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">${!serials[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 构建窗口标题</span></span><br><span class="line">  window_title=<span class="string">"测试机<span class="subst">$((i + 7)</span>)"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打印窗口的X坐标和标题</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Window X: <span class="variable">$window_x</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Window Title: <span class="variable">$window_title</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 构建scrcpy命令 --turn-screen-off</span></span><br><span class="line">  cmd=<span class="string">"scrcpy --window-x=<span class="variable">$window_x</span> --window-y=0 --window-width=320 --show-touches --window-title=\"<span class="variable">$window_title</span>\" -s \"<span class="variable">${serials[i]}</span>\""</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打印即将执行的scrcpy命令</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Executing: <span class="variable">$cmd</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 执行scrcpy命令</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="variable">$cmd</span> &amp;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 窗口的X坐标增加窗口宽度</span></span><br><span class="line">  window_x=$(( window_x + window_width ))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 暂停2秒</span></span><br><span class="line">  <span class="built_in">sleep</span> 2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>效果如下图：</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202412021432030.png" alt="image-20241202143200885"></p>
<h2 id="7-相关参考"><a href="#7-相关参考" class="headerlink" title="7.相关参考"></a>7. 相关参考</h2><p><a href="https://mobile.sqlsec.com/2/2/#">https://mobile.sqlsec.com/2/2/#</a></p>
<p><a href="https://blog.csdn.net/2402_82616859/article/details/139116819">https://blog.csdn.net/2402_82616859/article/details/139116819</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>scrcpy</tag>
      </tags>
  </entry>
  <entry>
    <title>博客重新装修删除冗余内容</title>
    <url>/2024/05/06/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E8%A3%85%E4%BF%AE%E5%88%A0%E9%99%A4%E5%86%97%E4%BD%99%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>最近有空闲时间，就重新装修了长时间没管过的博客，将以前的内容做了精简以及删除，后续会陆续将之前做的笔记整理后，写成 blog，大体做了如下改变。</p>
<span id="more"></span>

<h2 id="1-更改主题为-nexT。"><a href="#1-更改主题为-nexT。" class="headerlink" title="1.更改主题为 nexT。"></a>1. 更改主题为 nexT。</h2><h2 id="2-删除之前冗余内容。"><a href="#2-删除之前冗余内容。" class="headerlink" title="2.删除之前冗余内容。"></a>2. 删除之前冗余内容。</h2><h2 id="3-将一些以前学习的内容做个总结。"><a href="#3-将一些以前学习的内容做个总结。" class="headerlink" title="3.将一些以前学习的内容做个总结。"></a>3. 将一些以前学习的内容做个总结。</h2>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从 mac 系统传输文件或文件夹到 Ubuntu 系统</title>
    <url>/2021/05/24/%E5%A6%82%E4%BD%95%E4%BB%8Emac%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E5%88%B0Ubuntu%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>如何从 macOS 系统传输文件到 Ubuntu 系统？</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><p>使用 scp 命令，方法如下：</p>
<h3 id="2-1从本地复制到远程-macOS→Ubuntu"><a href="#2-1从本地复制到远程-macOS→Ubuntu" class="headerlink" title="2.1从本地复制到远程(macOS→Ubuntu)"></a>2.1 从本地复制到远程 (macOS→Ubuntu)</h3><p>传输文件 (需要输入远程用户密码)：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">XXXMacBook-Pro:~ user$ scp /Users/user/testScp.txt root@192.168.1.177:/home/user</span><br><span class="line">root@192.168.1.XXX<span class="string">'s password:</span></span><br><span class="line"><span class="string">testScp.txt                                                    100%    0     0.0KB/s   00:00</span></span><br></pre></td></tr></tbody></table></figure>

<p>传输目录：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">XXXMacBook-Pro:~ user$ scp -r /Users/user/testScp root@192.168.7.177:/home/user</span><br><span class="line">root@192.168.1.XXX<span class="string">'s password:</span></span><br><span class="line"><span class="string">test1.txt                                                      100%    0     0.0KB/s   00:00</span></span><br><span class="line"><span class="string">testScp.txt                                                    100%    0     0.0KB/s   00:00</span></span><br></pre></td></tr></tbody></table></figure>



<h3 id="2-2从远程复制到本地-Ubuntu→macOS"><a href="#2-2从远程复制到本地-Ubuntu→macOS" class="headerlink" title="2.2从远程复制到本地(Ubuntu→macOS)"></a>2.2 从远程复制到本地 (Ubuntu→macOS)</h3><p>传输文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">XXXMacBook-Pro:~ user$ scp root@192.168.1.XXX:/home/user/testScp.txt /Users/user/</span><br><span class="line">root@192.168.1.XXX<span class="string">'s passwoXXX</span></span><br><span class="line"><span class="string">testScp.txt                                                    100%    8     5.4KB/s   00:00</span></span><br></pre></td></tr></tbody></table></figure>

<p>传输目录：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">XXXMacBook-Pro:~ user$ scp -r root@192.168.1.XXX:/home/user/testScp/ /Users/user/</span><br><span class="line">root@192.168.1.XXX<span class="string">'s password:</span></span><br><span class="line"><span class="string">test1.txt                                                      100%   12     8.8KB/s   00:00</span></span><br><span class="line"><span class="string">testScp.txt                                                    100%   24    15.1KB/s   00:00</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p>参考于该网站 <a href="https://www.runoob.com/linux/linux-comm-scp.html">www.runoob.com</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>macos</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何去除 macOS12-13 更新小红点</title>
    <url>/2024/05/06/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4macOS12-13%E6%9B%B4%E6%96%B0%E5%B0%8F%E7%BA%A2%E7%82%B9/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>2 个小红点位置如下：</p>
<ul>
<li>设置→通用→软件更新→红点 1</li>
<li>Dock→红点 1</li>
</ul>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><h3 id="（1）关闭自动更新"><a href="#（1）关闭自动更新" class="headerlink" title="（1）关闭自动更新"></a>（1）关闭自动更新</h3><h3 id="（2）host添加相关内容"><a href="#（2）host添加相关内容" class="headerlink" title="（2）host添加相关内容"></a>（2）host 添加相关内容</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1 swdist.apple.com</span><br><span class="line">127.0.0.1 swscan.apple.com</span><br><span class="line">127.0.0.1 swcdn.apple.com </span><br><span class="line">127.0.0.1 gdmf.apple.com</span><br><span class="line">127.0.0.1 mesu.apple.com</span><br><span class="line">127.0.0.1 xp.apple.com</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）终端执行"><a href="#（3）终端执行" class="headerlink" title="（3）终端执行"></a>（3）终端执行</h3><p>先执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br><span class="line">Killall Dock</span><br></pre></td></tr></tbody></table></figure>

<p>如果无法去除，则执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">defaults delete com.apple.systempreferences AttentionPrefBundleIDs</span><br><span class="line">defaults delete com.apple.systempreferences DidShowPrefBundleIDs</span><br><span class="line">killall Dock</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://sysin.org/blog/disable-macos-ventura-update/">https://sysin.org/blog/disable-macos-ventura-update/</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将 excel 相同行快速标注相同颜色</title>
    <url>/2024/05/22/%E5%A6%82%E4%BD%95%E5%B0%86excel%E7%9B%B8%E5%90%8C%E8%A1%8C%E5%BF%AB%E9%80%9F%E6%A0%87%E6%B3%A8%E7%9B%B8%E5%90%8C%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>如下图所示，相同的公司标注相同的颜色，相邻的公司使用不同的颜色标注。</p>
<span id="more"></span>

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523105209093.png" alt="image-20240523105209093"></p>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><p>这里提供一种不是最优解的解决方法，前提是会使用函数 <code>vlookup</code> 和 <code>isodd</code></p>
<p>（0）将表格按照公司名字排序。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523115128818.png" alt="image-20240523115128818"></p>
<p>（1）将公司名这一列复制到一个新的 <code>sheet</code> 中，然后去重。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523115554033.png" alt="image-20240523115554033"></p>
<p>（2）在公司名右侧插入公司名编号。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523115823986.png" alt="image-20240523115823986"></p>
<p>（3）在原表中公司名后插入一列，使用 <code>vlookup</code> 公式去匹配公司名编号。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523120017323.png" alt="image-20240523120017323"></p>
<p>（4）在原表中公司名编号中插入一列，使用 <code>isodd</code> 公式计算是奇偶数。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523120250045.png" alt="image-20240523120250045"></p>
<p>（5）筛选奇偶数，分别标注颜色。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523120436033.png" alt="image-20240523120436033"></p>
<p>（6）删除辅助列即可</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523120606111.png" alt="image-20240523120606111"></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>将 hexo 部署到 centos 服务器上</title>
    <url>/2024/05/27/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1. 目标</h2><p>将 hexo 部署到 centos 服务器上。</p>
<span id="more"></span>

<h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2. 步骤</h2><h3 id="（1）centos-安装-git"><a href="#（1）centos-安装-git" class="headerlink" title="（1）centos 安装 git"></a>（1）centos 安装 <code>git</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install -y git</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）创建用户并配置仓库"><a href="#（2）创建用户并配置仓库" class="headerlink" title="（2）创建用户并配置仓库"></a>（2）创建用户并配置仓库</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">useradd git   <span class="comment"># 创建git用户</span></span><br><span class="line">passwd git    <span class="comment"># 设置密码</span></span><br><span class="line">su git        <span class="comment"># 切换用户， 这步很重要，避免文件权限的各种问题</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/</span><br><span class="line"><span class="built_in">mkdir</span> -p project/hexo-blog            <span class="comment"># 项目存在的真实目录,存放hexo静态文件</span></span><br><span class="line"><span class="built_in">mkdir</span> repos &amp;&amp; <span class="built_in">cd</span> repos               <span class="comment"># 放置git仓库的文件夹</span></span><br><span class="line">git init --bare hexo-blog-repo.git    <span class="comment"># 创建一个裸露的仓库</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）创建钩子函数"><a href="#（3）创建钩子函数" class="headerlink" title="（3）创建钩子函数"></a>（3）创建钩子函数</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog-repo.git/hooks   <span class="comment"># 进入hooks文件夹</span></span><br><span class="line">vim post-receive              <span class="comment"># 创建hook钩子函数文件(git提交时自动部署)，输入以下内容：</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/git/project/hexo-blog --git-dir=/home/git/repos/hexo-blog-repo.git checkout -f</span><br></pre></td></tr></tbody></table></figure>

<p>验证一下（也可以本地推送完在验证）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sh post-receive</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（4）生成-ssh文件夹并设置SSH密钥对"><a href="#（4）生成-ssh文件夹并设置SSH密钥对" class="headerlink" title="（4）生成.ssh文件夹并设置SSH密钥对"></a>（4）生成<code>.ssh</code> 文件夹并设置 SSH 密钥对</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh         </span><br><span class="line"><span class="built_in">mkdir</span> ~/.ssh      <span class="comment"># 若该文件夹不存在，则创建一个</span></span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh  <span class="comment"># 设置权限：为了安全起见，.ssh目录及其内容应该有严格的权限设置。通常，你应该只为所有者提供读写权限。</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"centos@mail.com"</span> <span class="comment"># 创建SSH密钥</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/id_rsa <span class="comment"># 生成密钥后，你应该为私钥文件id_rsa设置更严格的权限，以确保只有你可以读取它。</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（5）创建-authorized-keys-以及配置权限"><a href="#（5）创建-authorized-keys-以及配置权限" class="headerlink" title="（5）创建 authorized_keys 以及配置权限"></a>（5）创建 <code>authorized_keys</code> 以及配置权限</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/.ssh</span><br><span class="line"><span class="built_in">touch</span> authorized_keys      <span class="comment"># 存放客户端 ssh 公钥(id_rsa.pub)</span></span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys  <span class="comment"># 配置权限</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（6）建立-SSH信任关系"><a href="#（6）建立-SSH信任关系" class="headerlink" title="（6）建立 SSH信任关系"></a>（6）建立 <code>SSH</code> 信任关系</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub git@server_ip  <span class="comment"># </span></span><br><span class="line">ssh git@server_ip                             <span class="comment"># 测试能否登录</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="（7）安装Nginx"><a href="#（7）安装Nginx" class="headerlink" title="（7）安装Nginx"></a>（7）安装 <code>Nginx</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update</span><br><span class="line"><span class="built_in">sudo</span> yum install nginx</span><br><span class="line"><span class="built_in">sudo</span> systemctl start nginx      <span class="comment"># 安装完成后，启动Nginx服务。</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> nginx			<span class="comment"># 使Nginx服务在系统启动时自动启动。</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status nginx			<span class="comment">#	检查Nginx服务的状态，确认它是否正在运行。</span></span><br></pre></td></tr></tbody></table></figure>

<p>浏览器输入 ip 地址验证：</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240528180518391.png" alt="image-20240528180518391"></p>
<h3 id="（8）配置nginx"><a href="#（8）配置nginx" class="headerlink" title="（8）配置nginx"></a>（8）配置 <code>nginx</code></h3><p>如果你的配置文件位于 <code>/etc/nginx/conf.d/</code> 目录下，你可以编辑该目录下的默认配置文件或创建一个新的配置文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name tangxdou.com www.tangxdou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网站根目录</span></span><br><span class="line">    root /home/git/project/hexo-blog;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>重新加载 Nginx 的配置:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl reload nginx</span><br></pre></td></tr></tbody></table></figure>

<p>或者重启 Nginx 服务：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（9）配置-Hexo"><a href="#（9）配置-Hexo" class="headerlink" title="（9）配置 Hexo"></a>（9）配置 <code>Hexo</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@server_ip:/home/git/repos/hexo-blog-repo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（10）限制-git-用户的权限"><a href="#（10）限制-git-用户的权限" class="headerlink" title="（10）限制 git 用户的权限"></a>（10）限制 git 用户的权限</h3><p>为了安全起见，最好是将 git 用户的权限设置为只能执行 <code>git clone</code> , <code>git push</code> 命令等等：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells   <span class="comment"># 查看 git-shell 是否在登录方式里面</span></span><br><span class="line"><span class="built_in">which</span> git-shell   <span class="comment"># 查看是否安装</span></span><br><span class="line">vim /etc/shells</span><br></pre></td></tr></tbody></table></figure>

<p>添加第 2 步显示出来的路径，通常为 <code>/usr/bin/git-shell</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br><span class="line">/usr/bin/git-shell</span><br></pre></td></tr></tbody></table></figure>

<p>同时修改 /etc/passwd 文件内容，更改权限：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将原来的:</span></span><br><span class="line">git:x:1001:1001::/home/git:/bin/bash           <span class="comment"># 原来的</span></span><br><span class="line"><span class="comment"># 修改为:</span></span><br><span class="line">git:x:1001:1001::/home/git:/usr/bin/git-shell  <span class="comment"># 修改之后</span></span><br></pre></td></tr></tbody></table></figure>

<p>测试一下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh git@service:ip</span><br></pre></td></tr></tbody></table></figure>

<p>如果登录不上，就说明正常。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Last login: Mon May 27 17:11:51 2024 from 1xx.2xx.3xx.4xx</span><br><span class="line">fatal: Interactive git shell is not enabled.</span><br><span class="line">hint: ~/git-shell-commands should exist and have <span class="built_in">read</span> and execute access.</span><br><span class="line">Connection to 1xx.2xx.3xx.4xx closed.</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://blog.csdn.net/jiunian_2761/article/details/122908142">https://blog.csdn.net/jiunian_2761/article/details/122908142</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《小强升职记：时间管理故事书》读书笔记</title>
    <url>/2025/01/18/%E5%B0%8F%E5%BC%BA%E5%8D%87%E8%81%8C%E8%AE%B0%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%95%85%E4%BA%8B%E4%B9%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-书摘"><a href="#1-书摘" class="headerlink" title="1.书摘"></a>1. 书摘</h2><ol>
<li>时间管理，其实就是人生管理，是时间的管理方法或者说艺术，构成了不同的人生。</li>
<li>做事靠系统，不是靠感觉！当你真正建立起来一套系统，并运转良好的时候，你就可以获得解放。</li>
<li>我们应该在工作时尽量追求一种‘心静如水’的境界。</li>
<li>时间管理管理的是承诺，履行承诺的能力就是时间管理的能力。</li>
<li>自律即自由！</li>
</ol>
<span id="more"></span>

<h2 id="2-读书心得"><a href="#2-读书心得" class="headerlink" title="2.读书心得"></a>2. 读书心得</h2><p>读完《小强升职记》，我深受启发，仿佛打开了一扇时间管理的新大门。这本书以小强和老付的交流故事为载体，深入浅出地介绍了时间管理的方法和技巧，让我意识到时间管理并非遥不可及，而是切实可行且能改变生活的有力工具。</p>
<p>书中从寻找时间黑洞、明确价值观，到运用四象限法则、衣柜整理法等，为我们构建了一套完整的时间管理体系。它让我明白，只有先了解时间的去向，才能合理规划和利用时间。例如，通过记录时间日志，我开始审视自己的日常行为，发现原来很多时间都在无意义的琐事中悄然流逝。</p>
<p>在实际应用方面，四象限法则帮助我重新审视任务的优先级，使我不再盲目地被紧急事务牵着走，而是将更多精力投入到重要但不紧急的事务中，从根源上减少紧急情况的发生。衣柜整理法更是让我学会了如何有条不紊地处理各种事务，从捕捉杂事到明确意义、组织整理，再到深思和行动，每一个步骤都让我的工作和生活变得更加清晰有序。</p>
<p>同时，书中关于战胜拖延、养成习惯和让想法落地的内容也给我很大的鼓舞。我意识到拖延并非不可战胜，只要找到合适的方法，如番茄工作法，就能提高专注力和效率。培养习惯也需要技巧，要找到驱动力、及时奖励自己，并借助他人的力量。而让想法落地的过程，通过 S.M.A.R.T 法则、思维导图、甘特图和九宫格等工具，让我明白如何将模糊的想法转化为具体的目标和可行的计划。</p>
<p>总的来说，这本书不仅提供了实用的时间管理方法，更改变了我的思维方式和生活态度。我相信，只要将书中的方法持续应用到实践中，不断优化和调整，我一定能够像小强一样，实现从忙碌到高效的转变，更好地掌控自己的人生。</p>
<h2 id="3-知识积累"><a href="#3-知识积累" class="headerlink" title="3.知识积累"></a>3. 知识积累</h2><h3 id="（一）时间管理方法"><a href="#（一）时间管理方法" class="headerlink" title="（一）时间管理方法"></a>（一）时间管理方法</h3><h3 id="1️⃣四象限法则"><a href="#1️⃣四象限法则" class="headerlink" title="1️⃣四象限法则"></a>1️⃣四象限法则</h3><ul>
<li>将事情按照重要和紧急程度划分为四个象限：重要而且紧急、重要但不紧急、不重要但紧急、不重要而且不紧急。</li>
<li>处理原则：第一象限立即去做，但要尽量减少进入该象限的次数；第二象限有计划去做，是重点投入精力的象限；第三象限交给别人去做或委婉拒绝；第四象限尽量别去做。</li>
</ul>
<h3 id="2️⃣衣柜整理法"><a href="#2️⃣衣柜整理法" class="headerlink" title="2️⃣衣柜整理法"></a>2️⃣衣柜整理法</h3><ul>
<li>对应时间管理的五个流程：捕捉、明确意义、组织整理、深思、行动，形成一个开放式循环。</li>
<li>捕捉：把 “一切引起我们注意的事情” 都收集下来，放到头脑以外的地方，如使用工作篮、纸质记事簿、电子备忘录等工具，遵循捕捉工具越少越好、保证 5 秒钟进入录入状态、定期清空工具等原则。</li>
<li>明确意义：迅速分辨收集篮里的杂事，分为 “可以行动” 和 “不能行动” 两类，“不能行动” 的任务又分为垃圾、将来某时、参考资料三类，“可以行动” 的任务分为 2 分钟行动、项目、任务、行动、指派给别人完成的事、特定时间做的事六类。</li>
<li>组织整理：根据杂事的分类，将其放入相应的清单或日程表，如日程表存放特定时间要做的事情，将来清单管理较长时间后才执行的事情，行动清单是每天的主要清单，项目清单存放复杂项目相关内容。</li>
<li>深思：对清单进行深思有孵化杂事、产生灵感、提升高度等好处，可在每天下班和每周回顾两个时间段进行。</li>
<li>行动：根据四重标准（重要性、环境、时间、精力）选择最佳行动方案，同时要利用好 David Allen 提出的 “六个高度”（原则、愿景、目标、责任范围、任务、下一步行动）规划工作和人生。</li>
</ul>
<h3 id="（二）战胜拖延方法"><a href="#（二）战胜拖延方法" class="headerlink" title="（二）战胜拖延方法"></a>（二）战胜拖延方法</h3><h4 id="1️⃣番茄工作法"><a href="#1️⃣番茄工作法" class="headerlink" title="1️⃣番茄工作法"></a>1️⃣番茄工作法</h4><ul>
<li>选择一个明确、可立即执行的行动，倒计时 25 分钟作为一个番茄时间，预估完成行动需要吃掉几个番茄，在番茄时间内不间断工作。</li>
<li>每吃掉一个番茄休息 5 分钟，连续吃掉三个休息 15 分钟。</li>
<li>处理被打断问题：若被打断，先问自己 “这些事情必须现在做吗？”，根据答案决定是放入收集篮还是中断番茄时间去处理，也可根据实际情况调整番茄钟时间。</li>
</ul>
<h3 id="（三）养成习惯方法"><a href="#（三）养成习惯方法" class="headerlink" title="（三）养成习惯方法"></a>（三）养成习惯方法</h3><ul>
<li><p>培养习惯首先要找到驱动力，明确自己为什么要养成这个习惯，驱动力＞约束力。</p>
</li>
<li><p>再微不足道的成就都要大肆庆祝，给自己及时的奖励，赋予事情更多意义。</p>
</li>
<li><p>培养习惯不是一个人的事，可以借助社群或他人的力量，共同养成习惯。</p>
</li>
</ul>
<h3 id="（四）让想法落地方法"><a href="#（四）让想法落地方法" class="headerlink" title="（四）让想法落地方法"></a>（四）让想法落地方法</h3><ul>
<li><p>用 S.M.A.R.T 法则厘清目标，即目标要 Specific（明确）、Measurable（可衡量）、Attainable（可实现）、Relevant（相关）、Time - based（有截止期限）。</p>
</li>
<li><p>用思维导图梳理计划，通过三轮操作建立项目框架，第一轮写出创办社群需要考虑的因素，第二轮进行发散思维，第三轮做减法。</p>
</li>
<li><p>用甘特图掌控进度，确定项目的里程碑、任务、时间期限和负责人，可使甘特图具备进度跟踪功能。</p>
</li>
<li><p>用九宫格平衡人生，以心灵、健康、情感、心智、财务等需求为维度制定目标，中间格子可填个人价值观、使命和愿景，每个格子里的目标都可用思维导图和甘特图梳理和组织。</p>
</li>
</ul>
<h2 id="4-思维导图"><a href="#4-思维导图" class="headerlink" title="4.思维导图"></a>4. 思维导图</h2><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202501181603751.png" alt="image-20250118160328702"></p>
<h2 id="5-遗留问题"><a href="#5-遗留问题" class="headerlink" title="5.遗留问题"></a>5. 遗留问题</h2><p>（1）在实际应用四象限法则时，如何更准确地判断事务的重要程度和紧急程度，尤其是一些看似重要紧急程度不明显的任务？</p>
<p>（2）使用衣柜整理法时，如何确保在深思环节能够真正有效地对清单进行 “修剪” 和 “孵化”，避免流于形式？</p>
<p>（3）对于一些长期养成的拖延习惯，番茄工作法是否能完全解决问题，是否还需要结合其他方法进行综合治疗？</p>
<p>（4）在养成习惯的过程中，如何保持驱动力的持久性，避免因时间推移而动力不足？</p>
<p>（5）当多个目标同时存在时，如何利用九宫格更好地平衡各个目标之间的关系，确保不出现顾此失彼的情况？</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>reading-notes</tag>
      </tags>
  </entry>
  <entry>
    <title>测试计划模板</title>
    <url>/2019/07/11/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h1><h1 id="XXX-项目测试计划"><a href="#XXX-项目测试计划" class="headerlink" title="XXX 项目测试计划"></a><center>XXX 项目测试计划</center></h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1. 引言</h2><h3 id="1-1-编写目的"><a href="#1-1-编写目的" class="headerlink" title="1.1 编写目的"></a>1.1 编写目的</h3><p>根据需求文档，提炼测试功能点、制定测试策略、评估测试风险，预估编写测试用例、执行功能测试和回归测试的工作量，进行人员和进度安排。</p>
<span id="more"></span>

<h3 id="1-2-预期读者"><a href="#1-2-预期读者" class="headerlink" title="1.2 预期读者"></a>1.2 预期读者</h3><p>管鑫所项目经理、开发、产品、测试。</p>
<h3 id="1-3-参考资料"><a href="#1-3-参考资料" class="headerlink" title="1.3 参考资料"></a>1.3 参考资料</h3><p>需求文档</p>
<h2 id="2-测试范围"><a href="#2-测试范围" class="headerlink" title="2.测试范围"></a>2. 测试范围</h2><h2 id="3-测试策略"><a href="#3-测试策略" class="headerlink" title="3.测试策略"></a>3. 测试策略</h2><h3 id="3-1-UI-测试"><a href="#3-1-UI-测试" class="headerlink" title="3.1 UI 测试"></a>3.1 UI 测试</h3><h4 id="3-1-1-文案测试"><a href="#3-1-1-文案测试" class="headerlink" title="3.1.1 文案测试"></a>3.1.1 文案测试</h4><p>（1）字体<br>（2）字号<br>（3）格式<br>（4）规范</p>
<h4 id="3-1-2-图片测试"><a href="#3-1-2-图片测试" class="headerlink" title="3.1.2 图片测试"></a>3.1.2 图片测试</h4><p>（1）清晰<br>（2）尺寸<br>（3）配色<br>（4）风格</p>
<h4 id="3-1-3-布局测试"><a href="#3-1-3-布局测试" class="headerlink" title="3.1.3 布局测试"></a>3.1.3 布局测试</h4><p>（1）尺寸大小<br>（2）位置合理<br>（3）排序规律<br>（4）对齐方式</p>
<h4 id="3-1-4-控件测试"><a href="#3-1-4-控件测试" class="headerlink" title="3.1.4 控件测试"></a>3.1.4 控件测试</h4><p>（1）输入框<br>（2）按钮<br>（3）下拉菜单<br>（4）列表<br>   (5) 单选框<br>（6）复选框<br>（7）时间框<br>（8）左右选择框<br>（9）树形<br>（10）图标类检查<br>（11）文件类<br>（12）图片类<br>（13）URL 检查<br>（14）IP 输入框</p>
<h4 id="3-1-5-快捷键测试"><a href="#3-1-5-快捷键测试" class="headerlink" title="3.1.5 快捷键测试"></a>3.1.5 快捷键测试</h4><h3 id="3-2-功能测试策略"><a href="#3-2-功能测试策略" class="headerlink" title="3.2 功能测试策略"></a>3.2 功能测试策略</h3><p>具体见每个版本测试用例。</p>
<h3 id="3-3-系统兼容性测试"><a href="#3-3-系统兼容性测试" class="headerlink" title="3.3 系统兼容性测试"></a>3.3 系统兼容性测试</h3><h3 id="3-4-易用性测试"><a href="#3-4-易用性测试" class="headerlink" title="3.4 易用性测试"></a>3.4 易用性测试</h3><h3 id="3-5-安全性测试"><a href="#3-5-安全性测试" class="headerlink" title="3.5 安全性测试"></a>3.5 安全性测试</h3><h3 id="3-6-网络环境测试"><a href="#3-6-网络环境测试" class="headerlink" title="3.6 网络环境测试"></a>3.6 网络环境测试</h3><p>网络的影响会影响到用户的体验，一般遵守 258 原则是最好的。</p>
<h3 id="3-7-单元测试"><a href="#3-7-单元测试" class="headerlink" title="3.7 单元测试"></a>3.7 单元测试</h3><p>由开发人员完成。<br>3.3 性能测试<br>关键接口功能，简单做性能测试。</p>
<h2 id="4-测试资源"><a href="#4-测试资源" class="headerlink" title="4.测试资源"></a>4. 测试资源</h2><h3 id="4-1-测试人员"><a href="#4-1-测试人员" class="headerlink" title="4.1 测试人员"></a>4.1 测试人员</h3><h3 id="4-2-测试环境"><a href="#4-2-测试环境" class="headerlink" title="4.2 测试环境"></a>4.2 测试环境</h3><h3 id="4-3-测试工具"><a href="#4-3-测试工具" class="headerlink" title="4.3 测试工具"></a>4.3 测试工具</h3><h4 id="4-3-1-Bug-管理工具：bugfree"><a href="#4-3-1-Bug-管理工具：bugfree" class="headerlink" title="4.3.1 Bug 管理工具：bugfree"></a>4.3.1 Bug 管理工具：bugfree</h4><h4 id="4-3-2-postman"><a href="#4-3-2-postman" class="headerlink" title="4.3.2 postman"></a>4.3.2 postman</h4><p>前期测试呼叫系统，使用 postman 模拟相应的用户场景进行测试。</p>
<h4 id="4-3-3-IETester"><a href="#4-3-3-IETester" class="headerlink" title="4.3.3 IETester"></a>4.3.3 IETester</h4><p>测试 IE 浏览器的不同版本。</p>
<h4 id="4-3-4-Vbox-虚拟机"><a href="#4-3-4-Vbox-虚拟机" class="headerlink" title="4.3.4 Vbox 虚拟机"></a>4.3.4 Vbox 虚拟机</h4><h4 id="4-3-5-Jemter"><a href="#4-3-5-Jemter" class="headerlink" title="4.3.5 Jemter"></a>4.3.5 Jemter</h4><p>重要端口、步骤、流程做压力测试。</p>
<h2 id="5-进度安排"><a href="#5-进度安排" class="headerlink" title="5.进度安排"></a>5. 进度安排</h2><h3 id="5-1-测试进度及工作量估算"><a href="#5-1-测试进度及工作量估算" class="headerlink" title="5.1 测试进度及工作量估算"></a>5.1 测试进度及工作量估算</h3><p>根据周会原型确定周任务：<br>例如<br>任务 时间 执行人员 预计工作量 / 天<br>编写测试计划 2019-07-10 张三 1 天<br>编写测试用例 2019-07</p>
<p>根据具体的需求、开发计划估算具体的测试工作量。</p>
<h3 id="5-2-输出文档"><a href="#5-2-输出文档" class="headerlink" title="5.2 输出文档"></a>5.2 输出文档</h3><p>（1）测试计划<br>（2）测试用例（bugfree 中查看）<br>（3）测试数据（上传至 bugfree）<br>（4）测试报告</p>
<h2 id="6-发布标准"><a href="#6-发布标准" class="headerlink" title="6.发布标准"></a>6. 发布标准</h2><h3 id="6-1-测试完成标准"><a href="#6-1-测试完成标准" class="headerlink" title="6.1 测试完成标准"></a>6.1 测试完成标准</h3><h4 id="（1）完成所有测试类型。"><a href="#（1）完成所有测试类型。" class="headerlink" title="（1）完成所有测试类型。"></a>（1）完成所有测试类型。<br></h4><h4 id="（2）没有影响用户正常使用的-Bug。"><a href="#（2）没有影响用户正常使用的-Bug。" class="headerlink" title="（2）没有影响用户正常使用的 Bug。"></a>（2）没有影响用户正常使用的 Bug。<br></h4><h4 id="（3）bug-少于一定的数量（需要商定）"><a href="#（3）bug-少于一定的数量（需要商定）" class="headerlink" title="（3）bug 少于一定的数量（需要商定）"></a>（3）bug 少于一定的数量（需要商定）<br></h4><h4 id="（4）服务端性能满足设计目标。"><a href="#（4）服务端性能满足设计目标。" class="headerlink" title="（4）服务端性能满足设计目标。"></a>（4）服务端性能满足设计目标。<br></h4><h3 id="6-2-产品发布标准"><a href="#6-2-产品发布标准" class="headerlink" title="6.2 产品发布标准"></a>6.2 产品发布标准</h3><h4 id="（1）所有产品需求都已完成。"><a href="#（1）所有产品需求都已完成。" class="headerlink" title="（1）所有产品需求都已完成。"></a>（1）所有产品需求都已完成。<br></h4><h4 id="（2）遗留-bug-经过风险评估。"><a href="#（2）遗留-bug-经过风险评估。" class="headerlink" title="（2）遗留 bug 经过风险评估。"></a>（2）遗留 bug 经过风险评估。<br></h4><h4 id="（3）有完备的流程文档。"><a href="#（3）有完备的流程文档。" class="headerlink" title="（3）有完备的流程文档。"></a>（3）有完备的流程文档。<br></h4><h2 id="7-风险说明"><a href="#7-风险说明" class="headerlink" title="7.风险说明"></a>7. 风险说明</h2><h2 id="8-应急措施"><a href="#8-应急措施" class="headerlink" title="8.应急措施"></a>8. 应急措施</h2>]]></content>
      <categories>
        <category>测试文档</category>
      </categories>
      <tags>
        <tag>documents</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖替换快到期证书</title>
    <url>/2024/10/08/%E7%BE%A4%E6%99%96%E6%9B%BF%E6%8D%A2%E5%BF%AB%E5%88%B0%E6%9C%9F%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>由于免费的证书，现在有效期只有 3 个月，这意味着 1 年你要替换 4 次证书，记录一下，下次方便。</p>
<span id="more"></span>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2. 解决方法</h2><h3 id="（0）下载证书，类型选择“Nginx”"><a href="#（0）下载证书，类型选择“Nginx”" class="headerlink" title="（0）下载证书，类型选择“Nginx”"></a>（0）下载证书，类型选择 “Nginx”</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081102614.jpg" alt="0 选择Nginx"></p>
<h3 id="（1）打开控制面板"><a href="#（1）打开控制面板" class="headerlink" title="（1）打开控制面板"></a>（1）打开控制面板</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081056134.jpg" alt="1.打开控制面板"></p>
<h3 id="（2）打开网络"><a href="#（2）打开网络" class="headerlink" title="（2）打开网络"></a>（2）打开网络</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081057607.jpg" alt="2 打开网络"></p>
<h3 id="（3）打开安全性"><a href="#（3）打开安全性" class="headerlink" title="（3）打开安全性"></a>（3）打开安全性</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081058342.jpg" alt="2 打开安全性"></p>
<h3 id="（4）打开“新增”页面"><a href="#（4）打开“新增”页面" class="headerlink" title="（4）打开“新增”页面"></a>（4）打开 “新增” 页面</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081108484.png" alt="image-20241008110800451"></p>
<h3 id="（5）选择“替换已有证书”"><a href="#（5）选择“替换已有证书”" class="headerlink" title="（5）选择“替换已有证书”"></a>（5）选择 “替换已有证书”</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081108599.png" alt="image-20241008110859574"></p>
<h3 id="（6）选择“导入证书”"><a href="#（6）选择“导入证书”" class="headerlink" title="（6）选择“导入证书”"></a>（6）选择 “导入证书”</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081102182.jpg" alt="5.选择导入证书"></p>
<h3 id="（7）在相应位置选择相应的文件，点击“确定”"><a href="#（7）在相应位置选择相应的文件，点击“确定”" class="headerlink" title="（7）在相应位置选择相应的文件，点击“确定”"></a>（7）在相应位置选择相应的文件，点击 “确定”</h3><p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410081110276.png" alt="image-20241008111026250"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>synology</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Jenkins 插件安装失败 - 插件下载慢的问题</title>
    <url>/2021/05/25/%E8%A7%A3%E5%86%B3Jenkins%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5-%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在安装 Jenkins 的过程中，插件总是安装失败或者下载很慢。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>安装源为国外的网站，所以下载速度慢。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>直接把源换为国内的镜像站，步骤如下：</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2021-05-25_15-15-12.png" alt="p1"></p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/Xnip2021-05-25_15-20-26.png" alt="p2"></p>
<p>清华大学镜像站:</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Mac 突然黑屏然后出现登录界面的问题</title>
    <url>/2024/05/06/%E8%A7%A3%E5%86%B3Mac%E7%AA%81%E7%84%B6%E9%BB%91%E5%B1%8F%E7%84%B6%E5%90%8E%E5%87%BA%E7%8E%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>macOS 13 Ventura 后，经常出现下面的问题：</p>
<span id="more"></span>

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240506165320062.png" alt="image-20240506165320062"></p>
<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>未知</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>关闭了 2 个选项，不要全屏应用</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240506170557285.png" alt="image-20240506170557285"></p>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://github.com/tobemaster56/draft/issues/108">https://github.com/tobemaster56/draft/issues/108</a></p>
<p><a href="https://developer.apple.com/forums/thread/719033?answerId=735928022#735928022">https://developer.apple.com/forums/thread/719033?answerId=735928022#735928022</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 SQLServer 执行超时已过期完成操作之前已超时或服务器未响应</title>
    <url>/2024/06/26/%E8%A7%A3%E5%86%B3SQLServer%E6%89%A7%E8%A1%8C%E8%B6%85%E6%97%B6%E5%B7%B2%E8%BF%87%E6%9C%9F%E5%AE%8C%E6%88%90%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%89%8D%E5%B7%B2%E8%B6%85%E6%97%B6%E6%88%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>还原 SQL Server 数据库时，报错，信息：执行超时已过期。完成操作之前已超时或服务器未响应。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>数据库太大连接超时。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><h4 id="（1）执行以下"><a href="#（1）执行以下" class="headerlink" title="（1）执行以下"></a>（1）执行以下</h4>  <figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_updatestats;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（2）收缩数据库，收缩日志。"><a href="#（2）收缩数据库，收缩日志。" class="headerlink" title="（2）收缩数据库，收缩日志。"></a>（2）收缩数据库，收缩日志。</h4><h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://blog.csdn.net/u012835032/article/details/110437581">https://blog.csdn.net/u012835032/article/details/110437581</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sqlserver</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 appium 报错 java.lang.SecurityException - Permission Denial- starting Intent 的问题</title>
    <url>/2024/07/27/%E8%A7%A3%E5%86%B3appium%E6%8A%A5%E9%94%99java-lang-SecurityException%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在使用 appium 时，出现以下问题：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN <span class="built_in">cat</span>=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.dreamfish.com.autocalc/.MainActivity } from null (pid=9251, uid=2000) not exported from uid 10053</span><br><span class="line">	at com.android.server.am.ActivityStackSupervisor.checkStartAnyActivityPermission(ActivityStackSupervisor.java:1779)</span><br><span class="line">	at com.android.server.am.ActivityStarter.startActivity(ActivityStarter.java:725)</span><br><span class="line">	at com.android.server.am.ActivityStarter.startActivity(ActivityStarter.java:551)</span><br><span class="line">	at com.android.server.am.ActivityStarter.startActivityMayWait(ActivityStarter.java:1156)</span><br><span class="line">	at com.android.server.am.ActivityStarter.execute(ActivityStarter.java:490)</span><br></pre></td></tr></tbody></table></figure>



<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>出现这样的错误一定是因为当前的 appActivity 设置的不是 app 首次进入的 appActivity.</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>（1）首先获取该 <code>App</code> 的包名</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb shell dumpsys window | grep mFocusedApp</span><br><span class="line">    mFocusedApp=Token{2e61d6 ActivityRecord{a39b1f1 u0 com.dreamfish.com.autocalc/.MainActivity t32}}</span><br><span class="line">    mFocusedApp=AppWindowToken{7130c57 token=Token{2e61d6 ActivityRecord{a39b1f1 u0 com.dreamfish.com.autocalc/.MainActivity t32}}}</span><br></pre></td></tr></tbody></table></figure>

<p>（2）通过 monkey 命令找到 <code>cmp=</code> 后面的 <code>activity</code>，本列中的 <code>activity</code> 为<code>.LauncherActivity</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ adb shell monkey -p com.dreamfish.com.autocalc -v 1 | grep cmp=</span><br><span class="line">args: [-p, com.dreamfish.com.autocalc, -v, 1]</span><br><span class="line"> arg: <span class="string">"-p"</span></span><br><span class="line"> arg: <span class="string">"com.dreamfish.com.autocalc"</span></span><br><span class="line"> arg: <span class="string">"-v"</span></span><br><span class="line"> arg: <span class="string">"1"</span></span><br><span class="line">data=<span class="string">"com.dreamfish.com.autocalc"</span></span><br><span class="line">    // Allowing start of Intent { act=android.intent.action.MAIN <span class="built_in">cat</span>=[android.intent.category.LAUNCHER] cmp=com.dreamfish.com.autocalc/.LauncherActivity } <span class="keyword">in</span> package com.dreamfish.com.autocalc</span><br></pre></td></tr></tbody></table></figure>



<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p>代码参考于以下博客，自己做了相关调整：</p>
<p><a href="https://blog.csdn.net/For_if_while/article/details/122946460">https://blog.csdn.net/For_if_while/article/details/122946460</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>appium</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 gitea 报错初始 URL 和访问 URL 不同的问题</title>
    <url>/2024/07/22/%E8%A7%A3%E5%86%B3gitea%E6%8A%A5%E9%94%99%E5%88%9D%E5%A7%8BURL%E5%92%8C%E8%AE%BF%E9%97%AEURL%E4%B8%8D%E5%90%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>Your ROOT_URL in app.ini is <code>https://192.168.1.11:1234/</code> but you are visiting <code>https://192.168.1.12:1234/</code> You should set ROOT_URL correctly, otherwise the web may not work correctly.</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>翻译可知，初始化的域名和访问的域名不一致，可能会导致问题。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>因为 gitea 是群晖的套件，所以要找到配置文件，然后修改。步骤如下：</p>
<p>(1) 登录群晖 (DMS 版本：DSM 6.2.3-25426 Update 3)→终端机和 SNMP→启动 Telnet 功能和启动 SSH 功能→应用。</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240722163031974.png" alt="image-20240722163031974"></p>
<p>(2) ssh user@ip_address，输入密码。<br>(3) 进入目录 /var/packages/gitea/var</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/packages/gitea/var</span><br></pre></td></tr></tbody></table></figure>

<p>(4) 打开 conf.ini 文件，需要用户 root 权限。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi conf.ini</span><br></pre></td></tr></tbody></table></figure>

<p>修改 [server] 下的 ROOT_URL 为现在的访问地址</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">LFS_CONTENT_PATH</span> = /xxx/xxx/xxx</span><br><span class="line"><span class="attr">SSH_DOMAIN</span>       = <span class="number">192.168</span>.xx.xx</span><br><span class="line"><span class="attr">DOMAIN</span>           = <span class="number">192.168</span>.xx.xx</span><br><span class="line"><span class="attr">ROOT_URL</span>         = https://xxx.xxx.xxx:xxx/</span><br><span class="line"><span class="attr">LOCAL_ROOT_URL</span>   = http://localhost:xxx/</span><br><span class="line"><span class="attr">HTTP_PORT</span>        = xxx</span><br><span class="line"><span class="attr">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span>         = <span class="number">22</span></span><br><span class="line"><span class="attr">LFS_START_SERVER</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">LFS_JWT_SECRET</span>   = xxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"><span class="attr">OFFLINE_MODE</span>     = <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>(5) 重启（停用→启用）</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240722163415690.png" alt="image-20240722163415690"></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>synology</tag>
        <tag>gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 hexoblog 标签点击没有响应的问题</title>
    <url>/2024/05/23/%E8%A7%A3%E5%86%B3hexoblog%E6%A0%87%E7%AD%BE%E7%82%B9%E5%87%BB%E6%B2%A1%E6%9C%89%E5%93%8D%E5%BA%94%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>点击博客标签页面里面的标签，没有反应。</p>
<span id="more"></span>

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/image-20240523160533021.png" alt="image-20240523160533021"></p>
<p>在本地测试，又没有问题。</p>
<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>发现只有之前标签页面由之前的大写，改为小写的这些标签进不去。如原来标签叫 Hackintosh，为了标签的统一美观（其实就是强迫症），后面给改成 hackintosh。上 github 看了下，所有的内容都在 Hackintosh 中存储，而链接统一为小写。</p>
<figure class="highlight http"><table><tbody><tr><td class="code"><pre><span class="line">https://www.zhangzhongchuan.top/tags/hackintosh/</span><br></pre></td></tr></tbody></table></figure>

<p>将 hackintosh 改为大写，访问成功。</p>
<figure class="highlight http"><table><tbody><tr><td class="code"><pre><span class="line">https://www.zhangzhongchuan.top/tags/Hackintosh/</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>（1）进入博客项目的 <em>.deploy_git</em> 文件夹，修改 <em>.git</em> 下的 <em>config</em> 文件，将忽略大小配置写改为 false</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ignorecase=<span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>（2）删除博客项目中 <em>.deploy_git</em> 文件夹下所有文件，并 push 到 GitHub 上：（如果不清空其实也可以，就是 github 上有 2 个文件夹如 <code>Hackintosh</code> 和 <code>hackintosh</code>）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .deploy_git</span><br><span class="line">git <span class="built_in">rm</span> -rf *</span><br><span class="line">git commit -m <span class="string">'clean all file'</span></span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure>

<p>(3) 使用 hexo 再次生成文件并部署：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></tbody></table></figure>



<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p>参考于该博客</p>
<p><a href="https://metric-h.github.io/2021/03/30/hexo-da-xiao-xie-wen-ti/">https://metric-h.github.io/2021/03/30/hexo-da-xiao-xie-wen-ti/</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 hexo 部署出现 Error-ENOTEMPTY 的问题</title>
    <url>/2021/05/21/%E8%A7%A3%E5%86%B3hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0Error-ENOTEMPTY%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在 Terminal 执行 hexo deploy 后，报错如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">FATAL {</span><br><span class="line">  err: [Error: ENOTEMPTY: directory not empty, <span class="built_in">rmdir</span> <span class="string">'/Users/XXX/XXXX/XXXX/.deploy_git/page'</span>] {</span><br><span class="line">    errno: -66,</span><br><span class="line">    code: <span class="string">'ENOTEMPTY'</span>,</span><br><span class="line">    syscall: <span class="string">'rmdir'</span>,</span><br><span class="line">    path: <span class="string">'/Users/XXX/XXXX/XXXX/.deploy_git/page'</span></span><br><span class="line">  } </span><br><span class="line">}  Something<span class="string">'s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>翻译可知，/Users/XXX/XXXX/XXXX/.deploy_git/page，这个文件夹需要为空，进入该目录，发现原本就是空的，未知原因。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>直接删除 / Users/XXX/XXXX/XXXX/.deploy_git/ 这个文件夹，然后直接在 Terminal 执行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>然后部署成功。</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 jmeter 启动时报错 Error VM option &#39;UseG1GC&#39; is experimental 问题</title>
    <url>/2024/10/13/%E8%A7%A3%E5%86%B3jmeter%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99Error-VM-optionUseG1GC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>新电脑安装最新 <code>jmeter-5.6.3</code> 时报错如下：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ /Users/user1/Jmeter/apache-jmeter-5.6.3/bin/jmeter ; <span class="built_in">exit</span>;</span><br><span class="line">Error: VM option <span class="string">'UseG1GC'</span> is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">Saving session...completed.</span><br><span class="line"></span><br><span class="line">[进程已完成]</span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>出现这个错误通常是因为 Java 虚拟机（JVM）尝试使用了一个实验性的 GC（垃圾收集）选项 <code>UseG1GC</code>，而这个选项需要通过 <code>-XX:+UnlockExperimentalVMOptions</code> 来启用。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>总体思路：直接注释调这行配置。</p>
<p>（1）到 <code>jmeter</code> 的安装目录 下的 <code>bin</code> 下，找到 <code>jmeter</code> 文件（这个文件就是没有扩展名的那个启动文件）</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410130033809.png" alt="image-20241013003324709"></p>
<p>（2）搜索<code>: "${GC_ALGO:="-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20"}"</code>，定位，注释</p>
<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410130035988.png" alt="image-20241013003512949"></p>
<p>（3）保存后，重新双击 <code>jmeter</code>，正常启动。</p>
<img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/202410130037583.png" alt="image-20241013003706554" style="zoom:50%;">

<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 mac 上用 SourceTree 克隆 git 上的项目时长时间 clone 不下的问题</title>
    <url>/2024/10/02/%E8%A7%A3%E5%86%B3mac%E4%B8%8A%E7%94%A8SourceTree%E5%85%8B%E9%9A%86git%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%95%BF%E6%97%B6%E9%97%B4clone%E4%B8%8D%E4%B8%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>IOS 开发推荐了 <code>Sourcetree</code>, 但是在 clone 时，发现进度条几乎满了，就是 clone 不下来。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>未知，按照其他人的方法试了下，就成功了，记录系下，以备下次。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>在终端输入以下指令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/local/git  <span class="comment"># 确保上级目录存在，不然就 sudo mkdir -p /usr/local/git</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/local/git/share</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/local/git/share/git-core</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/local/git/share/git-core/templates</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 755 /usr/local/git/share/git-core/templates</span><br></pre></td></tr></tbody></table></figure>



<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://blog.csdn.net/weixin_50990189/article/details/123617064">https://blog.csdn.net/weixin_50990189/article/details/123617064</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 中无法删除启动台的空白文件夹</title>
    <url>/2024/05/09/%E8%A7%A3%E5%86%B3macOS%E4%B8%AD%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E5%90%AF%E5%8A%A8%E5%8F%B0%E7%9A%84%E7%A9%BA%E7%99%BD%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>今天下载了 Ryujinx，然后启动台自动把国际象棋 Ryujinx 放到了一个文件夹里面，然后手动拖出来之后，空文件夹没有消失，拖动其他图标进去后图标直接消失不见了，然后出现了一个虚线型的文件夹图标，图标可以显示，然后打开文件夹图标消失了，也无法拖出 App 图标。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>macos12/13 系统 bug。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>（1）在终端中输入以下，然后回车</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">open getconf DARWIN_USER_DIR</span><br></pre></td></tr></tbody></table></figure>

<p>（2）然后删除 com.apple.dock.launchpad 文件夹</p>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://discussionschinese.apple.com/thread/253648900?answerId=256835759322&amp;sortBy=best#256835759322">https://discussionschinese.apple.com/thread/253648900?answerId=256835759322&amp;sortBy=best#256835759322</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 mac 系统安装软件报错 - 文件已损坏</title>
    <url>/2024/10/02/%E8%A7%A3%E5%86%B3mac%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%8A%A5%E9%94%99-%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在 macos 上安装 app 时提示，“文件已损坏，您应该将它移到废纸篓”。</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>安装完软件后，有时打开软件会提示软件无法打开，或者提示文件已损坏。通常这种情况，并非是你下载的文件真的损坏了，而是 mac 系统为了安全性，非应用商店下载的软件进行的限制。</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><h3 id="（1）允许任何来源的应用运行："><a href="#（1）允许任何来源的应用运行：" class="headerlink" title="（1）允许任何来源的应用运行："></a>（1）<strong>允许任何来源的应用运行</strong>：</h3><ul>
<li><p>打开终端（Terminal.app），输入以下命令并回车：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>输入开机密码，使 Mac 允许安装第三方来源的应用。</p>
</li>
</ul>
<h3 id="（2）移除应用的安全隔离属性："><a href="#（2）移除应用的安全隔离属性：" class="headerlink" title="（2）移除应用的安全隔离属性："></a>（2）<strong>移除应用的安全隔离属性</strong>：</h3><ul>
<li><p>打开终端，输入以下命令并回车（将 / Applications/xxxx.app 替换为实际的 App 路径）：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine /Applications/xxxx.app</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>可以通过将 App 拖入终端来自动填充路径。</p>
</li>
</ul>
<h3 id="（3）重新签名："><a href="#（3）重新签名：" class="headerlink" title="（3）重新签名："></a>（3）<strong>重新签名</strong>：</h3><ul>
<li><p>如果软件因证书问题无法打开，可以尝试重新签名。首先安装 Command Line Tools for Xcode，然后在终端执行以下命令（将 / Applications/name.app 替换为实际的 App 路径）：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">codesign --force --deep --sign - /Applications/name.app</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="（4）覆盖恶意软件保护："><a href="#（4）覆盖恶意软件保护：" class="headerlink" title="（4）覆盖恶意软件保护："></a>（4）<strong>覆盖恶意软件保护</strong>：</h3><ul>
<li>如果出现提示 “应用程序将对您的电脑造成伤害”，可以尝试覆盖恶意软件保护。在访达中找到应用程序，右键选择 “显示简介”，勾选 “覆盖恶意软件保护”。</li>
</ul>
<h3 id="（5）检查系统兼容性："><a href="#（5）检查系统兼容性：" class="headerlink" title="（5）检查系统兼容性："></a>（5）<strong>检查系统兼容性</strong>：</h3><ul>
<li>如果以上方法都无法解决问题，可能是软件与当前系统不兼容。可以尝试下载软件的其他版本或联系软件开发商获取支持。</li>
</ul>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://www.jianshu.com/p/92cfd836a1e6">https://www.jianshu.com/p/92cfd836a1e6</a></p>
<p><a href="https://blog.csdn.net/weixin_60605738/article/details/138607675">https://blog.csdn.net/weixin_60605738/article/details/138607675</a></p>
<p><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>解决使用 excel 打开 csv 文件时出现乱码的问题</title>
    <url>/2020/06/11/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8excel%E6%89%93%E5%BC%80csv%E6%96%87%E4%BB%B6%E6%97%B6%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>使用 excel 打开 csv 文件时出现乱码</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>excel 默认识别的是带 BOM 格式的 csv 文档，而打开纯 UTF-8 的文件时，没有 BOM 的头，也就是第一行，所以打开是乱码。(开头多了一串字符”\ufeff”)</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>将”utf-8” 格式转换为”utf-8 with BOM”，python 中这个带 BOM 格式的叫做 UTF-8-SIG，都是 UTF-8 带签名的意思。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from subFunc_tools import *</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_folders_files</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回 "文件夹" 和 "文件" 名字</span></span><br><span class="line"><span class="string">    :param path: "文件夹"和"文件"所在的路径</span></span><br><span class="line"><span class="string">    :return:  (list_folders, list_files)</span></span><br><span class="line"><span class="string">            :list_folders: 文件夹</span></span><br><span class="line"><span class="string">            :list_files: 文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    list_folders = []</span><br><span class="line">    list_files = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            list_folders.append(file)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_files.append(file)</span><br><span class="line">    <span class="keyword">return</span> (list_folders, list_files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">file, in_enc=<span class="string">"GBK"</span>, out_enc=<span class="string">"UTF-8"</span></span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该程序用于将目录下的文件从指定格式转换到指定格式，默认的是GBK转到utf-8</span></span><br><span class="line"><span class="string">    :param file:    文件路径</span></span><br><span class="line"><span class="string">    :param in_enc:  输入文件格式</span></span><br><span class="line"><span class="string">    :param out_enc: 输出文件格式</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    in_enc = in_enc.upper()</span><br><span class="line">    out_enc = out_enc.upper()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"convert [ "</span> + file.split(<span class="string">'\\'</span>)[-<span class="number">1</span>] + <span class="string">" ].....From "</span> + in_enc + <span class="string">" --&gt; "</span> + out_enc)</span><br><span class="line">        f = codecs.<span class="built_in">open</span>(file, <span class="string">'r'</span>, in_enc)</span><br><span class="line">        new_content = f.read()</span><br><span class="line">        codecs.<span class="built_in">open</span>(file, <span class="string">'w'</span>, out_enc).write(new_content)</span><br><span class="line">    <span class="comment"># print (f.read())</span></span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I/O error: {0}"</span>.<span class="built_in">format</span>(err))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将路径下面的所有文件，从原来的格式变为UTF-8的格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = <span class="string">r'G:\desktop\Convert-UTF8'</span></span><br><span class="line"></span><br><span class="line">    (list_folders, list_files) = list_folders_files(path)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Path: "</span> + path)</span><br><span class="line">    <span class="keyword">for</span> fileName <span class="keyword">in</span> list_files:</span><br><span class="line">        filePath = path + <span class="string">'\\'</span> + fileName</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filePath, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            codeType = chardet.detect(data)[<span class="string">'encoding'</span>]</span><br><span class="line">            convert(filePath, codeType, <span class="string">'UTF-8-SIG'</span>)</span><br></pre></td></tr></tbody></table></figure>



<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p>代码参考于以下博客，自己做了相关调整：</p>
<p><a href="https://www.cnblogs.com/monster-yher/p/13418600.html">https://www.cnblogs.com/monster-yher/p/13418600.html</a></p>
]]></content>
      <categories>
        <category>测试脚本</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决使用 chrome-inspect-devices 页面空白问题</title>
    <url>/2024/10/02/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8chrome-inspect-devices%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>在使用 chrome://inspect/#devices，页面空白</p>
<span id="more"></span>

<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>需要科学上网</p>
<h2 id="3-使用条件"><a href="#3-使用条件" class="headerlink" title="3.使用条件"></a>3. 使用条件</h2><h3 id="（1）能够访问google-com"><a href="#（1）能够访问google-com" class="headerlink" title="（1）能够访问google.com"></a>（1）能够访问 google.com</h3><h3 id="（2）手机开启usb调试模式"><a href="#（2）手机开启usb调试模式" class="headerlink" title="（2）手机开启usb调试模式"></a>（2）手机开启 usb 调试模式</h3><h3 id="（3）允许电脑访问手机"><a href="#（3）允许电脑访问手机" class="headerlink" title="（3）允许电脑访问手机"></a>（3）允许电脑访问手机</h3><h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://github.com/HuarenYu/note/issues/1">https://github.com/HuarenYu/note/issues/1</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>解决新版本 MacOS 下 Sublime Text4 package control 无法加载问题</title>
    <url>/2024/05/24/%E8%A7%A3%E5%86%B3%E6%96%B0%E7%89%88%E6%9C%ACMacOS%E4%B8%8BSublimeText4packagecontrol%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>cmd + shift + p 输入 install package 有对应菜单选项，没反应。</p>
<span id="more"></span>

<p><img src="https://zpic-bucket.oss-cn-chengdu.aliyuncs.com/blogImages/v2-dbc8c543da37272a241ce224680683fb_1440w.webp" alt="img"></p>
<p>已经安装好了，所以图也借用了。</p>
<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>主要原因是旧版本的 package control 插件依赖 OpenSSL 1.1，但是新版本的 macos 已经将 openssl 升级到了 3.1.4</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>（1）下载 beta 版本的 package control 插件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/wbond/package_control/releases/download/4.0.0-beta8/Package.Control.sublime-package</span><br></pre></td></tr></tbody></table></figure>

<p>（2）从终端打开插件安装目录</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">open ~/Library/Application\ Support/Sublime\ Text/Installed\ Packages</span><br></pre></td></tr></tbody></table></figure>



<p>（3）将文件名 Package.Control.sublime-package 修改为 Package Control.sublime-package（就是去掉了一个・，加个了个空格）</p>
<p>（4）重启 sublime</p>
<p>（5）如果无法安装可能被墙了，<a href="https://blog.csdn.net/wcc27857285/article/details/88368866">解决方案</a>。</p>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://zhuanlan.zhihu.com/p/668082830">https://zhuanlan.zhihu.com/p/668082830</a></p>
<p><a href="https://blog.csdn.net/wcc27857285/article/details/88368866">https://blog.csdn.net/wcc27857285/article/details/88368866</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>解决黑苹果系统无故重启的问题</title>
    <url>/2024/05/21/%E8%A7%A3%E5%86%B3%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%95%85%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>抄国光大佬作业搞了一台 chromebox3 CN65，刷上黑苹果，总是无规律重启。尝试重新刷了 最新的 bios，好了 2 天，后面又开始无规律重启，配置如下：</p>
<span id="more"></span>

<p>CPU：Intel® Core™ i7-8550U Processor</p>
<p>Graphic：Intel® HD Graphics 620</p>
<p>内存：DDR4 JUHOR 玖合 2666MHZ 16G x 2 (这台机器官网是 4-16G，试了下 32G 能用，就用了)</p>
<p>固态硬盘：台电（TECLAST）1TBPCle3.0*4</p>
<h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2. 问题原因</h2><p>内存条频率为 2666MHZ</p>
<h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3. 解决方法</h2><p>更换内存条为 2400MHZ（黑苹果对硬件的要求比较高）</p>
<h2 id="4-相关参考"><a href="#4-相关参考" class="headerlink" title="4.相关参考"></a>4. 相关参考</h2><p><a href="https://www.sqlsec.com/2023/07/macbox.html">https://www.sqlsec.com/2023/07/macbox.html</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一个 mysql 存储过程模板</title>
    <url>/2024/06/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAmysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1. 问题描述</h2><p>记录一个 mysql 存储过程模板，方便以后使用。</p>
<span id="more"></span>

<h2 id="2-相关sql"><a href="#2-相关sql" class="headerlink" title="2.相关sql"></a>2. 相关 sql</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> definer <span class="operator">=</span> user1@`<span class="operator">%</span>` <span class="keyword">procedure</span> procedure_name( <span class="comment">-- user1为数据库用户名</span></span><br><span class="line">      <span class="comment">-- 定义输入输入参数</span></span><br><span class="line">      <span class="keyword">IN</span> parameter1 <span class="type">varchar</span>(<span class="number">50</span>),                                                   </span><br><span class="line">      <span class="keyword">IN</span> parameter2 <span class="type">decimal</span>(<span class="number">15</span>, <span class="number">2</span>),</span><br><span class="line">      <span class="keyword">IN</span> parameter3 <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">4</span>),</span><br><span class="line">      <span class="keyword">IN</span> parameter4 tinyint(<span class="number">3</span>),</span><br><span class="line">      <span class="keyword">IN</span> parameter5 <span class="type">varchar</span>(<span class="number">32</span>))</span><br><span class="line">      </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 变量定义</span></span><br><span class="line">    <span class="keyword">declare</span> s_parameter1 <span class="type">varchar</span>(<span class="number">32</span>); </span><br><span class="line">    <span class="keyword">declare</span> s_parameter2 datetime; </span><br><span class="line">    <span class="keyword">declare</span> s_parameter3 datetime; </span><br><span class="line">    <span class="keyword">declare</span> s_parameter4 <span class="type">decimal</span>(<span class="number">15</span>,<span class="number">2</span>); </span><br><span class="line">    <span class="keyword">declare</span> s_parameter5 <span class="type">bigint</span>; </span><br><span class="line">    <span class="keyword">declare</span> s_parameter6 <span class="type">bigint</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 变量赋值</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        param1,</span><br><span class="line">        param2,</span><br><span class="line">        date_add((date_format(param3,<span class="string">'%Y-%m-%d %H:%i:%s'</span>)),<span class="type">interval</span> <span class="number">10</span> <span class="keyword">MINUTE</span> ), # 时间<span class="operator">+</span><span class="number">10</span>分钟</span><br><span class="line">        date_add((date_format(param4,<span class="string">'%Y-%m-%d %H:%i:%s'</span>)),<span class="type">interval</span> <span class="number">10</span> <span class="keyword">MINUTE</span> )  # 时间<span class="operator">+</span><span class="number">10</span>分钟</span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        s_parameter1,</span><br><span class="line">        s_parameter2,</span><br><span class="line">        s_parameter3,</span><br><span class="line">        s_parameter4</span><br><span class="line">    <span class="keyword">from</span> table1</span><br><span class="line">    <span class="keyword">where</span> param1 <span class="operator">=</span> parameter1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新</span></span><br><span class="line">    <span class="keyword">UPDATE</span> table2</span><br><span class="line">    <span class="keyword">SET</span> `param1` <span class="operator">=</span> <span class="string">'test'</span>,</span><br><span class="line">        `param2` <span class="operator">=</span> s_parameter1,</span><br><span class="line">        `param3` <span class="operator">=</span> s_parameter2,</span><br><span class="line">        `param4` <span class="operator">=</span> s_parameter3,</span><br><span class="line">        `param5` <span class="operator">=</span> date_format(now(), <span class="string">'%Y-%m-%d %H:%i:%s'</span>), # 设置时间为当前时间</span><br><span class="line">        `param6` <span class="operator">=</span> s_parameter4,</span><br><span class="line">        `param7` <span class="operator">=</span> s_parameter5,</span><br><span class="line">        `param8` <span class="operator">=</span> s_parameter6,</span><br><span class="line">        `param9` <span class="operator">=</span> s_parameter6,</span><br><span class="line">        `param10`<span class="operator">=</span> date_format(now(), <span class="string">'%Y-%m-%d %H:%i:%s'</span>) # 设置时间为当前时间</span><br><span class="line">    <span class="keyword">WHERE</span> param1 <span class="operator">=</span> parameter1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 条件判断</span></span><br><span class="line">    if parameter2 <span class="operator">*</span> <span class="number">0.015</span> <span class="operator">&lt;</span> <span class="number">500</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> s_parameter3 <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> s_parameter3 <span class="operator">=</span> parameter2 <span class="operator">*</span> <span class="number">0.015</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 最大编号自动+1</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">max</span>(id)<span class="operator">+</span><span class="number">1</span> <span class="keyword">into</span> s_parameter5 <span class="keyword">from</span> table3;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">max</span>(id)<span class="operator">+</span><span class="number">1</span> <span class="keyword">into</span> s_parameter6 <span class="keyword">from</span> table4;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 插入</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">    table5(p1, p2, p3, p4)  </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">    (s_parameter1, s_parameter2, s_parameter3, s_parameter4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记模版</title>
    <url>/2019/08/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<h2 id="1-书摘"><a href="#1-书摘" class="headerlink" title="1.书摘"></a>1. 书摘</h2><p>读书要有所得，必须要有思考，而思考的最佳验收方式就是输出。不论是书评还是读书笔记，怎样都好，只要是经过你理解的输出，就非常有价值。</p>
<span id="more"></span>

<h2 id="2-读书心得"><a href="#2-读书心得" class="headerlink" title="2.读书心得"></a>2. 读书心得</h2><p>简单的阅读感受和启发，或者深入的书评，无论长短都可以，有收获最重要。</p>
<h2 id="3-知识积累"><a href="#3-知识积累" class="headerlink" title="3.知识积累"></a>3. 知识积累</h2><p>使用 kindle 技巧：</p>
<p>技巧 1：截屏<br>截屏的方法很简单，只要记住一个对角线原则就好。大家在 “左上右下” 或 “左下右上” 的角落位置同时按住，即可完成截图操作注意事项：①必须同时按到对角线两边的圆形区域；②当屏幕闪现一下则代表截屏成功，否则就再试一次。</p>
<p>结束动作后，你的截屏将会在 Kindle 根目录中以图片的形式（png）出现，如果你想导出它们，只需要将 Kindle 连接电脑，从根目录中将图片拖出即可。</p>
<p>技巧 2：字号拉伸字号拉伸是个比较隐蔽的功能，作用说大不大，说小不小，就是减少了大家放大或缩小字体的难度，增强了交互体验。那么应该如何操作呢？其实非常简单，只要我们进入了阅读模式，即点击进入某读物的时候，我们可以将两个手指同时放在屏幕中，通过向内或向外的同时位移来完成放大或缩小的操作。</p>
<h2 id="4-思维导图"><a href="#4-思维导图" class="headerlink" title="4.思维导图"></a>4. 思维导图</h2><p>这里可以添加一个总结的思维导图。</p>
<h2 id="5-遗留问题"><a href="#5-遗留问题" class="headerlink" title="5.遗留问题"></a>5. 遗留问题</h2><p>不懂的地方。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结</title>
    <url>/2024/10/01/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-回顾面试流程"><a href="#1-回顾面试流程" class="headerlink" title="1.回顾面试流程"></a>1. <strong>回顾面试流程</strong></h2><p>①一面 8 月 10 日，测试主管面试。</p>
<p>②二面 8 月 13 日，应该是技术总监面试。</p>
<p>③三面 8 月 14 日，CEO 面试。</p>
<span id="more"></span>

<h2 id="2-评估表现"><a href="#2-评估表现" class="headerlink" title="2.评估表现"></a>2. <strong>评估表现</strong></h2><p>①一面特别紧张，面试官比较会引导，后面不紧张了。</p>
<p>②二面问项目细节问的比较多，有些东西会，没说清楚。</p>
<p>③三面超级紧张，感觉是大老板照顾了我，看我很紧张，没有流程化的面试，通过聊天的方式，让我放松下来的同时，了解了相关问题。</p>
<h2 id="3-分析问题"><a href="#3-分析问题" class="headerlink" title="3.分析问题"></a>3. <strong>分析问题</strong></h2><p>时间太长了，记住的问题不多，常规问题，就不多说了，重点说一个，公司很看重 AIGC（Artificial Intelligence Generated Content） 这块内容，需要你讲解下怎么在工作学习中使用。</p>
<h2 id="4-识别弱点"><a href="#4-识别弱点" class="headerlink" title="4.识别弱点"></a>4. <strong>识别弱点</strong></h2><p>因为长时间没有面试的原因，加上一直在同一家公司工作了 7 年，感觉自己不自信，紧张。</p>
<h2 id="5-行动计划"><a href="#5-行动计划" class="headerlink" title="5.行动计划"></a>5. <strong>行动计划</strong></h2><p>①平时说话的时候，要开始注意表达这方面的东西，说话要先 “过下脑子”，想想这个事情如何说，才能把事情说的简洁明了。</p>
<p>②多读些相关书籍。AI 推荐了个书单，正好家里又本《非暴力沟通》，可以先看着。</p>
<p>③写博客，写东西也可以提高表达能力，那就多写一些东西出来。</p>
<h2 id="6-感谢"><a href="#6-感谢" class="headerlink" title="6.感谢"></a>6. 感谢</h2><p>感谢打电话通知我去面试的 HR，感谢参与面试我的各位面试官。你们在沟通面试过程中的细致提问和耐心倾听，让我有机会展示自己，成为公司的一员。</p>
]]></content>
      <categories>
        <category>面试总结</category>
      </categories>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Django4.2 学习 - 模板 Template（三）</title>
    <url>/2025/01/19/Django4.2%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E6%9D%BFTemplate%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>在 <code>Django</code> 框架中，模板是可以帮助开发者快速生产呈现给用户页面的工具。</p>
<p>模板的设计方式实现了我们 <code>MTV</code>（M:Model，V:View，T:Template） 中 <code>VT</code> 的解耦（解耦：是指降低软件模块之间的相互依赖程度），<code>VT</code> 有着 N:M 的关系，一个 <code>V</code> 可以调用任意 <code>T</code>，一个 <code>T</code> 可以工任意 <code>V</code> 使用。与 Java 的 <code>MVC</code> 很像，<code>M</code> 为 Model， V 为 View 界面， C 为 Controller 控制器。</p>
<p>模板的处理分为 2 个过程：</p>
<ul>
<li>加载 HTML</li>
<li> 渲染数据（render ( )）</li>
</ul>
<p>模板主要有 2 个部分</p>
<ul>
<li>HTML 静态代码</li>
<li>模板语言，动态插入的代码段（“挖坑”，“填坑”）</li>
</ul>
<p>模板中的动态代码除了做基本的静态填充，还可以实现一些基本的运算，转换和逻辑。</p>
<p>静态页面：页面数据是本地固定的。<br>动态页面：页面数据来源于后台服务器。</p>
<span id="more"></span>

<h2 id="1-Django-模板语法"><a href="#1-Django-模板语法" class="headerlink" title="1.Django 模板语法"></a>1.Django 模板语法</h2><h3 id="（1）变量"><a href="#（1）变量" class="headerlink" title="（1）变量"></a>（1）变量</h3><p>视图传递给模板的数据，遵守标识符规定</p>
<p>语法：<code>{{var}}</code></p>
<p>如果变量不存在，则插入空字符串</p>
<p><code>index.html</code></p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name:</span><span class="template-variable">{{ name }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message:</span><span class="template-variable">{{ message }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表：</span><span class="template-variable">{{ items }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第一项：</span><span class="template-variable">{{ items.0 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第二项：</span><span class="template-variable">{{ items.1 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第三项：</span><span class="template-variable">{{ items.2 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>布尔值：</span><span class="template-variable">{{  is_authenticated }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典：</span><span class="template-variable">{{  user }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值1：</span><span class="template-variable">{{  user.items }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值2：</span><span class="template-variable">{{  user.user1 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值3：</span><span class="template-variable">{{  user.user1.email2 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Django'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'Hello Django!'</span>,</span><br><span class="line">        <span class="comment"># 最好不要有这种items的数据，否则在使用 for 循环时会报错</span></span><br><span class="line">        <span class="comment"># 'items': ['item1', 'item2', 'item3'],</span></span><br><span class="line">        <span class="string">'numbers'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="string">'is_authenticated'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'user'</span>: {</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'john'</span>,</span><br><span class="line">            <span class="comment"># 'items': ['item1', 'item2', 'item3'],</span></span><br><span class="line">            <span class="string">'numbers'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">            <span class="string">'is_authenticated'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'user1'</span>: {</span><br><span class="line">                <span class="string">'username'</span>: <span class="string">'john'</span>,</span><br><span class="line">                <span class="string">'email'</span>: <span class="string">'EMAIL'</span>,</span><br><span class="line">                <span class="string">'email2'</span>: <span class="string">'john@example.com'</span>,</span><br><span class="line">            },</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, data)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）方法"><a href="#（2）方法" class="headerlink" title="（2）方法"></a>（2）方法</h3><p>方法的调用，不能有参数（没有括号）</p>
<p><code>{{str}}</code></p>
<p><code>{{str.upper}}</code></p>
<p><code>{{str.isdigit}}</code></p>
<p><code>{{dict.key}}</code></p>
<h3 id="（3）标签"><a href="#（3）标签" class="headerlink" title="（3）标签"></a>（3）标签</h3><p>语法 <code>{% tag %}</code></p>
<p>作用：</p>
<ul>
<li>加载外部传入的变量</li>
<li>在输出中创建文本</li>
<li>控制循环或逻辑</li>
</ul>
<h4 id="1️⃣if-语句"><a href="#1️⃣if-语句" class="headerlink" title="1️⃣if 语句"></a>1️⃣if 语句</h4><ul>
<li>单分支 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.age &gt;= 18 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，已成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>双分支 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.age &gt;= 18 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，已成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，未成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>多分支 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.age &gt;= 60 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，老年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">elif</span></span> user2.age &lt;= 60 and user2.age &gt;= 30 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，中年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">elif</span></span> user2.age &lt;= 30 and user2.age &gt;= 18 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，青年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user2.age }}</span><span class="language-xml">岁，未成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2️⃣运算符"><a href="#2️⃣运算符" class="headerlink" title="2️⃣运算符"></a>2️⃣运算符</h4><ul>
<li>判断 <code>true</code> 或 <code>false</code>，使用 <code>is 或 is not</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.is_delted is False %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户没有被删除，正常显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">{{ user2.username }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">{{ user2.age }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用 <code>and or</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.username == 'jim' and user2.age == 29 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名叫 jim 且 年龄位 29岁的 jim<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">{{ user2.username }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">{{ user2.age }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user2.username == 'jim' or user2.age == 29 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名叫 jim 或者 年龄位 29岁的 jim<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">{{ user2.username }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">{{ user2.age }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用 <code>in</code> 和 <code>not in</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> 'blue' <span class="keyword">in</span> user2.favorite_color %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户喜欢的颜色中包含 blue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> 'yellow' not <span class="keyword">in</span> user2.favorite_color %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户喜欢的颜色中不包含 yellow<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3️⃣for-语句"><a href="#3️⃣for-语句" class="headerlink" title="3️⃣for 语句"></a>3️⃣for 语句</h4><ul>
<li>遍历列表 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> numbers %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ number }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>循环中的下标 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> numbers %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ numbers }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 1 开始正向下标（forloop.counter）: 下标值：</span><span class="template-variable">{{ forloop.counter }}</span><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 1 结束反向下标（forloop.revcounter）: 下标值：</span><span class="template-variable">{{ forloop.revcounter }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 0 开始正向下标（forloop.counter0）: 下标值：</span><span class="template-variable">{{ forloop.counter0 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 0 结束反向下标:（forloop.revcounter0）下标值：</span><span class="template-variable">{{ forloop.revcounter0 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环中的第一个元素<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> numbers %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> forloop.first %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的第一个元素：</span><span class="template-variable">{{ number }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环中的最后一个元素<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> numbers %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> forloop.last %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的最后一个元素：</span><span class="template-variable">{{ number }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>带 empty 的 for 语句 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> numbers2 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ number }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">empty</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>numbers2列表为空<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>遍历字典 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>遍历字典<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> key, value <span class="keyword">in</span> user3.items %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ key }}</span><span class="language-xml">:</span><span class="template-variable">{{ value }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>单独遍历字典的key<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> key <span class="keyword">in</span> user3.keys %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ key }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>单独遍历字典的value<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> value <span class="keyword">in</span> user3.values %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ value }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{# 传输的数据中切记不能有类似于 items 这种关键字的数据，否则会报错 #}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>循环嵌套 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环嵌套<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> list <span class="keyword">in</span> list1 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> l <span class="keyword">in</span> list %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{#                forloop.parentloop 表示当前循环的爸爸循环 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{#                forloop 表示当前循环 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">{{ l }}</span><span class="language-xml">-</span><span class="template-variable">{{ forloop.parentloop.counter}}</span><span class="language-xml">-</span><span class="template-variable">{{ forloop.counter }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> key, value <span class="keyword">in</span> dict_1.items %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> key == 'numbers' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> number <span class="keyword">in</span> value %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ number }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> key == 'dict_2' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> key <span class="keyword">in</span> value.keys %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ key }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>



<h4 id="4️⃣注释"><a href="#4️⃣注释" class="headerlink" title="4️⃣注释"></a>4️⃣注释</h4><ul>
<li>单行注释 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 注释内容 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{# pycharm快捷键： Command + / #}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>多行注释 </li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{% comment %}</span></span><br><span class="line"><span class="comment">注释内容1</span></span><br><span class="line"><span class="comment">注释内容2</span></span><br><span class="line"><span class="comment">{% endcomment %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{% comment %}</span></span><br><span class="line"><span class="comment">pycharm快捷键：Command + Option + /</span></span><br><span class="line"><span class="comment">{% endcomment %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="5️⃣过滤器"><a href="#5️⃣过滤器" class="headerlink" title="5️⃣过滤器"></a>5️⃣过滤器</h4><p>在 Django 模板中，过滤器（Filters）是一种用于在模板中对变量进行处理的工具。它们允许你在不修改原始数据的情况下，对变量进行格式化、转换或其他操作。过滤器通常用于在模板中显示数据时，对数据进行一些简单的处理，以满足特定的显示需求。<br>以下是一些常见的 Django 模板过滤器及其用法：</p>
<h5 id="①add"><a href="#①add" class="headerlink" title="①add"></a>①add</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 用于对数值进行加法运算 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> user2.age:</span><span class="template-variable">{{ user2.age }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>加法过滤器+10：user2.age|add:10：</span><span class="template-variable">{{ user2.age|<span class="name">add</span>:10 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>加法过滤器-10：user2.age|add:10：</span><span class="template-variable">{{ user2.age|<span class="name">add</span>:-10 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="②capfirst"><a href="#②capfirst" class="headerlink" title="②capfirst"></a>②capfirst</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 将字符串的第一个字符转换为大写 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><span class="template-variable">{{ user2.username }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将字符串的第一个字符转换为大写： </span><span class="template-variable">{{ user2.username|<span class="name">capfirst</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="③date"><a href="#③date" class="headerlink" title="③date"></a>③date</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 将日期格式化为指定的字符串格式，这里必须是日期对象 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><span class="template-variable">{{ user2.birthday }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将日期格式化为指定的字符串格式：</span><span class="template-variable">{{ user2.birthday|<span class="name">date</span>:<span class="string">"Y-M-d"</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 假设user2.birthday是一个日期字符串</span></span><br><span class="line">   birthday_str = <span class="string">"1990-01-01"</span></span><br><span class="line">   <span class="comment"># 将日期字符串转换为日期对象</span></span><br><span class="line">   user2_birthday = datetime.strptime(birthday_str, <span class="string">"%Y-%m-%d"</span>).date()</span><br></pre></td></tr></tbody></table></figure>

<h5 id="④default"><a href="#④default" class="headerlink" title="④default"></a>④default</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 如果变量为假（例如空字符串、空列表、None等），则使用指定的默认值 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user10.username|<span class="name">default</span>:<span class="string">'空'</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑤default-if-none"><a href="#⑤default-if-none" class="headerlink" title="⑤default_if_none"></a>⑤default_if_none</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 如果变量为None，则使用指定的默认值 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>:</span><span class="template-variable">{{ user2.test_none|<span class="name">default</span>_if_none:"这个值是个默认值" }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑥dictsort-dictsortreversed"><a href="#⑥dictsort-dictsortreversed" class="headerlink" title="⑥dictsort/dictsortreversed"></a>⑥dictsort/dictsortreversed</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 字典从小到大 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ user2.list_dict }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 name 升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ user2.list_dict|<span class="name">dictsort</span>:<span class="string">'name'</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 age 升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ user2.list_dict|<span class="name">dictsort</span>:<span class="string">'age'</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> l <span class="keyword">in</span> user2.list_dict|<span class="name">dictsort</span>:<span class="string">'name'</span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ l }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{# 字典从大到小 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 name 降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ user2.list_dict|<span class="name">dictsortreversed</span>:<span class="string">'name'</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 age 降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ user2.list_dict|<span class="name">dictsortreversed</span>:<span class="string">'age'</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> l <span class="keyword">in</span> user2.list_dict|<span class="name">dictsort</span>:<span class="string">'name'</span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ l }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑦divisibleby"><a href="#⑦divisibleby" class="headerlink" title="⑦divisibleby"></a>⑦divisibleby</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# 检查数值是否能被指定的数整除 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>10 是否能被 2 整除：</span><span class="template-variable">{{ 10|<span class="name">divisibleby</span>:2 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>11 是否能被 2 整除：</span><span class="template-variable">{{ 11|<span class="name">divisibleby</span>:2 }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑧escape-safe"><a href="#⑧escape-safe" class="headerlink" title="⑧escape/safe"></a>⑧escape/safe</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{# escape 对字符串进行HTML转义，防止XSS攻击, 试了下，好像 django 对所有的 HTML 都默认转义了#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对字符串进行HTML转义，防止XSS攻击。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串：</span><span class="template-variable">{{ xsstest|<span class="name">escape</span>  }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{# safe safe过滤器用于标记一个字符串是安全的，即它不包含任何需要转义的HTML特殊字符 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字符串：</span><span class="template-variable">{{ xsstest|<span class="name">safe</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 假设user2.birthday是一个日期字符串</span></span><br><span class="line">    birthday_str = <span class="string">"1990-01-01"</span></span><br><span class="line">    <span class="comment"># 将日期字符串转换为日期对象</span></span><br><span class="line">    user2_birthday = datetime.strptime(birthday_str, <span class="string">"%Y-%m-%d"</span>).date()</span><br><span class="line"></span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Django'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'Hello Django!'</span>,</span><br><span class="line">        <span class="string">'xsstest'</span>: <span class="string">"&lt;script&gt;alert('ceshi')&lt;/script&gt;"</span>,</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>



<h5 id="⑨filesizeformat"><a href="#⑨filesizeformat" class="headerlink" title="⑨filesizeformat"></a>⑨filesizeformat</h5><p>filesizeformat 是 Django 模板语言中的一个内置过滤器，用于将文件大小格式化为易读的格式。这个过滤器会自动将字节数转换为更人性化的单位，如 KB、MB、GB 等，并保留适当的小数位数。</p>
<p>过滤器的工作原理如下：<br>如果文件大小小于 1024 字节，它会直接显示字节数。<br>如果文件大小在 1024 字节到 1048576 字节之间（即 1 KB 到 1 MB 之间），它会将字节数除以 1024，并显示为 “KB”。<br>如果文件大小在 1048576 字节到 1073741824 字节之间（即 1 MB 到 1 GB 之间），它会将字节数除以 1048576，并显示为 “MB”。<br>如果文件大小大于 1073741824 字节（即大于 1 GB），它会将字节数除以 1073741824，并显示为 “GB”。</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将文件大小格式化为易读的格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size1|filesizeformat：</span><span class="template-variable">{{ file_size1|<span class="name">filesizeformat</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size2|filesizeformat：</span><span class="template-variable">{{ file_size2|<span class="name">filesizeformat</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size3|filesizeformat：</span><span class="template-variable">{{ file_size3|<span class="name">filesizeformat</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p><code>views.py</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 假设user2.birthday是一个日期字符串</span></span><br><span class="line">    birthday_str = <span class="string">"1990-01-01"</span></span><br><span class="line">    <span class="comment"># 将日期字符串转换为日期对象</span></span><br><span class="line">    user2_birthday = datetime.strptime(birthday_str, <span class="string">"%Y-%m-%d"</span>).date()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件大小</span></span><br><span class="line">    file_path1 = <span class="string">'templates/index.html'</span></span><br><span class="line">    file_size1 = os.path.getsize(file_path1)</span><br><span class="line"></span><br><span class="line">    file_path2 = <span class="string">'/Users/dachuan/Downloads/LocalSend-1.16.1.dmg'</span></span><br><span class="line">    file_size2 = os.path.getsize(file_path2)</span><br><span class="line"></span><br><span class="line">    file_path3 = <span class="string">'/Users/dachuan/Downloads/pycharm-professional-2024.3.1-aarch64.dmg'</span></span><br><span class="line">    file_size3 = os.path.getsize(file_path3)</span><br><span class="line"></span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Django'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'Hello Django!'</span>,</span><br><span class="line">        <span class="string">'xsstest'</span>: <span class="string">"&lt;script&gt;alert('ceshi')&lt;/script&gt;"</span>,</span><br><span class="line">        <span class="string">'numbers'</span>: [<span class="string">'第一项'</span>, <span class="string">'第二项'</span>, <span class="string">'第三项'</span>, <span class="string">'第四项'</span>, <span class="string">'第五项'</span>],</span><br><span class="line">        <span class="string">'is_authenticated'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'file_size1'</span>: file_size1,</span><br><span class="line">        <span class="string">'file_size2'</span>: file_size2,</span><br><span class="line">        <span class="string">'file_size3'</span>: file_size3,</span><br><span class="line">      .......</span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑩first-last"><a href="#⑩first-last" class="headerlink" title="⑩first/last"></a>⑩first/last</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{#&lt;p&gt;first：返回列表或字符串的第一个元素。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ numbers|<span class="name">first</span>}}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{#&lt;p&gt;last：返回列表或字符串的最后一个元素。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ numbers|<span class="name">last</span>}}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑪length"><a href="#⑪length" class="headerlink" title="⑪length"></a>⑪length</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{#&lt;p&gt;length：返回列表、字符串或字典的长度。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ numbers|<span class="name">length</span>}}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑫lower-upper"><a href="#⑫lower-upper" class="headerlink" title="⑫lower/upper"></a>⑫lower/upper</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{#&lt;p&gt;lower：将字符串转换为小写。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user222.username2.lower }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="comment">{#&lt;p&gt;upper：将字符串转换为大写。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ user222.username1.upper }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑬slice"><a href="#⑬slice" class="headerlink" title="⑬slice"></a>⑬slice</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{#&lt;p&gt;slice：对列表或字符串进行切片操作。&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ numbers|<span class="name">slice</span>:<span class="string">"1:4"</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑭truncatechars"><a href="#⑭truncatechars" class="headerlink" title="⑭truncatechars"></a>⑭truncatechars</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">{#&lt;p&gt;slice：截断字符串并添加省略号, 这里的 10= 7 个字符 + “...” 一共 10 个字符&lt;/p&gt;#}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ message|<span class="name">truncatechars</span>:10 }}</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑮truncatewords"><a href="#⑮truncatewords" class="headerlink" title="⑮truncatewords"></a>⑮truncatewords</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="comment">#&lt;p&gt;slice：截断字符串并添加省略号，按单词截断。 这里的 5 代表 5 个单词 + “...”&lt;/p&gt;#}</span></span><br><span class="line">&lt;p&gt;{{ message|truncatewords:<span class="number">5</span> }}&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑯urlize"><a href="#⑯urlize" class="headerlink" title="⑯urlize"></a>⑯urlize</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>urlize：将URL转换为可点击的链接<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>原链接：</span><span class="template-variable">{{ baidu }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转化为可点击的链接：</span><span class="template-variable">{{ baidu|<span class="name">urlize</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑰yesno"><a href="#⑰yesno" class="headerlink" title="⑰yesno"></a>⑰yesno</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>urlize：将布尔值转换为“yes”、“no”或“maybe”（如果是 None 值则显示 maybe）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testyes：</span><span class="template-variable">{{ testyes|<span class="name">yesno</span>:<span class="string">"yes,no,maybe"</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testno：</span><span class="template-variable">{{ testno|<span class="name">yesno</span>:<span class="string">"yes1,no1,maybe1"</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testmaybe：</span><span class="template-variable">{{ testmaybe|<span class="name">yesno</span>:<span class="string">"yes2,no2,maybe2"</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="⑱join"><a href="#⑱join" class="headerlink" title="⑱join"></a>⑱join</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将一个列表中的元素连接成一个字符串，join:'连接符'<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">{{ numbers|<span class="name">join</span>:<span class="string">'-'</span> }}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>



<h4 id="6️⃣HTML转义"><a href="#6️⃣HTML转义" class="headerlink" title="6️⃣HTML转义"></a>6️⃣HTML 转义</h4><p>在 Django 模板中，autoescape 标签用于控制是否自动转义变量中的特殊字符。默认情况下，Django 模板会自动转义变量中的特殊字符，以防止跨站脚本攻击（XSS）。</p>
<ul>
<li>自动转义的作用<br>自动转义会将变量中的特殊字符（如 &lt;、&gt;、&amp; 等）转换为 HTML 实体，这样浏览器就不会将这些字符解释为 HTML 标签或 JavaScript 代码。例如，&lt; 会被转换为 &lt;，&gt; 会被转换为 &gt;，&amp; 会被转换为 &amp;。</li>
<li>关闭自动转义<br>有时候，你可能需要在模板中输出原始的 HTML 内容，而不希望 Django 对其进行转义。在这种情况下，你可以使用 autoescape off 标签来关闭自动转义。</li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">autoescape</span></span> off %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ raw_html }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endautoescape</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>打开自动转义</li>
</ul>
<p>如果你在关闭自动转义的代码块中又需要开启自动转义，可以使用 autoescape on 标签。</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">autoescape</span></span> off %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ raw_html }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">autoescape</span></span> on %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">{{ escaped_html }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endautoescape</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endautoescape</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>注意事项<br>使用 autoescape off 时要格外小心，因为它会直接输出原始的 HTML 内容。如果变量中包含恶意的 HTML 或 JavaScript 代码，可能会导致 XSS 攻击。<br>只有在你确定变量的内容是安全的情况下，才应该使用 autoescape off。<br>如果你需要在模板中输出用户输入的内容，建议始终保持自动转义开启，以确保安全性。<br>通过 autoescape 标签，你可以灵活地控制 Django 模板中的自动转义行为，以满足不同的需求。</p>
</li>
<li><p>🌰</p>
</li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">autoescape</span></span> off %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>因为这个自动转义关闭了，xsstest1 的弹窗也会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ xsstest1 }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>xsstest1 的弹窗也会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">autoescape</span></span> on %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>xsstest2 的弹窗不会出现，HTML标签（如h5）不受autoescape标签的影响，它们总是会被浏览器解析和渲染。<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">{{ xsstest2 }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>xsstest2 的弹窗不会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endautoescape</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endautoescape</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>views.py</code></li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 假设user2.birthday是一个日期字符串</span></span><br><span class="line">    birthday_str = <span class="string">"1990-01-01"</span></span><br><span class="line">    <span class="comment"># 将日期字符串转换为日期对象</span></span><br><span class="line">    user2_birthday = datetime.strptime(birthday_str, <span class="string">"%Y-%m-%d"</span>).date()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件大小</span></span><br><span class="line">    file_path1 = <span class="string">'templates/index.html'</span></span><br><span class="line">    file_size1 = os.path.getsize(file_path1)</span><br><span class="line"></span><br><span class="line">    file_path2 = <span class="string">'/Users/dachuan/Downloads/LocalSend-1.16.1.dmg'</span></span><br><span class="line">    file_size2 = os.path.getsize(file_path2)</span><br><span class="line"></span><br><span class="line">    file_path3 = <span class="string">'/Users/dachuan/Downloads/pycharm-professional-2024.3.1-aarch64.dmg'</span></span><br><span class="line">    file_size3 = os.path.getsize(file_path3)</span><br><span class="line"></span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Django'</span>,</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'Hello Django ! I am Tester, I am 28 years old.'</span>,</span><br><span class="line">        <span class="string">'baidu'</span>:<span class="string">'http://www.baidu.com/'</span>,</span><br><span class="line">        <span class="string">'testyes'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'testno'</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">'testmaybe'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'xsstest'</span>: <span class="string">"&lt;script&gt;alert('ceshi')&lt;/script&gt;"</span>,</span><br><span class="line">        <span class="string">'xsstest1'</span>: <span class="string">"&lt;script&gt;alert('ceshi1')&lt;/script&gt;"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'numbers'</span>: [<span class="string">'第一项'</span>, <span class="string">'第二项'</span>, <span class="string">'第三项'</span>, <span class="string">'第四项'</span>, <span class="string">'第五项'</span>],</span><br><span class="line">        <span class="string">'is_authenticated'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'file_size1'</span>: file_size1,</span><br><span class="line">        <span class="string">'file_size2'</span>: file_size2,</span><br><span class="line">        <span class="string">'file_size3'</span>: file_size3,</span><br><span class="line"></span><br><span class="line">        <span class="string">'user222'</span>: {</span><br><span class="line">            <span class="string">'username1'</span>: <span class="string">'john'</span>,</span><br><span class="line">            <span class="string">'username2'</span>: <span class="string">'JIM'</span>,</span><br><span class="line">            <span class="string">'numbers'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'user2'</span>: {</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'jim'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">29</span>,</span><br><span class="line">            <span class="string">'favorite_color'</span>: [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>],</span><br><span class="line">            <span class="string">'birthday'</span>: user2_birthday,</span><br><span class="line">            <span class="string">'is_delted'</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">'test_none'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'list_dict'</span>: [</span><br><span class="line">                {<span class="string">'name'</span>: <span class="string">'name5'</span>, <span class="string">'age'</span>: <span class="number">18</span>},</span><br><span class="line">                {<span class="string">'name'</span>: <span class="string">'name4'</span>, <span class="string">'age'</span>: <span class="number">19</span>},</span><br><span class="line">                {<span class="string">'name'</span>: <span class="string">'name3'</span>, <span class="string">'age'</span>: <span class="number">20</span>},</span><br><span class="line">                {<span class="string">'name'</span>: <span class="string">'name1'</span>, <span class="string">'age'</span>: <span class="number">22</span>},</span><br><span class="line">                {<span class="string">'name'</span>: <span class="string">'name2'</span>, <span class="string">'age'</span>: <span class="number">21</span>},</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="string">'user3'</span>: {</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'jj'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="string">'favorite_color'</span>: [<span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>],</span><br><span class="line">            <span class="string">'is_delted'</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">'test'</span>: {<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>},</span><br><span class="line">            <span class="string">'numbers'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'list1'</span>: [</span><br><span class="line">            [<span class="string">'Test1'</span>, <span class="string">'Test2'</span>, <span class="string">'Test3'</span>, <span class="string">'Test4'</span>],</span><br><span class="line">            [<span class="string">'Java1'</span>, <span class="string">'Java2'</span>, <span class="string">'Java3'</span>, <span class="string">'Java4'</span>],</span><br><span class="line">            [<span class="string">'Json1'</span>, <span class="string">'Json2'</span>, <span class="string">'Json3'</span>, <span class="string">'Json4'</span>],</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">'dict_1'</span>: {</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'Django'</span>,</span><br><span class="line">            <span class="string">'message'</span>: <span class="string">'Hello Django!'</span>,</span><br><span class="line">            <span class="string">'numbers'</span>: [<span class="string">'第一项'</span>, <span class="string">'第二项'</span>, <span class="string">'第三项'</span>, <span class="string">'第四项'</span>, <span class="string">'第五项'</span>],</span><br><span class="line">            <span class="string">'dict_2'</span>: {</span><br><span class="line">                <span class="string">'username'</span>: <span class="string">'john'</span>,</span><br><span class="line">                <span class="string">'numbers'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">            },</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, data, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'about.html'</span>)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>index.html</code></li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Django模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Django模板<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">{#单行注释：快捷键 Command + / #}</span><br><span class="line">{% comment %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多行注释：</span><br><span class="line">快捷键 Command + Option + /</span><br><span class="line">{% endcomment %}</span><br><span class="line"></span><br><span class="line">{# 变量 #}</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>变量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>name:{{ name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message:{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表：{{ items }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第一项：{{ items.0 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第二项：{{ items.1 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>列表第三项：{{ items.2 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>布尔值：{{ is_authenticated }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典：{{ user }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值1：{{ user.items }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值2：{{ user.user1 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>字典取值3：{{ user.user1.email2 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>if语句<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>单分支<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% if user2.age &gt;= 18 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，已成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>双分支<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% if user2.age &gt;= 18 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，已成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% else %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，未成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>多分支<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% if user2.age &gt;= 60 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，老年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% elif user2.age &lt;= 60 and user2.age &gt;= 30 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，中年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% elif user2.age &lt;= 30 and user2.age &gt;= 18 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，青年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% else %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user2.age }}岁，未成年<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>逻辑运算<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>判断 `true`或 `false`<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% if user2.is_delted  is not Ture %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户没有被删除，正常显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ user2.username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ user2.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>使用 `and or not`<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line">{% if user2.username == 'jim' and user2.age == 29 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名叫 jim 且 年龄位 29岁的 jim<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ user2.username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ user2.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">{% if user2.username == 'jim' or user2.age == 29 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名叫 jim 或者 年龄位 29岁的 jim<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ user2.username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ user2.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>使用`in` 和 `not in`<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line">{% if 'blue' in user2.favorite_color %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户喜欢的颜色中包含 blue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">{% if 'yellow' not in user2.favorite_color %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户喜欢的颜色中不包含 yellow<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>for语句<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>遍历列表<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for number in numbers %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ number }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环中的下标<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for number in numbers %}</span><br><span class="line">    {{ numbers }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 1 开始正向下标（forloop.counter）: 下标值：{{ forloop.counter }}  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 1 结束反向下标（forloop.revcounter）: 下标值：{{ forloop.revcounter }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 0 开始正向下标（forloop.counter0）: 下标值：{{ forloop.counter0 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>从 0 结束反向下标:（forloop.revcounter0）下标值：{{ forloop.revcounter0 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环中的第一个元素<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for number in numbers %}</span><br><span class="line">    {% if forloop.first %}</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的第一个元素：{{ number }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    {% endif %}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环中的最后一个元素<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for number in numbers %}</span><br><span class="line">    {% if forloop.last %}</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表中的最后一个元素：{{ number }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    {% endif %}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>带 empty 的 for 语句<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line">{% for number in numbers2 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ number }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% empty %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>numbers2列表为空<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>遍历字典<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for key, value in user3.items %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ key }}:{{ value }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>单独遍历字典的key<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for key in user3.keys %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ key }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>单独遍历字典的value<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for value in user3.values %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ value }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>循环嵌套<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">{% for list in list1 %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            {% for l in list %}</span><br><span class="line">                {#                forloop.parentloop 表示当前循环的爸爸循环 #}</span><br><span class="line">                {#                forloop 表示当前循环 #}</span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{ l }}-{{ forloop.parentloop.counter }}-{{ forloop.counter }}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            {% endfor %}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">{% for key, value in dict_1.items %}</span><br><span class="line"></span><br><span class="line">    {% if key == 'numbers' %}</span><br><span class="line">        {% for number in value %}</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ number }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        {% endfor %}</span><br><span class="line">    {% endif %}</span><br><span class="line"></span><br><span class="line">    {% if key == 'dict_2' %}</span><br><span class="line">        {% for key in value.keys %}</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ key }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        {% endfor %}</span><br><span class="line">    {% endif %}</span><br><span class="line"></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>过滤器 Filters<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> user2.age:{{ user2.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>加法过滤器+10：user2.age|add:10：{{ user2.age|add:10 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>加法过滤器-10：user2.age|add:10：{{ user2.age|add:-10 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> {{ user2.username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将字符串的第一个字符转换为大写： {{ user2.username|capfirst }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> {{ user2.birthday }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将日期格式化为指定的字符串格式： {{ user2.birthday|date:"Y-M-d" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果变量为假（例如空字符串、空列表、None等），则使用指定的默认值：{{ user10.username|default:'空' }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果变量为None，则使用指定的默认值:{{ user2.test_none|default_if_none:"这个值是个默认值" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>排序前<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% for key, value in user2.dict_1.items %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ key }}:{{ value }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">{{ user2.list_dict }}</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 name 升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{{ user2.list_dict|dictsort:'name' }}</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 age 升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{{ user2.list_dict|dictsort:'age' }}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% for l in user2.list_dict|dictsort:'name' %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ l }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">{{ user2.list_dict }}</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 name 降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{{ user2.list_dict|dictsort:'name' }}</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按照 age 降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{{ user2.list_dict|dictsort:'age' }}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% for l in user2.list_dict|dictsort:'name' %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ l }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>检查数值是否能被指定的书整除<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>10 是否能被 2 整除：{{ 10|divisibleby:2 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>11 是否能被 2 整除：{{ 11|divisibleby:2 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对字符串进行HTML转义，防止XSS攻击。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">原始字符串：{{ xsstest|escape }}</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转义后的字符串：{{ xsstest|safe }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将文件大小格式化为易读的格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size1|filesizeformat：{{ file_size1|filesizeformat }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size2|filesizeformat：{{ file_size2|filesizeformat }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>file_size3|filesizeformat：{{ file_size3|filesizeformat }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first：返回列表或字符串的第一个元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ numbers|first }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>last：返回列表或字符串的最后一个元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ numbers|last }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>length：返回列表、字符串或字典的长度。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ numbers|length }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>lower：将字符串转换为小写。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user222.username2.lower }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>upper：将字符串转换为大写。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ user222.username1.upper }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>slice：对列表或字符串进行切片操作。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ numbers|slice:"1:4" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>truncatechars：截断字符串并添加省略号。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message|truncatechars:10 }}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>truncatewords：截断字符串并添加省略号，按单词截断。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message|truncatewords:5 }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>urlize：将URL转换为可点击的链接<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>原链接：{{ baidu }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>转化为可点击的链接：{{ baidu|urlize }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>urlize：将布尔值转换为“yes”、“no”或“maybe”（如果是 None 值则显示 maybe）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testyes：{{ testyes|yesno:"yes,no,maybe" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testno：{{ testno|yesno:"yes1,no1,maybe1" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>testmaybe：{{ testmaybe|yesno:"yes2,no2,maybe2" }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>将一个列表中的元素连接成一个字符串，join:'连接符'<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ numbers|join:'-' }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">{% autoescape off %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>因为这个自动转义关闭了，xsstest1 的弹窗也会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    {{ xsstest1 }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>xsstest1 的弹窗也会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    {% autoescape on %}</span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>xsstest2 的弹窗不会出现，HTML标签（如h5）不受autoescape标签的影响，它们总是会被浏览器解析和渲染。<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        {{ xsstest2 }}</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>xsstest2 的弹窗不会出现<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    {% endautoescape %}</span><br><span class="line">{% endautoescape %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h4 id="7️⃣模板继承"><a href="#7️⃣模板继承" class="headerlink" title="7️⃣模板继承"></a>7️⃣模板继承</h4><p>在 Django 模板中，block、extends、include 和 block.super 是用于模板继承和复用的重要标签。下面是一个使用这四个标签的学习例子：<br>假设我们有一个基础模板 base.html，它定义了网站的基本结构，包括头部、导航栏、内容区域和页脚。我们还希望在不同的页面中可以自定义内容区域的内容，同时保留基础模板的其他部分。</p>
<ul>
<li>基础模板 <code>base.html</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">Default Title</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/about/"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/contact/"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> 2023 My Website. All rights reserved.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>在这个基础模板中，我们使用了 block 标签来定义两个可替换的区域：title 和 content。这些区域将在子模板中被填充。</p>
<ul>
<li>子模板 <code>home.html</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">extends</span></span> 'base.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">Home Page</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to the Home Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the content of the home page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<p>在这个子模板中，我们使用 extends 标签来指定继承的基础模板。然后，我们使用 block 标签来填充基础模板中的 title 和 content 区域。</p>
<ul>
<li>子模板 <code>about.html</code></li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">extends</span></span> 'base.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">About Us</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About Us<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>We are a team of passionate developers.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our mission is to create amazing websites.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<p>同样，这个子模板也继承了 base.html，并填充了 title 和 content 区域。</p>
<ul>
<li>使用 <code>include</code> 标签：</li>
</ul>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- sidebar.html --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Sidebar<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/news/"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/events/"</span>&gt;</span>Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>然后在 <code>home.html</code> 和 <code>about.html</code> 中引入这个侧边栏：</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- home.html --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">extends</span></span> 'base.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">Home Page</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to the Home Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the content of the home page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">include</span></span> 'sidebar.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- about.html --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">extends</span></span> 'base.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">About Us</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About Us<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>We are a team of passionate developers.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our mission is to create amazing websites.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">include</span></span> 'sidebar.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用 <code>block.super </code>标签：</li>
</ul>
<p>有时候，我们希望在子模板中保留基础模板中某个 block 区域的内容，并在其基础上添加一些额外的内容。这时可以使用 block.super 标签。<br>假设我们希望在 about.html 的 content 区域中保留基础模板中的内容，并在其下方添加一些额外的信息.</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- about.html --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">extends</span></span> 'base.html' %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> title %}</span><span class="language-xml">About Us</span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">block</span></span> content %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ block.super }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Our Team<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>We have a diverse team of developers, designers, and marketers.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endblock</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="2-在-Django-项目中使用-Jinja2-模板引擎"><a href="#2-在-Django-项目中使用-Jinja2-模板引擎" class="headerlink" title="2.在 Django 项目中使用 Jinja2 模板引擎"></a>2. 在 Django 项目中使用 Jinja2 模板引擎</h2><p>在 Django 中使用 Jinja2 模板可以按照以下步骤进行配置和使用：</p>
<h3 id="（1）安装-Jinja2"><a href="#（1）安装-Jinja2" class="headerlink" title="（1）安装 Jinja2"></a>（1）安装 Jinja2</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install Jinja2</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（2）配置-Django-以支持-Jinja2"><a href="#（2）配置-Django-以支持-Jinja2" class="headerlink" title="（2）配置 Django 以支持 Jinja2"></a>（2）配置 Django 以支持 Jinja2</h3><p>在 Django 项目的 <code>settings.py</code> 文件中，需要对 <code>TEMPLATES</code> 配置项进行修改，以支持 Jinja2 模板引擎。具体配置如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    {</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.jinja2.Jinja2'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [BASE_DIR / <span class="string">'templates'</span>],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: {</span><br><span class="line">            <span class="string">'environment'</span>: <span class="string">'DjangoPro5.jinja2.jinja2_env.environment'</span>,  <span class="comment"># 指定环境配置函数</span></span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保留默认模板引擎（复制一份即可）</span></span><br><span class="line">    {</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [BASE_DIR / <span class="string">'templates'</span>],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: {</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（3）创建-Jinja2-环境配置"><a href="#（3）创建-Jinja2-环境配置" class="headerlink" title="（3）创建 Jinja2 环境配置"></a>（3）创建 Jinja2 环境配置</h3><p>在项目的某个应用目录下（例如 <code>DjangoPro5</code>），创建一个名为 <code>jinja2</code> 的文件夹，并在该文件夹中创建一个名为 <code>jinja2_env.py</code> 的文件。在 jinja2_env.py` 文件中定义 Jinja2 的环境配置：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment</span><br><span class="line"><span class="keyword">from</span> django.templatetags.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">environment</span>(<span class="params">**options</span>):</span><br><span class="line">    env = Environment(**options)</span><br><span class="line">    env.<span class="built_in">globals</span>.update({</span><br><span class="line">        <span class="string">'static'</span>: static,  <span class="comment"># 用于访问静态文件</span></span><br><span class="line">        <span class="string">'url'</span>: reverse,    <span class="comment"># 用于生成 URL</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">return</span> env</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（4）编写-Jinja2-模板"><a href="#（4）编写-Jinja2-模板" class="headerlink" title="（4）编写 Jinja2 模板"></a>（4）编写 Jinja2 模板</h3><p>在 <code>templates</code> 文件夹中创建 Jinja2 模板文件，例如 <code>index.html</code>，并使用 Jinja2 的语法编写模板内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">{% for i in range(10) if i % 2 == 0 %} {#  jinja2 模板支持函数如 range(10) #}</span><br><span class="line">    {{ i }}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（5）在视图中使用-Jinja2-模板"><a href="#（5）在视图中使用-Jinja2-模板" class="headerlink" title="（5）在视图中使用 Jinja2 模板"></a>（5）在视图中使用 Jinja2 模板</h3><p>在 Django 的视图中，可以像使用默认模板引擎一样使用 Jinja2 模板。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_view</span>(<span class="params">request</span>):</span><br><span class="line">    context = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Alice'</span>,</span><br><span class="line">        <span class="string">'items'</span>: [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cherry'</span>],</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'hello.html'</span>, context)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（6）与Django-模板的差异"><a href="#（6）与Django-模板的差异" class="headerlink" title="（6）与Django 模板的差异"></a>（6）与 <code>Django</code> 模板的差异</h3><p><a href="https://www.tangxdou.com/2025/02/10/jinja2%E6%A8%A1%E6%9D%BF%E4%B8%8EDjango%E6%A8%A1%E6%9D%BF%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93/">jinja2 模板与 Django 模板对比总结</a></p>
<h2 id="3-相关参考"><a href="#3-相关参考" class="headerlink" title="3.相关参考"></a>3. 相关参考</h2><p><a href="https://www.bilibili.com/video/BV1W34y1c7Rn?spm_id_from=333.788.player.switch&amp;vd_source=fd555860cd7cf9b09d9279e5deaabb9d&amp;p=15">bilibili 教程</a></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalSend 的安装与使用</title>
    <url>/2024/12/02/LocalSend%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>由于现在使用的测试机较多，某一台测试机上发现了有一个 bug，需要截图发送到 <code>Mac</code> 上，<code>IOS</code> 还好可以使用<code>隔空投送</code>，<code>Android</code> 就比较麻烦了，之前在电脑上共享了一个文件夹，在各个 <code>Android</code> 上，使用软件连接这个文件夹，后面发现了一个无视平台 (支持 window/macos/linux/Android/ios) 的神器 <code>localsend</code>，果断将所有测试机和 <code>Mac</code> 上。</p>
<h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1. 下载地址</h2><p>github 地址：<code>https://github.com/localsend</code></p>
<p>官网地址：<code>https://localsend.org/zh-CN/download?os=macos</code></p>
<span id="more"></span>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>localsend</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2 模板与 Django 模板对比总结</title>
    <url>/2025/02/10/jinja2%E6%A8%A1%E6%9D%BF%E4%B8%8EDjango%E6%A8%A1%E6%9D%BF%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Jinja2 是一个基于 Python 的模板引擎，广泛用于生成 HTML、XML 或其他标记语言。它被许多框架（如 Flask 和 Django）使用，具有灵活的语法和强大的功能。对比 Django 的模板，总结一下 Jinja2。</p>
<h2 id="0-官网"><a href="#0-官网" class="headerlink" title="0.官网"></a>0. 官网</h2><ul>
<li><strong>官方文档</strong>：<a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja2 官方文档</a></li>
<li><strong> Flask 教程</strong>：Flask 框架中大量使用 Jinja2，学习 Flask 时可以顺便掌握 Jinja2。</li>
<li><strong>在线练习</strong>：使用在线 Python 环境（如 Replit）练习 Jinja2 模板渲染。</li>
</ul>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1. 安装</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pip install Jinja2</span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="2-设计理念"><a href="#2-设计理念" class="headerlink" title="2. 设计理念"></a>2. <strong>设计理念</strong></h2><ul>
<li><strong>Jinja2</strong>：<ul>
<li>更接近 Python 语法，支持更复杂的表达式和逻辑。</li>
<li>强调灵活性和扩展性，允许在模板中执行更多的逻辑操作。</li>
<li>适合需要高度定制化的场景。</li>
</ul>
</li>
<li><strong>Django 模板</strong>：<ul>
<li>强调 “模板与逻辑分离”，鼓励将复杂的逻辑放在视图（View）中，而不是模板中。</li>
<li>语法更简单，限制更多，适合遵循 Django 设计哲学的项目。</li>
</ul>
</li>
</ul>
<h2 id="2-性能"><a href="#2-性能" class="headerlink" title="2. 性能"></a>2. <strong>性能</strong></h2><ul>
<li><strong>Jinja2</strong>：<ul>
<li>性能较高，尤其是在处理复杂逻辑和大规模数据时。</li>
<li>支持模板预编译和缓存，适合高性能场景。</li>
</ul>
</li>
<li><strong>Django 模板</strong>：<ul>
<li>性能稍逊于 Jinja2，但在大多数场景下足够使用。</li>
<li>由于设计上更简单，适合中小型项目。</li>
</ul>
</li>
</ul>
<h2 id="3-扩展性"><a href="#3-扩展性" class="headerlink" title="3. 扩展性"></a>3. <strong>扩展性</strong></h2><ul>
<li><strong>Jinja2</strong>：<ul>
<li>支持自定义过滤器、全局函数和测试器。</li>
<li>可以通过 Python 代码直接扩展功能。</li>
</ul>
</li>
<li><strong>Django 模板</strong>：<ul>
<li>支持自定义模板标签和过滤器，但扩展方式相对复杂。</li>
<li>需要遵循 Django 的扩展机制。</li>
</ul>
</li>
</ul>
<h2 id="4-使用场景"><a href="#4-使用场景" class="headerlink" title="4. 使用场景"></a>4. <strong>使用场景</strong></h2><ul>
<li><strong>Jinja2</strong>：<ul>
<li>适合需要高度灵活性和复杂逻辑的项目。</li>
<li>常用于 Flask、FastAPI 等框架。</li>
<li>适合开发者更喜欢 Python 风格的语法。</li>
</ul>
</li>
<li><strong>Django 模板</strong>：<ul>
<li>适合遵循 Django 设计哲学的项目。</li>
<li>常用于 Django 框架，与 Django 的其他组件（如 ORM、表单）紧密集成。</li>
<li>适合开发者更喜欢简单、限制较多的模板语法。</li>
</ul>
</li>
</ul>
<h2 id="5-语法差异"><a href="#5-语法差异" class="headerlink" title="5. 语法差异"></a>5. <strong>语法差异</strong></h2><h3 id="（1）变量输出："><a href="#（1）变量输出：" class="headerlink" title="（1）变量输出："></a>（1）<strong>变量输出</strong>：</h3><ul>
<li>Jinja2：<code>{{ variable }}</code></li>
<li>Django：<code>{{ variable }}</code></li>
<li>两者在变量输出语法上完全相同。</li>
</ul>
<h3 id="（2）控制结构："><a href="#（2）控制结构：" class="headerlink" title="（2）控制结构："></a>（2）<strong>控制结构</strong>：</h3><h4 id="1️⃣条件判断-if-语句"><a href="#1️⃣条件判断-if-语句" class="headerlink" title="1️⃣条件判断 if 语句"></a>1️⃣<strong>条件判断 <code>if</code> 语句</strong></h4><h5 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a><strong>Jinja2</strong></h5><ul>
<li>支持更复杂的表达式，可以直接在条件中组合逻辑操作。</li>
<li>允许使用 <strong>Python 风格的条件表达式</strong>（如 <code>in</code>、<code>is</code>、数学运算等）。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% if user.is_admin and request.method == 'POST' %}</span><br><span class="line">    &lt;p&gt;Admin action submitted!&lt;/p&gt;</span><br><span class="line">{% elif user.age &gt;= 18 %}</span><br><span class="line">    &lt;p&gt;Welcome, adult user!&lt;/p&gt;</span><br><span class="line">{% else %}</span><br><span class="line">    &lt;p&gt;Access denied.&lt;/p&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="Django-模板"><a href="#Django-模板" class="headerlink" title="Django 模板"></a><strong>Django 模板</strong></h5><ul>
<li>语法更简单，但限制较多。</li>
<li><strong>不支持复杂的表达式</strong>（如直接使用 <code>&gt;=</code>、<code>==</code> 等运算符），需依赖模板标签或过滤器。</li>
</ul>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a><strong>示例</strong>：</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user.is_admin and request.method == "POST" %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Admin action submitted!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">elif</span></span> user.age &gt; 17 %}</span><span class="language-xml">  </span><span class="comment">{# Django 中不能写 `&gt;= 18`，需用 `&gt; 17` #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, adult user!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Access denied.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2️⃣循环-for-语句"><a href="#2️⃣循环-for-语句" class="headerlink" title="2️⃣循环 for 语句"></a>2️⃣<strong>循环 <code>for</code> 语句</strong></h4><h5 id="Jinja2-1"><a href="#Jinja2-1" class="headerlink" title="Jinja2"></a><strong>Jinja2</strong></h5><ul>
<li>支持在 <code>for</code> 循环中直接添加条件（类似 Python 的列表推导式）。</li>
<li>提供 <code>loop</code> 变量，包含丰富的循环元数据（如 <code>loop.index</code>、<code>loop.first</code> 等）。</li>
</ul>
<h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a><strong>示例</strong>：</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{# 直接过滤循环项 #}</span><br><span class="line">{% for user in users if user.is_active %}</span><br><span class="line">    {{ loop.index }}. {{ user.name }} </span><br><span class="line">    {% if loop.first %} (First user!) {% endif %}</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="Django-模板-1"><a href="#Django-模板-1" class="headerlink" title="Django 模板"></a><strong>Django 模板</strong></h5><ul>
<li><strong>不支持在 <code>for</code> 循环中直接添加条件</strong>，需在循环内部使用 <code>if</code> 标签过滤。</li>
<li>提供 <code>forloop</code> 变量，功能类似但属性名不同（如 <code>forloop.counter</code>）。</li>
</ul>
<h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a><strong>示例</strong>：</h5><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> user <span class="keyword">in</span> users %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> user.is_active %}</span><span class="language-xml">  </span><span class="comment">{# 条件需写在循环内部 #}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">{{ forloop.counter }}</span><span class="language-xml">. </span><span class="template-variable">{{ user.name }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> forloop.first %}</span><span class="language-xml"> (First user!) </span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3️⃣循环变量的差异"><a href="#3️⃣循环变量的差异" class="headerlink" title="3️⃣循环变量的差异"></a>3️⃣<strong>循环变量的差异</strong></h4><h5 id="Jinja2-的-loop-变量"><a href="#Jinja2-的-loop-变量" class="headerlink" title="Jinja2 的 loop 变量"></a><strong>Jinja2 的 <code>loop</code> 变量</strong></h5><ul>
<li><code>loop.index</code>：当前迭代的索引（从 1 开始）。</li>
<li><code>loop.index0</code>：当前迭代的索引（从 0 开始）。</li>
<li><code>loop.first</code>：是否是第一次迭代。</li>
<li><code>loop.last</code>：是否是最后一次迭代。</li>
<li><code>loop.length</code>：总迭代次数。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% for item in items %}</span><br><span class="line">    {{ loop.index }} of {{ loop.length }}: {{ item }}</span><br><span class="line">{% endfor %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">{% for n in list3 %}</span><br><span class="line">    &lt;p&gt;列表第{{ loop.index }}位是{{ n }},列表总长度为{{ loop.length }}&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">{% for n in list3 %}</span><br><span class="line">    &lt;p&gt;列表第{{ loop.index0 }}位是{{ n }},列表总长度为{{ loop.length }}&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="Django-模板的-forloop-变量"><a href="#Django-模板的-forloop-变量" class="headerlink" title="Django 模板的 forloop 变量"></a><strong>Django 模板的 <code>forloop</code> 变量</strong></h5><ul>
<li><code>forloop.counter</code>：当前迭代的索引（从 1 开始）。</li>
<li><code>forloop.counter0</code>：当前迭代的索引（从 0 开始）。</li>
<li><code>forloop.revcounter</code>：反向索引（从总长度到 1）。</li>
<li><code>forloop.first</code>/<code>forloop.last</code>：同 Jinja2。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> items %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">{{ forloop.counter }}</span><span class="language-xml"> of </span><span class="template-variable">{{ forloop.revcounter }}</span><span class="language-xml">: </span><span class="template-variable">{{ item }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="4️⃣对复杂表达式的支持"><a href="#4️⃣对复杂表达式的支持" class="headerlink" title="4️⃣对复杂表达式的支持"></a>4️⃣<strong>对复杂表达式的支持</strong></h4><h5 id="Jinja2-2"><a href="#Jinja2-2" class="headerlink" title="Jinja2"></a><strong>Jinja2</strong></h5><ul>
<li>允许在控制结构中直接使用 <strong>Python 风格的表达式</strong>。</li>
<li>支持数学运算、逻辑操作、函数调用等。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% if (user.score * 1.2) &gt; 100 and user.name.startswith('A') %}</span><br><span class="line">    &lt;p&gt;Special user!&lt;/p&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="Django-模板-2"><a href="#Django-模板-2" class="headerlink" title="Django 模板"></a><strong>Django 模板</strong></h5><ul>
<li><strong>不支持复杂的表达式</strong>，需通过自定义模板标签或过滤器实现。</li>
<li>简单逻辑可以通过 <code>with</code> 标签或过滤器组合实现。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">with</span></span> multiplied_score=user.score|multiply:1.2 %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">if</span></span> multiplied_score &gt; 100 and user.name|startswith:<span class="string">'A'</span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Special user!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endwith</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="5️⃣-else-分支的差异"><a href="#5️⃣-else-分支的差异" class="headerlink" title="5️⃣ else 分支的差异"></a>5️⃣ <strong><code>else</code> 分支的差异</strong></h4><h4 id="Jinja2-3"><a href="#Jinja2-3" class="headerlink" title="Jinja2"></a><strong>Jinja2</strong></h4><ul>
<li><code>for</code> 循环支持 <code>else</code> 分支，当循环未执行时触发。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% for user in users %}</span><br><span class="line">    {{ user.name }}</span><br><span class="line">{% else %}</span><br><span class="line">    &lt;p&gt;No users found.&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Django-模板-3"><a href="#Django-模板-3" class="headerlink" title="Django 模板"></a><strong>Django 模板</strong></h4><ul>
<li>不支持 <code>for...else</code>，需通过检查列表是否为空来实现类似功能。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span> users %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">for</span></span> user <span class="keyword">in</span> users %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">{{ user.name }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No users found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure>



<h3 id="（3）过滤器："><a href="#（3）过滤器：" class="headerlink" title="（3）过滤器："></a>（3）<strong>过滤器</strong>：</h3><ul>
<li>Jinja2：<code>{{ variable|filter }}</code></li>
<li>Django：<code>{{ variable|filter }}</code></li>
<li>Jinja2 提供了更多的内置过滤器，例如 <code>map</code>、<code>select</code>、<code>reject</code> 等。</li>
<li>Django 的过滤器更简单，但可以通过自定义模板标签和过滤器扩展。</li>
<li>两者都支持过滤器，但内置过滤器的名称和功能可能有所不同。</li>
</ul>
<h3 id="（4）注释："><a href="#（4）注释：" class="headerlink" title="（4）注释："></a>（4）<strong>注释</strong>：</h3><ul>
<li>Jinja2：``</li>
<li>Django：``</li>
<li> 注释语法完全相同。</li>
</ul>
<h3 id="（5）模板继承："><a href="#（5）模板继承：" class="headerlink" title="（5）模板继承："></a>（5）<strong>模板继承</strong>：</h3><ul>
<li>两者都支持模板继承，语法几乎相同：<ul>
<li>Jinja2：<code>{% extends "base.html" %}</code></li>
<li>Django：<code>{% extends "base.html" %}</code></li>
</ul>
</li>
</ul>
<h3 id="（6）全局函数和变量："><a href="#（6）全局函数和变量：" class="headerlink" title="（6）全局函数和变量："></a>（6）<strong>全局函数和变量</strong>：</h3><ul>
<li>Jinja2 支持在模板中定义全局函数和变量。</li>
<li>Django 模板更依赖上下文处理器（Context Processors）来传递全局变量。</li>
</ul>
<h2 id="6-总结对比表"><a href="#6-总结对比表" class="headerlink" title="6.总结对比表"></a>6. <strong>总结对比表</strong></h2><table>
<thead>
<tr>
<th align="left"><strong>功能</strong></th>
<th align="left"><strong> Jinja2</strong></th>
<th align="left"><strong>Django 模板</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">条件中的复杂表达式</td>
<td align="left">支持（如 <code>&gt;=</code>, <code>in</code>, <code>is</code>）</td>
<td align="left">不支持，需用简单逻辑或过滤器</td>
</tr>
<tr>
<td align="left"><code>for</code> 循环中的条件</td>
<td align="left">允许直接在 <code>for</code> 后添加条件</td>
<td align="left">需在循环内部使用 <code>if</code> 标签</td>
</tr>
<tr>
<td align="left">循环变量</td>
<td align="left"><code>loop.index</code>, <code>loop.first</code> 等</td>
<td align="left"><code>forloop.counter</code>, <code>forloop.first</code> 等</td>
</tr>
<tr>
<td align="left"><code>for...else</code></td>
<td align="left">支持</td>
<td align="left">不支持，需用 <code>if</code> 检查列表是否为空</td>
</tr>
<tr>
<td align="left">数学运算和函数调用</td>
<td align="left">允许直接使用（如 <code>user.score * 1.2</code>）</td>
<td align="left">需自定义过滤器或 <code>with</code> 标签</td>
</tr>
</tbody></table>
<h2 id="7-选择建议"><a href="#7-选择建议" class="headerlink" title="7.选择建议"></a>7. <strong>选择建议</strong></h2><ul>
<li><strong>Jinja2</strong>：适合需要灵活性和复杂逻辑的场景（如 Flask、FastAPI 项目）。</li>
<li><strong>Django 模板</strong>：适合遵循 Django 设计哲学，强调模板与业务逻辑分离的项目。</li>
</ul>
<p>两者的差异主要体现在语法灵活性和功能扩展性上，根据项目需求选择即可！</p>
<h2 id="8-部分测试例子"><a href="#8-部分测试例子" class="headerlink" title="8.部分测试例子"></a>8. 部分测试例子</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;测试 jinja2&lt;/p&gt;</span><br><span class="line">{% for i in range(10) if i % 2 == 0 %}</span><br><span class="line">    {{ i }}</span><br><span class="line">{% endfor %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;支持更复杂的表达式，可以直接在条件中组合逻辑操作。&lt;/p&gt;</span><br><span class="line">{% if users.1.age  &gt;= 19 %}</span><br><span class="line">    &lt;p&gt;{{ users.1.name }}的年龄大于等于19&lt;/p&gt;</span><br><span class="line">{% endif %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p&gt;允许使用 Python 风格的条件表达式（如 in、is、数学运算等）。&lt;/p&gt;</span><br><span class="line">{% if 1 in list1 %}</span><br><span class="line">    &lt;p&gt;1 in list1&lt;/p&gt;</span><br><span class="line">{% elif 1 not in list1 %}</span><br><span class="line">    &lt;p&gt;1 not in list1&lt;/p&gt;</span><br><span class="line">{% endif %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p&gt;支持在 `for` 循环中直接添加条件（类似 Python 的列表推导式）。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">{% for user in users if user.age &gt;=18 %}</span><br><span class="line">    &lt;p&gt;{{ user.name }}的年龄为{{ user.age }}已成年。&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p&gt;提供 `loop` 变量，包含丰富的循环元数据（如 `loop.index`、`loop.first` 等）。&lt;/p&gt;</span><br><span class="line">{% for n in list3 %}</span><br><span class="line">    &lt;p&gt;列表第{{ loop.index }}位是{{ n }},列表总长度为{{ loop.length }}&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">{% for n in list3 %}</span><br><span class="line">    &lt;p&gt;列表第{{ loop.index0 }}位是{{ n }},列表总长度为{{ loop.length }}&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p&gt;允许在控制结构中直接使用 Python 风格的表达式。&lt;/p&gt;</span><br><span class="line">&lt;p&gt;支持数学运算、逻辑操作、函数调用等。&lt;/p&gt;</span><br><span class="line">{% if (users.3.score * 1.2) &gt; 100 and users.3.name.startswith('王') %}</span><br><span class="line">    &lt;p&gt;{{ users.3.name }}---Special user!&lt;/p&gt;</span><br><span class="line">{% endif %}</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p&gt;for 循环支持 else 分支，当循环未执行时触发。&lt;/p&gt;</span><br><span class="line">{% for user in users1 %}</span><br><span class="line">    {{ user.name }}</span><br><span class="line">{% else %}</span><br><span class="line">    &lt;p&gt;No users found.&lt;/p&gt;</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>



<pre><code>
## 9.相关参考

[deepseek](https://chat.deepseek.com/)
</code></pre>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>jinja2</tag>
      </tags>
  </entry>
</search>
